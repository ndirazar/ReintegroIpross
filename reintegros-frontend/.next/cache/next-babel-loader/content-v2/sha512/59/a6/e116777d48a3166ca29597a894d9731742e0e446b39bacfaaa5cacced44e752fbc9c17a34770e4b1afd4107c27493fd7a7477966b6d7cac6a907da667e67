{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport _defineProperty from \"/reintegros/reintegros-frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/reintegros/reintegros-frontend/components/builder/FieldRender.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { TextField, Checkbox, FormControl, FormControlLabel, FormHelperText, InputLabel, Select, MenuItem, InputAdornment } from '@material-ui/core';\nimport { KeyboardDatePicker, KeyboardTimePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport React from 'react';\nimport { Controller } from 'react-hook-form';\nimport { FieldType } from './FormField';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { format, parseISO } from 'date-fns';\nimport { FORM_BUILDER } from '../../labels';\nimport FieldAutocomplete from './FieldAutocomplete';\nimport FileInput from '../common/FileInput'; // Needed for prevent passing 'value' and 'onChange' props\n\nvar DatePicker = KeyboardDatePicker;\nvar TimePicker = KeyboardTimePicker;\nexport var getError = function getError(field, errors) {\n  var _field$rules, _field$rules2, _field$rules3, _field$rules4;\n\n  if (errors && errors[field.name]) {\n    switch (errors[field.name].type) {\n      case 'required':\n        return FORM_BUILDER.required;\n\n      case 'min':\n        return \"\".concat(FORM_BUILDER.min, \" \").concat((_field$rules = field.rules) === null || _field$rules === void 0 ? void 0 : _field$rules.min);\n\n      case 'minLength':\n        return \"\".concat(FORM_BUILDER.minLength, \" \").concat((_field$rules2 = field.rules) === null || _field$rules2 === void 0 ? void 0 : _field$rules2.minLength);\n\n      case 'max':\n        return \"\".concat(FORM_BUILDER.max, \" \").concat((_field$rules3 = field.rules) === null || _field$rules3 === void 0 ? void 0 : _field$rules3.max);\n\n      case 'maxLength':\n        return \"\".concat(FORM_BUILDER.maxLength, \" \").concat((_field$rules4 = field.rules) === null || _field$rules4 === void 0 ? void 0 : _field$rules4.maxLength);\n\n      case 'pattern':\n        return errors[field.name].message || FORM_BUILDER.pattern;\n\n      case 'validate':\n        return errors[field.name].message;\n\n      default:\n        return FORM_BUILDER[\"default\"];\n    }\n  } else {\n    return null;\n  }\n};\nexport var getRules = function getRules(field, form) {\n  var rules = field.rules || {};\n\n  if (rules.validate) {\n    var oldMethod = rules.validate;\n\n    rules.validate = function () {\n      return oldMethod(form);\n    };\n  }\n\n  return rules;\n};\nexport default function FieldRender(_ref) {\n  var _ref2,\n      _this = this,\n      _ref3,\n      _ref4,\n      _ref5,\n      _ref6;\n\n  var field = _ref.field,\n      form = _ref.form,\n      data = _ref.data;\n  var control = form.control,\n      errors = form.errors;\n  var variant = 'standard';\n  var error = getError(field, errors);\n  var rules = getRules(field, form);\n\n  if (field.component === 'email') {\n    rules.pattern = /^[a-zA-Z0-9.!#$%&â€™*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;\n  } // Prefix & Suffix\n\n\n  var inputProps = {};\n\n  if (field.prefix) {\n    inputProps.startAdornment = /*#__PURE__*/_jsxDEV(InputAdornment, {\n      position: \"start\",\n      children: field.prefix\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 33\n    }, this);\n  }\n\n  if (field.suffix) {\n    inputProps.endAdornment = /*#__PURE__*/_jsxDEV(InputAdornment, {\n      position: \"end\",\n      children: field.suffix\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 31\n    }, this);\n  }\n\n  switch (field.type) {\n    case FieldType.date:\n      return /*#__PURE__*/_jsxDEV(MuiPickersUtilsProvider, {\n        utils: DateFnsUtils,\n        children: /*#__PURE__*/_jsxDEV(Controller, {\n          variant: variant,\n          name: field.name,\n          label: field.label,\n          control: control,\n          error: !!error,\n          rules: rules,\n          defaultValue: (_ref2 = data[field.name] && format(parseISO(data[field.name]), 'dd/MM/yyyy')) !== null && _ref2 !== void 0 ? _ref2 : null,\n          render: function render(props) {\n            return /*#__PURE__*/_jsxDEV(DatePicker, {\n              value: props.value,\n              onChange: props.onChange,\n              inputRef: props.ref,\n              autoOk: true,\n              disableToolbar: true,\n              variant: \"inline\",\n              format: \"dd/MM/yyyy\",\n              inputVariant: variant,\n              fullWidth: true,\n              label: field.label,\n              helperText: error,\n              disabled: field.disabled,\n              KeyboardButtonProps: {\n                'aria-label': 'change date'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 15\n            }, _this);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this);\n      break;\n\n    case FieldType.time:\n      return /*#__PURE__*/_jsxDEV(MuiPickersUtilsProvider, {\n        utils: DateFnsUtils,\n        children: /*#__PURE__*/_jsxDEV(Controller, {\n          variant: variant,\n          error: !!error,\n          rules: rules,\n          render: function render(props) {\n            return /*#__PURE__*/_jsxDEV(TimePicker, {\n              value: props.value,\n              onChange: props.onChange,\n              inputRef: props.ref,\n              autoOk: true,\n              variant: \"inline\",\n              disableToolbar: true,\n              inputVariant: variant,\n              fullWidth: true,\n              label: field.label,\n              error: !!error,\n              helperText: error,\n              disabled: field.disabled,\n              format: \"HH:mm\",\n              KeyboardButtonProps: {\n                'aria-label': 'change time'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 15\n            }, _this);\n          },\n          name: field.name,\n          placeholder: field.placeholder,\n          control: control\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this);\n      break;\n\n    case FieldType[\"int\"]:\n      return /*#__PURE__*/_jsxDEV(Controller, {\n        render: function render(props) {\n          var _parseInt;\n\n          return /*#__PURE__*/_jsxDEV(TextField, {\n            label: field.label,\n            value: (_parseInt = parseInt(props.value)) !== null && _parseInt !== void 0 ? _parseInt : null,\n            name: field.name,\n            variant: variant,\n            fullWidth: true,\n            type: \"number\",\n            helperText: error,\n            inputRef: props.ref,\n            onChange: function onChange(e) {\n              return props.onChange(parseInt(e.target.value));\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 13\n          }, _this);\n        },\n        defaultValue: (_ref3 = data && data[field.name]) !== null && _ref3 !== void 0 ? _ref3 : null,\n        type: \"number\",\n        name: field.name,\n        label: field.label,\n        control: control,\n        error: !!error,\n        rules: rules\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this);\n\n    case FieldType[\"float\"]:\n      return /*#__PURE__*/_jsxDEV(Controller, {\n        render: function render(props) {\n          return /*#__PURE__*/_jsxDEV(TextField, {\n            label: field.label,\n            value: props.value,\n            name: field.name,\n            type: \"number\",\n            variant: variant,\n            fullWidth: true,\n            helperText: error,\n            inputRef: props.ref,\n            onChange: function onChange(e) {\n              return props.onChange(e.target.value);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 13\n          }, _this);\n        },\n        defaultValue: (_ref4 = data && data[field.name]) !== null && _ref4 !== void 0 ? _ref4 : null,\n        name: field.name,\n        label: field.label,\n        control: control,\n        error: !!error,\n        rules: rules\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this);\n      break;\n\n    case FieldType.options:\n      if (!Array.isArray(field.options)) {\n        return /*#__PURE__*/_jsxDEV(FieldAutocomplete, {\n          field: field,\n          error: error,\n          rules: rules,\n          form: form\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 16\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(FormControl, {\n          variant: variant,\n          fullWidth: true,\n          children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n            children: field.label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Controller, {\n            control: control,\n            name: field.name,\n            id: field.name,\n            error: !!error,\n            rules: rules,\n            render: function render(props) {\n              return /*#__PURE__*/_jsxDEV(Select, {\n                label: field.label,\n                value: props.value,\n                onChange: function onChange(e) {\n                  var _e$target$value, _e$target;\n\n                  return props.onChange((_e$target$value = e === null || e === void 0 ? void 0 : (_e$target = e.target) === null || _e$target === void 0 ? void 0 : _e$target.value) !== null && _e$target$value !== void 0 ? _e$target$value : null);\n                },\n                children: field.options.map(function (elem, index) {\n                  return /*#__PURE__*/_jsxDEV(MenuItem, {\n                    value: elem.value,\n                    children: elem.label\n                  }, index, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 232,\n                    columnNumber: 21\n                  }, _this);\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 226,\n                columnNumber: 17\n              }, _this);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 13\n          }, this), error && /*#__PURE__*/_jsxDEV(FormHelperText, {\n            children: error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 23\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 11\n        }, this);\n      }\n\n      break;\n\n    case FieldType[\"boolean\"]:\n      return /*#__PURE__*/_jsxDEV(FormControlLabel, {\n        control: /*#__PURE__*/_jsxDEV(Controller, {\n          error: !!error,\n          rules: rules,\n          helperText: error,\n          variant: variant,\n          fullWidth: true,\n          label: field.label,\n          render: function render(props) {\n            return /*#__PURE__*/_jsxDEV(Checkbox, {\n              onChange: function onChange(e) {\n                return props.onChange(e.target.checked);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 256,\n              columnNumber: 34\n            }, _this);\n          },\n          valueName: \"checked\",\n          name: field.name,\n          control: control,\n          color: \"primary\",\n          disabled: field.disabled,\n          defaultValue: data[field.name] || false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 13\n        }, this),\n        label: field.label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 9\n      }, this);\n      break;\n\n    case FieldType.file:\n      return /*#__PURE__*/_jsxDEV(Controller, {\n        render: function render(props) {\n          return /*#__PURE__*/_jsxDEV(FileInput, _objectSpread(_objectSpread({}, props), {}, {\n            multiple: field.multiple\n          }), void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 30\n          }, _this);\n        },\n        defaultValue: (_ref5 = data && data[field.name]) !== null && _ref5 !== void 0 ? _ref5 : null,\n        name: field.name,\n        label: field.label,\n        control: control,\n        error: !!error,\n        rules: rules\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 9\n      }, this);\n      break;\n\n    default:\n      return /*#__PURE__*/_jsxDEV(Controller, {\n        render: function render(props) {\n          return /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              htmlFor: field.name,\n              children: field.label\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 288,\n              columnNumber: 15\n            }, _this), /*#__PURE__*/_jsxDEV(TextField, {\n              value: props.value,\n              name: field.name,\n              id: field.name,\n              variant: variant,\n              fullWidth: true,\n              helperText: error,\n              inputRef: props.ref,\n              onChange: function onChange(e) {\n                return props.onChange(e.target.value);\n              },\n              disabled: field.disabled,\n              InputProps: inputProps\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 289,\n              columnNumber: 15\n            }, _this)]\n          }, void 0, true);\n        },\n        defaultValue: (_ref6 = data && data[field.name]) !== null && _ref6 !== void 0 ? _ref6 : null,\n        name: field.name,\n        label: field.label,\n        control: control,\n        error: !!error,\n        rules: rules\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 9\n      }, this);\n      break;\n  }\n}\n_c = FieldRender;\n\nvar _c;\n\n$RefreshReg$(_c, \"FieldRender\");","map":{"version":3,"sources":["/reintegros/reintegros-frontend/components/builder/FieldRender.tsx"],"names":["TextField","Checkbox","FormControl","FormControlLabel","FormHelperText","InputLabel","Select","MenuItem","InputAdornment","KeyboardDatePicker","KeyboardTimePicker","MuiPickersUtilsProvider","React","Controller","FieldType","DateFnsUtils","format","parseISO","FORM_BUILDER","FieldAutocomplete","FileInput","DatePicker","TimePicker","getError","field","errors","name","type","required","min","rules","minLength","max","maxLength","message","pattern","getRules","form","validate","oldMethod","FieldRender","data","control","variant","error","component","inputProps","prefix","startAdornment","suffix","endAdornment","date","label","props","value","onChange","ref","disabled","time","placeholder","parseInt","e","target","options","Array","isArray","map","elem","index","checked","file","multiple"],"mappings":"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","sourcesContent":["import {\n  TextField,\n  Checkbox,\n  RadioGroup,\n  FormControl,\n  FormControlLabel,\n  Radio,\n  FormHelperText,\n  FormLabel,\n  InputLabel,\n  Select,\n  MenuItem,\n  OutlinedInputProps,\n  InputAdornment,\n} from '@material-ui/core';\nimport {\n  KeyboardDatePicker,\n  KeyboardTimePicker,\n  MuiPickersUtilsProvider,\n} from '@material-ui/pickers';\nimport React from 'react';\nimport { Controller } from 'react-hook-form';\nimport { FieldType, FormField } from './FormField';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { format, parseISO } from 'date-fns';\nimport { FORM_BUILDER } from '../../labels';\nimport FieldAutocomplete from './FieldAutocomplete';\nimport FileInput from '../common/FileInput';\n\n// Needed for prevent passing 'value' and 'onChange' props\nconst DatePicker: any = KeyboardDatePicker;\nconst TimePicker: any = KeyboardTimePicker;\ntype Props = {\n  field: any;\n  form: any;\n  data: any;\n};\n\nexport const getError = (field: any, errors: any) => {\n  if (errors && errors[field.name]) {\n    switch (errors[field.name].type) {\n      case 'required':\n        return FORM_BUILDER.required;\n      case 'min':\n        return `${FORM_BUILDER.min} ${field.rules?.min}`;\n      case 'minLength':\n        return `${FORM_BUILDER.minLength} ${field.rules?.minLength}`;\n      case 'max':\n        return `${FORM_BUILDER.max} ${field.rules?.max}`;\n      case 'maxLength':\n        return `${FORM_BUILDER.maxLength} ${field.rules?.maxLength}`;\n      case 'pattern':\n        return errors[field.name].message || FORM_BUILDER.pattern;\n      case 'validate':\n        return errors[field.name].message;\n      default:\n        return FORM_BUILDER.default;\n    }\n  } else {\n    return null;\n  }\n};\n\nexport const getRules = (field, form) => {\n  const rules = field.rules || {};\n  if (rules.validate) {\n    const oldMethod = rules.validate;\n    rules.validate = () => oldMethod(form);\n  }\n  return rules;\n};\nexport default function FieldRender({ field, form, data }: Props) {\n  const { control, errors } = form;\n  const variant = 'standard';\n\n  const error = getError(field, errors);\n  const rules = getRules(field, form);\n  if (field.component === 'email') {\n    rules.pattern = /^[a-zA-Z0-9.!#$%&â€™*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;\n  }\n  // Prefix & Suffix\n  const inputProps: Partial<OutlinedInputProps> = {};\n  if (field.prefix) {\n    inputProps.startAdornment = <InputAdornment position=\"start\">{field.prefix}</InputAdornment>;\n  }\n  if (field.suffix) {\n    inputProps.endAdornment = <InputAdornment position=\"end\">{field.suffix}</InputAdornment>;\n  }\n  switch (field.type) {\n    case FieldType.date:\n      return (\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\n          <Controller\n            variant={variant}\n            name={field.name}\n            label={field.label}\n            control={control}\n            error={!!error}\n            rules={rules}\n            defaultValue={\n              (data[field.name] && format(parseISO(data[field.name]), 'dd/MM/yyyy')) ?? null\n            }\n            render={(props) => (\n              <DatePicker\n                value={props.value}\n                onChange={props.onChange}\n                inputRef={props.ref}\n                autoOk\n                disableToolbar\n                variant=\"inline\"\n                format=\"dd/MM/yyyy\"\n                inputVariant={variant}\n                fullWidth={true}\n                label={field.label}\n                helperText={error}\n                disabled={field.disabled}\n                KeyboardButtonProps={{\n                  'aria-label': 'change date',\n                }}\n              />\n            )}\n          />\n        </MuiPickersUtilsProvider>\n      );\n      break;\n\n    case FieldType.time:\n      return (\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\n          <Controller\n            variant={variant}\n            error={!!error}\n            rules={rules}\n            render={(props) => (\n              <TimePicker\n                value={props.value}\n                onChange={props.onChange}\n                inputRef={props.ref}\n                autoOk\n                variant=\"inline\"\n                disableToolbar\n                inputVariant={variant}\n                fullWidth={true}\n                label={field.label}\n                error={!!error}\n                helperText={error}\n                disabled={field.disabled}\n                format=\"HH:mm\"\n                KeyboardButtonProps={{\n                  'aria-label': 'change time',\n                }}\n              />\n            )}\n            name={field.name}\n            placeholder={field.placeholder}\n            control={control}\n          />\n        </MuiPickersUtilsProvider>\n      );\n      break;\n    case FieldType.int:\n      return (\n        <Controller\n          render={(props) => (\n            <TextField\n              label={field.label}\n              value={parseInt(props.value) ?? null}\n              name={field.name}\n              variant={variant}\n              fullWidth={true}\n              type=\"number\"\n              helperText={error}\n              inputRef={props.ref}\n              onChange={(e) => props.onChange(parseInt(e.target.value))}\n            />\n          )}\n          defaultValue={(data && data[field.name]) ?? null}\n          type=\"number\"\n          name={field.name}\n          label={field.label}\n          control={control}\n          error={!!error}\n          rules={rules}\n        />\n      );\n    case FieldType.float:\n      return (\n        <Controller\n          render={(props) => (\n            <TextField\n              label={field.label}\n              value={props.value}\n              name={field.name}\n              type=\"number\"\n              variant={variant}\n              fullWidth={true}\n              helperText={error}\n              inputRef={props.ref}\n              onChange={(e) => props.onChange(e.target.value)}\n            />\n          )}\n          defaultValue={(data && data[field.name]) ?? null}\n          name={field.name}\n          label={field.label}\n          control={control}\n          error={!!error}\n          rules={rules}\n        />\n      );\n      break;\n\n    case FieldType.options:\n      if (!Array.isArray(field.options)) {\n        return <FieldAutocomplete field={field} error={error} rules={rules} form={form} />;\n      } else {\n        return (\n          <FormControl variant={variant} fullWidth={true}>\n            <InputLabel>{field.label}</InputLabel>\n            <Controller\n              control={control}\n              name={field.name}\n              id={field.name}\n              error={!!error}\n              rules={rules}\n              render={(props) => (\n                <Select\n                  label={field.label}\n                  value={props.value}\n                  onChange={(e) => props.onChange(e?.target?.value ?? null)}\n                >\n                  {field.options.map((elem, index) => (\n                    <MenuItem key={index} value={elem.value}>\n                      {elem.label}\n                    </MenuItem>\n                  ))}\n                </Select>\n              )}\n            />\n            {error && <FormHelperText>{error}</FormHelperText>}\n          </FormControl>\n        );\n      }\n      break;\n\n    case FieldType.boolean:\n      return (\n        <FormControlLabel\n          control={\n            <Controller\n              error={!!error}\n              rules={rules}\n              helperText={error}\n              variant={variant}\n              fullWidth={true}\n              label={field.label}\n              render={(props) => <Checkbox onChange={(e) => props.onChange(e.target.checked)} />}\n              valueName=\"checked\"\n              name={field.name}\n              control={control}\n              color=\"primary\"\n              disabled={field.disabled}\n              defaultValue={data[field.name] || false}\n            />\n          }\n          label={field.label}\n        />\n      );\n      break;\n\n    case FieldType.file:\n      return (\n        <Controller\n          render={(props) => <FileInput {...props} multiple={field.multiple} />}\n          defaultValue={(data && data[field.name]) ?? null}\n          name={field.name}\n          label={field.label}\n          control={control}\n          error={!!error}\n          rules={rules}\n        />\n      );\n      break;\n    default:\n      return (\n        <Controller\n          render={(props) => (\n            <>\n              <InputLabel htmlFor={field.name}>{field.label}</InputLabel>\n              <TextField\n                value={props.value}\n                name={field.name}\n                id={field.name}\n                variant={variant}\n                fullWidth={true}\n                helperText={error}\n                inputRef={props.ref}\n                onChange={(e) => props.onChange(e.target.value)}\n                disabled={field.disabled}\n                InputProps={inputProps}\n              />\n            </>\n          )}\n          defaultValue={(data && data[field.name]) ?? null}\n          name={field.name}\n          label={field.label}\n          control={control}\n          error={!!error}\n          rules={rules}\n        />\n      );\n      break;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}