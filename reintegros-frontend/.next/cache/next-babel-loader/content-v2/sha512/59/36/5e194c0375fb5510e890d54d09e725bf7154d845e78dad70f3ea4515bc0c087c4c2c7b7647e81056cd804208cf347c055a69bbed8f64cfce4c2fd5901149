{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Box, Typography } from '@material-ui/core';\nimport React, { useEffect, useState } from 'react';\nimport useSWR from 'swr';\nimport CuponesList from './CuponesList';\nimport { get, send } from '../api-call/service';\nimport Loading from '../common/Loading';\nimport { ERRORS, LOADING, CUPONES, CAPITULO } from '../../labels';\nimport Alert from '../common/Alert';\nimport ActionBar from '../common/ActionBar';\nimport { objToQueryString, formatDate, getUser, isUserCasaCentral, exportTableData } from '../common/helpers';\nimport Modal from '../common/Modal';\nimport filterConfig from './FiltersConfig';\nimport TableFilters from '../common/TableFilters';\nimport ConfirmDialog from '../common/ConfirmDialog';\nexport default function Cupones() {\n  var _user$delegacionPrinc, _capitulos$results;\n\n  const user = getUser();\n  const INITIAL_FILTER = {\n    page: 1,\n    size: 20,\n    delegacion: [isUserCasaCentral() ? '' : (user === null || user === void 0 ? void 0 : (_user$delegacionPrinc = user.delegacionPrincipal) === null || _user$delegacionPrinc === void 0 ? void 0 : _user$delegacionPrinc.id) || ''],\n    fecha_alta__gt: '',\n    fecha_alta__lt: '',\n    capitulo: [],\n    nroLote: '',\n    estado: 'abierto'\n  };\n  const {\n    0: filters,\n    1: setFilters\n  } = useState(_objectSpread({}, INITIAL_FILTER));\n  const {\n    0: filterQueryStr,\n    1: setFilterQueryStr\n  } = useState(objToQueryString(filters));\n  const {\n    data,\n    error: errorGet,\n    mutate\n  } = useSWR(`${CUPONES.route}/?${filterQueryStr}`);\n  const {\n    0: error,\n    1: setError\n  } = useState(null);\n  const {\n    0: openModalSetState,\n    1: setOpenModalSetState\n  } = useState(null);\n  const {\n    0: cuponToUpdate,\n    1: setCuponToUpdate\n  } = useState(null);\n  const {\n    0: info,\n    1: setInfo\n  } = useState(null);\n  const {\n    0: showFilters,\n    1: setShowFilters\n  } = useState(false);\n  const {\n    0: showConfirmDialog,\n    1: setShowConfirmDialog\n  } = useState(false);\n  const {\n    0: cuponesToDelete,\n    1: setCuponesToDelete\n  } = useState(null);\n  const {\n    data: capitulos,\n    error: capError\n  } = useSWR(`${CAPITULO.route}/`);\n\n  const handleChangePagination = pagination => {\n    setFilters(_objectSpread(_objectSpread({}, filters), {}, {\n      page: pagination.page,\n      size: pagination.pageSize\n    }));\n  };\n\n  const handleFilter = newFilters => {\n    if (newFilters.fecha_alta__gt) {\n      newFilters.fecha_alta__gt = formatDate(newFilters.fecha_alta__gt);\n    } else {\n      delete newFilters.fecha_alta__gt;\n    }\n\n    if (newFilters.fecha_alta__lt) {\n      newFilters.fecha_alta__lt = formatDate(newFilters.fecha_alta__lt);\n    } else {\n      delete newFilters.fecha_alta__lt;\n    }\n\n    if (!newFilters.nroLote || isNaN(newFilters.nroLote)) {\n      delete newFilters.nroLote;\n    }\n\n    setFilters(newFilters);\n    setShowFilters(false);\n  };\n\n  const handleCancelFilter = () => {\n    setFilters(_objectSpread({}, INITIAL_FILTER));\n  };\n\n  const handleCloseFilter = () => {\n    setShowFilters(false);\n  };\n\n  const handleSetState = (stateSelected, cupon) => {\n    setCuponToUpdate(cupon);\n    setOpenModalSetState(true);\n  };\n\n  const handleConfirmModal = async () => {\n    try {\n      await send({\n        url: `api/cupon/${cuponToUpdate.id}/reabrir`,\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      setInfo(CUPONES.messages.successReopenCupones);\n      mutate();\n    } catch (error) {\n      setError('onEditStateCupon');\n    }\n\n    setOpenModalSetState(false);\n  };\n\n  const handleCancelModal = () => {\n    setOpenModalSetState(false);\n  };\n\n  const handleOnCreate = () => {\n    mutate(`${CUPONES.route}/?${filterQueryStr}`);\n  };\n\n  const handleOnRemove = async cupones => {\n    setShowConfirmDialog(true);\n    const ids = cupones.map(cup => {\n      return cup.id;\n    });\n    setCuponesToDelete(ids);\n  };\n\n  const handleConfirmDelete = async () => {\n    setShowConfirmDialog(false);\n\n    try {\n      // await post(`${CUPONES.route}/quitar`, cuponesToDelete);\n      const response = await send({\n        url: `${CUPONES.route}/quitar`,\n        data: {\n          cupones: [...cuponesToDelete]\n        },\n        method: 'POST',\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      mutate(`${CUPONES.route}/?${filterQueryStr}`);\n    } catch (error) {\n      setError('onEditStateCupon');\n    }\n  };\n\n  const handleExport = async (allColumns, allData) => {\n    var _await$get, _await$get$data;\n\n    const exportedData = (_await$get = await get(`${CUPONES.route}/?` + objToQueryString(_objectSpread(_objectSpread({}, filters), {}, {\n      size: data.count || 10000\n    })))) === null || _await$get === void 0 ? void 0 : (_await$get$data = _await$get.data) === null || _await$get$data === void 0 ? void 0 : _await$get$data.results;\n    exportTableData('Solicitudes-autorizadas', allColumns, exportedData);\n  };\n\n  useEffect(() => {\n    setFilterQueryStr(objToQueryString(filters));\n  }, [filters]);\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(ActionBar, {\n      actions: []\n    }), /*#__PURE__*/_jsxs(Box, {\n      p: 2,\n      m: 1,\n      style: {\n        position: 'relative'\n      },\n      children: [/*#__PURE__*/_jsx(CuponesList, {\n        data: data,\n        onPaginationChange: handleChangePagination,\n        onHandleSetState: handleSetState,\n        onFilter: () => {\n          setShowFilters(!showFilters);\n        },\n        filters: filters,\n        onCreate: handleOnCreate,\n        onRemove: handleOnRemove,\n        onExport: handleExport\n      }), /*#__PURE__*/_jsx(TableFilters, {\n        config: filterConfig,\n        data: filters,\n        options: {\n          capitulo: capitulos === null || capitulos === void 0 ? void 0 : (_capitulos$results = capitulos.results) === null || _capitulos$results === void 0 ? void 0 : _capitulos$results.map(c => ({\n            value: c.capitulo,\n            label: c.descripcion\n          }))\n        },\n        onSubmit: handleFilter,\n        onCancel: handleCancelFilter,\n        show: showFilters,\n        onClose: handleCloseFilter\n      })]\n    }), openModalSetState && /*#__PURE__*/_jsxs(Modal, {\n      customClasses: {},\n      open: true,\n      onClose: () => setOpenModalSetState(!openModalSetState),\n      title: CUPONES.modalSetState.mainTitle,\n      breadcrumbs: '',\n      subTitle: false,\n      actions: true,\n      onAcept: handleConfirmModal,\n      onCancel: handleCancelModal,\n      maxWidth: 'md',\n      children: [/*#__PURE__*/_jsx(Typography, {\n        children: CUPONES.modalSetState.subTitle1\n      }), /*#__PURE__*/_jsx(Typography, {\n        children: CUPONES.modalSetState.subTitle2\n      }), /*#__PURE__*/_jsx(Typography, {\n        children: CUPONES.modalSetState.subTitle3(cuponToUpdate)\n      }), /*#__PURE__*/_jsx(Typography, {\n        children: CUPONES.modalSetState.subTitle4\n      })]\n    }), /*#__PURE__*/_jsx(ConfirmDialog, {\n      open: showConfirmDialog,\n      onConfirm: handleConfirmDelete,\n      onClose: () => {\n        setCuponesToDelete(null);\n        setShowConfirmDialog(false);\n      },\n      message: CUPONES.messages.deleteMessage\n    }), /*#__PURE__*/_jsx(Loading, {\n      loading: !data,\n      message: LOADING(CUPONES.name)\n    }), /*#__PURE__*/_jsx(Alert, {\n      open: !!errorGet || !!error || !!info,\n      severity: !!info ? 'success' : 'error',\n      message: !!info ? info : !!error ? ERRORS[error](CUPONES.name) : ERRORS.onGet(CUPONES.name)\n    })]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}