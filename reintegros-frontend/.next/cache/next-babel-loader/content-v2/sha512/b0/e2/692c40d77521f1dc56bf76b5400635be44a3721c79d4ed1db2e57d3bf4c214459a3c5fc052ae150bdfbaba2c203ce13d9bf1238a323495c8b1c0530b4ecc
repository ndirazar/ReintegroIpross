{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Box } from '@material-ui/core';\nimport React, { useEffect, useState } from 'react';\nimport { NOMENCLADOR, PRESTACIONES } from '../../../labels';\nimport AttachMoneyOutlinedIcon from '@material-ui/icons/AttachMoneyOutlined';\nimport Form, { FieldType } from '../../builder';\nimport { parseISO, subDays } from 'date-fns';\nimport { get } from '../../api-call/service';\nexport const FormEditPrestaciones = ({\n  prestacion,\n  submit,\n  onCancel\n}) => {\n  const {\n    0: fechaDesde,\n    1: setFechaDesde\n  } = useState(new Date());\n  const {\n    0: isDateRange,\n    1: setIsDateRange\n  } = useState(prestacion.isDateRange === 'range');\n  const {\n    0: fechaVigenciaHastaLiminit,\n    1: setFechaVigenciaHastaLimit\n  } = useState(null);\n  const {\n    0: loaded,\n    1: setLoaded\n  } = useState(false);\n  const {\n    0: solicitud,\n    1: setSolicitud\n  } = useState({\n    prestaciones: []\n  });\n  const {\n    0: nomenclador,\n    1: setNomenclador\n  } = useState({});\n  let prestadores = [];\n  const configPrestaciones = [{\n    name: 'capitulo',\n    type: FieldType.options,\n    label: PRESTACIONES.fields.capitulo,\n    options: async () => {\n      return [{\n        value: prestacion.capitulo.value,\n        label: prestacion.capitulo.label\n      }];\n    },\n    styling: {\n      columns: 6\n    },\n    rules: {\n      required: true\n    },\n    disabled: true\n  }, {\n    name: 'nomenclador',\n    type: FieldType.options,\n    label: PRESTACIONES.fields.nomenclador,\n    options: async (form, query) => {\n      return [{\n        value: prestacion.nomenclador.value,\n        label: prestacion.nomenclador.label\n      }];\n    },\n    styling: {\n      columns: 12\n    },\n    rules: {\n      required: true\n    },\n    disabled: true\n  }, {\n    name: 'isDateRange',\n    type: FieldType.options,\n    label: 'Fecha / Rango',\n    options: PRESTACIONES.optionsDate,\n    styling: {\n      columns: 6\n    },\n    onChange: (val, form) => {\n      setIsDateRange(val === 'range');\n    }\n  }, {\n    name: 'fechaPractica',\n    type: FieldType.date,\n    label: PRESTACIONES.fields.fechaPractica,\n    styling: {\n      columns: 6\n    },\n    rules: {\n      required: true,\n      min: subDays(new Date(), 60).toString(),\n      max: new Date().toString()\n    },\n    onChange: (val, form) => {\n      setFechaDesde(val);\n    }\n  }, {\n    name: 'fechaPracticaHasta',\n    type: FieldType.date,\n    label: PRESTACIONES.fields.fechaPracticaHasta,\n    styling: {\n      columns: 6\n    },\n    rules: {\n      required: true,\n      min: fechaDesde.toString(),\n      max: fechaVigenciaHastaLiminit\n    },\n    disabled: !isDateRange\n  }, {\n    name: 'modalidad',\n    type: FieldType.options,\n    label: PRESTACIONES.fields.modalidad,\n    options: NOMENCLADOR.optionsModalidadPresentacion,\n    styling: {\n      columns: 6\n    },\n    rules: {\n      required: true\n    },\n    disabled: true\n  }, {\n    name: 'cobertura',\n    type: FieldType.string,\n    label: PRESTACIONES.fields.cobertura,\n    styling: {\n      columns: 6\n    },\n    rules: {\n      required: true\n    },\n    disabled: true,\n    prefix: /*#__PURE__*/_jsx(_Fragment, {\n      children: \"%\"\n    })\n  }, {\n    name: 'estadoActual',\n    type: FieldType.options,\n    label: PRESTACIONES.fields['estadoActual'],\n    options: PRESTACIONES.optionsEstadoActual,\n    styling: {\n      columns: 6\n    },\n    rules: {\n      required: true\n    },\n    disabled: true\n  }, {\n    name: 'prestador',\n    type: FieldType.options,\n    label: PRESTACIONES.fields.prestador,\n    options: async () => {\n      return prestadores;\n    },\n    onUpdate: async (val, form) => {\n      if (val === '') {\n        prestadores = [];\n        return;\n      }\n\n      prestadores = (await get(`api/prestadores/?profEstado=alta&matricula=${val}`)).data.results.map(p => ({\n        value: p.id,\n        label: `${p.matricula} - ${p.nombre} ${p.apellido}`\n      }));\n    },\n    styling: {\n      columns: 6\n    },\n    rules: {\n      required: true\n    },\n    help: 'Si no encuentra el prestador, solicite el alta al Administrador del sistema.'\n  }, {\n    name: 'br',\n    type: FieldType.br,\n    label: ''\n  }, {\n    name: 'valorIprossNomenclador',\n    type: FieldType.string,\n    label: PRESTACIONES.fields.valorIprossNomenclador,\n    styling: {\n      columns: 3\n    },\n    rules: {\n      required: true\n    },\n    disabled: true,\n    prefix: /*#__PURE__*/_jsx(AttachMoneyOutlinedIcon, {})\n  }, {\n    name: 'montoTotal',\n    type: FieldType.string,\n    label: PRESTACIONES.fields.montoTotal,\n    styling: {\n      columns: 3\n    },\n    rules: {\n      min: 1,\n      required: true\n    },\n    disabled: true\n  }, {\n    name: 'valorPrestacion',\n    type: FieldType.float,\n    label: PRESTACIONES.fields.valorPrestacion,\n    styling: {\n      columns: 3\n    },\n    rules: {\n      required: true\n    },\n    prefix: /*#__PURE__*/_jsx(AttachMoneyOutlinedIcon, {})\n  }, {\n    name: 'montoReintegrar',\n    type: FieldType.string,\n    label: PRESTACIONES.fields.montoReintegrar,\n    styling: {\n      columns: 3\n    },\n    rules: {\n      required: true\n    },\n    disabled: true,\n    prefix: /*#__PURE__*/_jsx(AttachMoneyOutlinedIcon, {})\n  }, {\n    name: 'cantidad',\n    type: FieldType.int,\n    label: PRESTACIONES.fields.cantidad,\n    styling: {\n      columns: 6\n    },\n    rules: {\n      min: 1,\n      required: true\n    },\n    onChange: (val, form) => {\n      const valorIpross = form.getValues()['valorIprossNomenclador'];\n      const montoTotal = valorIpross * val;\n      form.setValue('montoTotal', montoTotal.toFixed(2));\n      const cobertura = form.getValues()['cobertura'];\n      const montoReintegrar = (valorIpross * val * (parseInt(cobertura) / 100)).toFixed(2);\n      form.setValue('montoReintegrar', montoReintegrar);\n    }\n  }, {\n    name: 'periodo',\n    type: FieldType.options,\n    options: NOMENCLADOR.optionsPeriodoTope,\n    label: PRESTACIONES.fields.periodo,\n    styling: {\n      columns: 6\n    },\n    rules: {\n      required: true\n    }\n  }];\n\n  const handleCancelPrestacion = () => {\n    onCancel();\n  };\n\n  const handleSubmitPrestacion = data => {\n    submit(_objectSpread({\n      id: prestacion.id\n    }, data));\n  };\n\n  useEffect(() => {\n    console.log({\n      prestacion\n    });\n\n    if (!loaded) {\n      get(`api/solicitudes/${prestacion.solicitud.id}`).then(response => {\n        setSolicitud(response.data);\n      });\n      get(`api/nomenclador/${prestacion.nomenclador.value}`).then(response => {\n        var _response$data, _response$data2;\n\n        setNomenclador(response === null || response === void 0 ? void 0 : response.data);\n        setFechaVigenciaHastaLimit(response !== null && response !== void 0 && (_response$data = response.data) !== null && _response$data !== void 0 && _response$data.fechaVigenciaHasta ? parseISO(response === null || response === void 0 ? void 0 : (_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : _response$data2.fechaVigenciaHasta) : null);\n        console.log({\n          nomenclador: response.data\n        });\n      });\n      setLoaded(true);\n    }\n  }, [prestacion]);\n  return /*#__PURE__*/_jsx(Box, {\n    margin: 3,\n    children: /*#__PURE__*/_jsx(Form, {\n      config: configPrestaciones,\n      data: prestacion,\n      onSubmit: handleSubmitPrestacion,\n      onCancel: () => {\n        handleCancelPrestacion();\n      }\n    })\n  });\n};","map":null,"metadata":{},"sourceType":"module"}