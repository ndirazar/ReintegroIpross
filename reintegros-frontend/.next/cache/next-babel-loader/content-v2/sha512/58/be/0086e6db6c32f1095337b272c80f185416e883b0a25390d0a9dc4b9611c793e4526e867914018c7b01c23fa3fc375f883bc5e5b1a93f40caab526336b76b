{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Box, Divider, List, ListItem, ListItemText, Typography, makeStyles } from '@material-ui/core';\nimport React, { useState } from 'react';\nimport { CUPONES } from '../../labels';\nimport Table from '../common/Table';\nimport Loading from '../common/Loading';\nimport Alert from '../common/Alert';\nimport AddIcon from '@material-ui/icons/Add';\nimport { send } from '../api-call/service';\nimport Modal from '../common/Modal';\nimport SubTitleModalCreateLote from './SubTitleModalCreateLote';\nimport ChangeState from './ChangeState';\nimport { isUserAdmin, isUserContaduria, objToQueryString } from '../common/helpers';\nimport SaveIcon from '@material-ui/icons/Save';\nconst useStyles = makeStyles(theme => ({\n  typeCupon: {\n    marginLeft: '8px'\n  }\n}));\nexport default function CuponesList({\n  data,\n  onPaginationChange,\n  onHandleSetState,\n  onFilter,\n  filters,\n  onCreate\n}) {\n  var _data, _data2, _dataPreview$cupones, _dataPreview$lotes;\n\n  const classes = useStyles();\n  const {\n    0: openModal,\n    1: setOpenModal\n  } = useState(false);\n  const {\n    0: dataPreview,\n    1: setDataPreview\n  } = useState({});\n  const {\n    0: processing,\n    1: setProcessing\n  } = useState(false);\n  const {\n    0: info,\n    1: setInfo\n  } = useState(null);\n  const dynamicRenders = {\n    estado: rowData => {\n      if (rowData.estado === 'pagoRechazado') {\n        return /*#__PURE__*/_jsx(ChangeState, {\n          onSetState: onSetState,\n          rowData: rowData\n        });\n      } else {\n        var _CUPONES$optionsEstad;\n\n        return /*#__PURE__*/_jsx(Typography, {\n          children: (_CUPONES$optionsEstad = CUPONES.optionsEstado.find(opt => opt.value === rowData.estado)) === null || _CUPONES$optionsEstad === void 0 ? void 0 : _CUPONES$optionsEstad.label\n        });\n      }\n    }\n  };\n\n  const onSetState = (stateSelected, cupon) => {\n    if (stateSelected.includes('abierto')) {\n      onHandleSetState(stateSelected, cupon);\n    }\n  };\n\n  const columns = Object.keys(CUPONES.fields).map(key => {\n    var _ref, _dynamicRenders$key;\n\n    return {\n      title: CUPONES.fields[key],\n      field: key,\n      render: (_ref = (_dynamicRenders$key = dynamicRenders[key]) !== null && _dynamicRenders$key !== void 0 ? _dynamicRenders$key : CUPONES.renders[key]) !== null && _ref !== void 0 ? _ref : null\n    };\n  });\n  const {\n    0: pagination,\n    1: setPagination\n  } = useState({\n    page: 1,\n    pageSize: 20\n  });\n\n  const preCreateLote = async rowData => {\n    data = rowData.map(item => item.id);\n    setOpenModal(true);\n    setProcessing(true);\n    const preview = await send({\n      url: `api/lote/preview`,\n      data: {\n        cupones: data\n      },\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    setDataPreview(preview.data);\n    setProcessing(false);\n  };\n\n  const handleConfirmModal = async () => {\n    var ids = [];\n    setProcessing(true);\n    dataPreview.cupones.forEach(value => {\n      if (value.isValid) {\n        ids.push(value.cupon.id);\n      }\n    });\n    const preview = await send({\n      url: `api/lote/`,\n      data: {\n        cupones: ids\n      },\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    setProcessing(false);\n    setInfo(CUPONES.messages.successCreateCupones);\n    setOpenModal(false);\n    onCreate();\n  };\n\n  const handleCancelModal = () => {\n    setOpenModal(false);\n  };\n\n  const reloadPagination = pagData => {\n    setPagination(pagData);\n    onPaginationChange(_objectSpread(_objectSpread({}, pagination), pagData));\n  };\n\n  const getActions = () => {\n    var actions = [];\n\n    if (isUserAdmin() || isUserContaduria()) {\n      actions = [{\n        icon: () => /*#__PURE__*/_jsx(AddIcon, {}),\n        tooltip: 'Crear lotes',\n        onClick: async (event, rowData) => {\n          preCreateLote(rowData);\n        }\n      }];\n    }\n\n    return actions;\n  };\n\n  const getHeaderActions = () => {\n    var actions = [];\n\n    if (isUserAdmin() || isUserContaduria()) {\n      actions = [{\n        label: CUPONES.createLoteForFilteredCupones,\n        onClick: getFileredCuponesList,\n        icon: /*#__PURE__*/_jsx(SaveIcon, {})\n      }];\n    }\n\n    return actions;\n  };\n\n  const getFileredCuponesList = async () => {\n    let f = filters;\n    delete f.page;\n    delete f.size;\n    setOpenModal(true);\n    setProcessing(true);\n    const filterQueryStr = objToQueryString(f);\n    const preview = await send({\n      url: `api/lote/preview/table/?${filterQueryStr}`,\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    setDataPreview(preview.data);\n    setProcessing(false);\n  };\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(Table, {\n      columns: columns,\n      totalCount: (_data = data) === null || _data === void 0 ? void 0 : _data.count,\n      data: (_data2 = data) === null || _data2 === void 0 ? void 0 : _data2.results,\n      title: CUPONES.name,\n      options: {\n        search: true,\n        selection: !!isUserAdmin() || !!isUserContaduria()\n      },\n      pagination: {\n        page: pagination.page - 1,\n        pageSize: pagination.pageSize\n      },\n      onPageChange: (page, pageSize) => {\n        reloadPagination(_objectSpread(_objectSpread({}, pagination), {}, {\n          page: page + 1,\n          pageSize\n        }));\n      },\n      onChangeRowsPerPage: pageSize => {\n        reloadPagination(_objectSpread(_objectSpread({}, pagination), {}, {\n          pageSize\n        }));\n      },\n      onFilterClick: onFilter,\n      actions: getActions(),\n      headerActions: getHeaderActions(),\n      onSelectionChange: () => {}\n    }), openModal && /*#__PURE__*/_jsxs(Modal, {\n      customClasses: {},\n      open: true,\n      onClose: () => setOpenModal(!openModal),\n      title: CUPONES.modalCreateLote.mainTitle,\n      breadcrumbs: '',\n      subTitle: /*#__PURE__*/_jsx(SubTitleModalCreateLote, {\n        data: dataPreview\n      }),\n      actions: true,\n      onAcept: handleConfirmModal,\n      onCancel: handleCancelModal,\n      maxWidth: 'md',\n      children: [/*#__PURE__*/_jsx(List, {\n        children: (_dataPreview$cupones = dataPreview.cupones) === null || _dataPreview$cupones === void 0 ? void 0 : _dataPreview$cupones.map((item, i) => {\n          if (!item.isValid) {\n            return /*#__PURE__*/_jsxs(Box, {\n              children: [/*#__PURE__*/_jsx(ListItem, {\n                children: /*#__PURE__*/_jsxs(Box, {\n                  children: [/*#__PURE__*/_jsx(Box, {\n                    fontWeight: \"fontWeightBold\",\n                    children: /*#__PURE__*/_jsx(ListItemText, {\n                      primary: /*#__PURE__*/_jsx(Box, {\n                        children: /*#__PURE__*/_jsxs(Typography, {\n                          children: [`Cupon: ${item.cupon.id}`, /*#__PURE__*/_jsx(\"span\", {\n                            className: classes.typeCupon,\n                            children: `${item.cupon.judicial ? 'Judicial' : ''}`\n                          })]\n                        })\n                      })\n                    })\n                  }), /*#__PURE__*/_jsxs(Box, {\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    ml: 5,\n                    children: [/*#__PURE__*/_jsx(Box, {\n                      children: /*#__PURE__*/_jsx(ListItemText, {\n                        primary: \"No es v\\xE1lido\",\n                        secondary: /*#__PURE__*/_jsx(Typography, {\n                          color: \"error\",\n                          children: \"Errores:\"\n                        })\n                      })\n                    }), /*#__PURE__*/_jsx(Box, {\n                      display: \"flex\",\n                      flexDirection: \"column\",\n                      children: item.errors.map((item, ii) => {\n                        return /*#__PURE__*/_jsx(ListItemText, {\n                          children: `- ${item}`\n                        }, ii);\n                      })\n                    })]\n                  })]\n                })\n              }), /*#__PURE__*/_jsx(Divider, {})]\n            }, i);\n          }\n        })\n      }), ((_dataPreview$lotes = dataPreview.lotes) === null || _dataPreview$lotes === void 0 ? void 0 : _dataPreview$lotes.length) >= 1 && /*#__PURE__*/_jsx(List, {\n        subheader: /*#__PURE__*/_jsx(Typography, {\n          children: \"Se crearan los siguientes lotes:\"\n        }),\n        children: dataPreview.lotes.map((item, i) => {\n          return /*#__PURE__*/_jsxs(Box, {\n            children: [/*#__PURE__*/_jsx(ListItem, {\n              children: /*#__PURE__*/_jsx(ListItemText, {\n                primary: `Lote ${item.tipo}`,\n                secondary: `Monto de reintegro: $${item.montoTotal}`\n              })\n            }), /*#__PURE__*/_jsx(Divider, {})]\n          });\n        })\n      }), /*#__PURE__*/_jsx(Loading, {\n        loading: processing,\n        message: CUPONES.messages.loading\n      })]\n    }), /*#__PURE__*/_jsx(Alert, {\n      open: info,\n      severity: 'success',\n      message: info,\n      autoHideAfter: 5500,\n      onClose: () => {\n        setInfo(null);\n      }\n    })]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}