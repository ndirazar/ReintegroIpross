{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Box } from '@material-ui/core';\nimport React, { useState } from 'react';\nimport useSWR from 'swr';\nimport UsersForm from './UsersForm';\nimport UsersList from './UsersList';\nimport AutorenewIcon from '@material-ui/icons/Autorenew';\nimport { ERRORS, INFO, LOADING, USERS } from '../../labels';\nimport ActionBar from '../common/ActionBar';\nimport { patch, post } from '../api-call/service';\nimport Loading from '../common/Loading';\nimport Alert from '../common/Alert';\nexport default function Users() {\n  const {\n    data,\n    error: errorOnGet,\n    mutate\n  } = useSWR('api/usuarios');\n  const {\n    data: grupos,\n    error: errorOnGetGroup,\n    mutate: mutateGroup\n  } = useSWR('api/groups/');\n  const {\n    data: delegaciones,\n    error: errorOnGetDelegaciones,\n    mutate: mutateDelegacion\n  } = useSWR('api/delegaciones/');\n  const {\n    0: openForm,\n    1: setOpenForm\n  } = useState(false);\n  const {\n    0: error,\n    1: setError\n  } = useState(null);\n  const {\n    0: info,\n    1: setInfo\n  } = useState(null);\n\n  const handleSetDelegaciones = async (delegacionesSelected, userId) => {\n    try {\n      await patch('api/usuarios', {\n        delegaciones: delegacionesSelected\n      }, userId);\n      setInfo(INFO.setDelegaciones);\n      mutateDelegacion();\n    } catch (error) {\n      setError('onSetDelegaciones');\n    }\n  };\n\n  const handleSetGroups = async (groupsSelected, userId) => {\n    try {\n      await patch('api/usuarios', {\n        groups: groupsSelected\n      }, userId);\n      setInfo(INFO.setGroups);\n      mutateGroup();\n    } catch (error) {\n      setError('onSetGroups');\n    }\n  };\n\n  const handleDeactivate = async (id, state) => {\n    try {\n      await patch('api/usuarios', {\n        is_active: !state\n      }, id);\n      mutate();\n    } catch (error) {\n      setError('onDeactivate');\n    }\n  };\n\n  const userActions = [{\n    label: USERS.customActions.sync,\n    onClick: async () => {\n      try {\n        var _res$data$count, _res$data;\n\n        const res = await post('api/ldap-sync-users', {});\n        setInfo(INFO.onSync(USERS.name, (_res$data$count = res === null || res === void 0 ? void 0 : (_res$data = res.data) === null || _res$data === void 0 ? void 0 : _res$data.count) !== null && _res$data$count !== void 0 ? _res$data$count : 0));\n        mutate();\n      } catch (error) {\n        setError('onSync');\n      }\n    },\n    icon: /*#__PURE__*/_jsx(AutorenewIcon, {})\n  }];\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(ActionBar, {\n      actions: userActions\n    }), /*#__PURE__*/_jsxs(Box, {\n      p: 2,\n      m: 1,\n      border: \"1px solid #c4c4c4\",\n      children: [openForm && /*#__PURE__*/_jsx(UsersForm, {}), data && /*#__PURE__*/_jsx(UsersList, {\n        data: data,\n        delegaciones: delegaciones,\n        grupos: grupos,\n        onUserDeactivate: handleDeactivate,\n        onhandleSetGroups: handleSetGroups,\n        onhandleSetDelegaciones: handleSetDelegaciones\n      })]\n    }), /*#__PURE__*/_jsx(Loading, {\n      loading: !data,\n      message: LOADING(USERS.name)\n    }), /*#__PURE__*/_jsx(Alert, {\n      open: errorOnGet || errorOnGetDelegaciones || errorOnGetGroup || error || info,\n      severity: info ? 'success' : 'error',\n      message: info ? info : error ? ERRORS[error](USERS.name) : ERRORS.onGet(USERS.name),\n      autoHideAfter: 3000,\n      onClose: () => {\n        setError(null);\n        setInfo(null);\n      }\n    })]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}