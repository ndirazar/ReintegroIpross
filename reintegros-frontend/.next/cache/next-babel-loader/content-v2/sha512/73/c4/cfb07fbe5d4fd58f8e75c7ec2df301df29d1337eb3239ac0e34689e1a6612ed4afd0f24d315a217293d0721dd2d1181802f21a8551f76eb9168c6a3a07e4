{"ast":null,"code":"import axios from 'axios';\nimport Cookies from 'universal-cookie';\naxios.defaults.baseURL = process.env.NEXT_PUBLIC_API;\nconst client = axios.create({\n  baseURL: process.env.NEXT_PUBLIC_API\n}); //Send token in all requests\n\nclient.interceptors.request.use(async config => {\n  const cookies = new Cookies();\n  const access = cookies.get('access');\n\n  if (access) {\n    config.headers = {\n      Authorization: `Bearer ${access}`\n    };\n  }\n\n  return config;\n}, error => {\n  Promise.reject(error);\n}); //Refresh token and retry on 401 error\n\nclient.interceptors.response.use(response => response, async function (error) {\n  var _error$response;\n\n  const cookies = new Cookies();\n  const originalRequest = error.config;\n  const refresh = cookies.get('refresh'); //If token is expired and exist refresh is saved on cookies i can try renew access\n\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401 && !originalRequest._retry && refresh) {\n    originalRequest._retry = true;\n    const res = await axios.post('api/token/refresh/', {\n      refresh\n    });\n    const {\n      access\n    } = res.data;\n\n    if (access) {\n      cookies.set('access', access, {\n        path: '/'\n      });\n    } else {\n      //Refresh is invalid. TODO redirect login\n      cookies.remove('access');\n      cookies.remove('refresh');\n    }\n\n    return client(originalRequest);\n  }\n\n  return Promise.reject(error);\n});\n\nconst handleError = async error => {\n  return Promise.reject(error);\n};\n\nconst handleSuccess = response => {\n  return response;\n};\n\nconst request = async options => {\n  return client(options).then(handleSuccess).catch(handleError);\n};\n\nconst post = async (url, data) => {\n  return request({\n    url: `${url}/`,\n    data,\n    method: 'POST'\n  });\n};\n\nconst get = async url => {\n  return request({\n    url,\n    method: 'GET'\n  });\n};\n\nconst remove = async (url, id) => {\n  return request({\n    url: `${url}/${id}/`,\n    method: 'DELETE'\n  });\n};\n\nconst put = async (url, data, id) => {\n  return request({\n    url: `${url}/${id}/`,\n    data,\n    method: 'PUT'\n  });\n};\n\nconst patch = async (url, data, id) => {\n  return request({\n    url: `${url}/${id}/`,\n    data,\n    method: 'PATCH'\n  });\n};\n\nexport { post, request as send, client, get, put, remove, patch };","map":null,"metadata":{},"sourceType":"module"}