{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/reintegros/reintegros-frontend/components/notificaciones/Notificaciones.tsx\";\nimport React, { useState } from 'react';\nimport { List, ListItem, ListItemText, Box, Divider, Typography, Badge, ListSubheader, Chip } from '@material-ui/core';\nimport useStyles from './NotificacionesStyle';\nimport { formatDateNotification, getUser } from '../common/helpers';\nimport { send } from '../api-call/service';\nexport default function Notificaciones({\n  notificaciones,\n  onUpdateNotificaciones\n}) {\n  var _getItemsList;\n\n  const classes = useStyles();\n  const {\n    0: tabSolicitudes,\n    1: setTabSolicitudes\n  } = useState(true);\n\n  const markNotificationAsRead = async notificacion => {\n    const user = getUser();\n    const preview = await send({\n      url: `api/usuarios/${user.id}/marcar-notificacion-como-leida/${notificacion.id}`,\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    localStorage.setItem('notifications', JSON.stringify(preview.data.notifications));\n    onUpdateNotificaciones(preview.data.notifications);\n  };\n  /**\n   * Funcion que se encarga de retornar el listado de notificaciones segun el\n   * tab que este seleccionado (solicitudes, solicitudes autorizadas)\n   */\n\n\n  const getItemsList = () => {\n    if (tabSolicitudes) {\n      const notificacionesSelected = notificaciones === null || notificaciones === void 0 ? void 0 : notificaciones.filter(notificacion => {\n        return notificacion.tipo === 'solicitud';\n      });\n      return notificacionesSelected;\n    } else {\n      const notificacionesSelected = notificaciones === null || notificaciones === void 0 ? void 0 : notificaciones.filter(notificacion => {\n        return notificacion.tipo === 'autorizacion';\n      });\n      return notificacionesSelected;\n    }\n  };\n\n  const switchToSolicitudesAutorizadas = () => {\n    setTabSolicitudes(false);\n  };\n\n  const switchToSolicitudes = () => {\n    setTabSolicitudes(true);\n  };\n  /**\n   * Funcion que se encarga de retornar las cantidad de notificaciones\n   * no leidas del tipo de solicitud\n   */\n\n\n  const cantidadDeNotificacionesDeSolicitudes = () => {\n    return notificaciones === null || notificaciones === void 0 ? void 0 : notificaciones.filter(notificacion => {\n      return notificacion.tipo === 'solicitud' && notificacion.visto == false;\n    }).length;\n  };\n  /**\n   * Funcion que se encarga de retornar las cantidad de notificaciones\n   * no leidas del tipo de solicitudes autorizadas\n   */\n\n\n  const cantidadDeNotificacionesDeAutorizaciones = () => {\n    return notificaciones === null || notificaciones === void 0 ? void 0 : notificaciones.filter(notificacion => {\n      return notificacion.tipo === 'autorizacion' && notificacion.visto == false;\n    }).length;\n  };\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    boxShadow: 4,\n    className: classes.root,\n    children: /*#__PURE__*/_jsxDEV(List, {\n      className: classes.list,\n      subheader: /*#__PURE__*/_jsxDEV(ListSubheader, {\n        className: classes.subHeader,\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            className: classes.titleSubHeader,\n            children: \"Notificaciones\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            display: \"flex\",\n            className: classes.chips,\n            children: [/*#__PURE__*/_jsxDEV(Badge, {\n              color: \"secondary\",\n              badgeContent: cantidadDeNotificacionesDeSolicitudes(),\n              className: classes.chipSolicitudes,\n              children: /*#__PURE__*/_jsxDEV(Chip, {\n                label: \"Solicitudes\",\n                color: \"primary\",\n                clickable: true,\n                onClick: switchToSolicitudes,\n                className: `${classes.chip} ${tabSolicitudes ? 'active' : ''}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 100,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Badge, {\n              color: \"secondary\",\n              badgeContent: cantidadDeNotificacionesDeAutorizaciones(),\n              children: /*#__PURE__*/_jsxDEV(Chip, {\n                label: \"Solicitudes Autorizadas\",\n                color: \"primary\",\n                onClick: switchToSolicitudesAutorizadas,\n                clickable: true,\n                className: `${classes.chip} ${tabSolicitudes ? '' : 'active'}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 109,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this),\n      children: (_getItemsList = getItemsList()) === null || _getItemsList === void 0 ? void 0 : _getItemsList.map((notificacion, i) => {\n        return /*#__PURE__*/_jsxDEV(Box, {\n          children: /*#__PURE__*/_jsxDEV(ListItem, {\n            button: true,\n            selected: !notificacion.visto,\n            onClick: () => markNotificationAsRead(notificacion),\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                width: '100%'\n              },\n              children: [/*#__PURE__*/_jsxDEV(Box, {\n                display: \"flex\",\n                justifyContent: \"space-between\",\n                children: [/*#__PURE__*/_jsxDEV(Box, {\n                  children: /*#__PURE__*/_jsxDEV(ListItemText, {\n                    primary: /*#__PURE__*/_jsxDEV(Typography, {\n                      className: classes.titleText,\n                      children: notificacion.titulo\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 136,\n                      columnNumber: 27\n                    }, this),\n                    secondary: /*#__PURE__*/_jsxDEV(Typography, {\n                      className: classes.mensajeText,\n                      children: notificacion.mensaje\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 141,\n                      columnNumber: 27\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 134,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 133,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Box, {\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  children: [!notificacion.visto && /*#__PURE__*/_jsxDEV(Box, {\n                    className: classes.badge,\n                    children: /*#__PURE__*/_jsxDEV(Badge, {\n                      color: \"primary\",\n                      variant: \"dot\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 150,\n                      columnNumber: 27\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 149,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(Box, {\n                    children: /*#__PURE__*/_jsxDEV(ListItemText, {\n                      primary: /*#__PURE__*/_jsxDEV(Typography, {\n                        className: classes.dateText,\n                        children: formatDateNotification(notificacion.fechaDeCreacion)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 156,\n                        columnNumber: 29\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 154,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 153,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 147,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 132,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 164,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 15\n          }, this)\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/reintegros/reintegros-frontend/components/notificaciones/Notificaciones.tsx"],"names":["React","useState","List","ListItem","ListItemText","Box","Divider","Typography","Badge","ListSubheader","Chip","useStyles","formatDateNotification","getUser","send","Notificaciones","notificaciones","onUpdateNotificaciones","classes","tabSolicitudes","setTabSolicitudes","markNotificationAsRead","notificacion","user","preview","url","id","method","headers","localStorage","setItem","JSON","stringify","data","notifications","getItemsList","notificacionesSelected","filter","tipo","switchToSolicitudesAutorizadas","switchToSolicitudes","cantidadDeNotificacionesDeSolicitudes","visto","length","cantidadDeNotificacionesDeAutorizaciones","root","list","subHeader","titleSubHeader","chips","chipSolicitudes","chip","map","i","width","titleText","titulo","mensajeText","mensaje","badge","dateText","fechaDeCreacion"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport {\n  List,\n  ListItem,\n  ListItemText,\n  Box,\n  Divider,\n  Typography,\n  Badge,\n  ListSubheader,\n  Chip,\n} from '@material-ui/core';\nimport useStyles from './NotificacionesStyle';\nimport { formatDateNotification, getUser } from '../common/helpers';\nimport { send } from '../api-call/service';\nimport Cookies from 'universal-cookie';\n\ntype Props = {\n  notificaciones: any;\n  onUpdateNotificaciones: (notificaciones: any) => void;\n};\n\nexport default function Notificaciones({ notificaciones, onUpdateNotificaciones }: Props) {\n  const classes = useStyles();\n  const [tabSolicitudes, setTabSolicitudes] = useState(true);\n\n  const markNotificationAsRead = async (notificacion) => {\n    const user = getUser();\n    const preview = await send({\n      url: `api/usuarios/${user.id}/marcar-notificacion-como-leida/${notificacion.id}`,\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n    localStorage.setItem('notifications', JSON.stringify(preview.data.notifications));\n    onUpdateNotificaciones(preview.data.notifications);\n  };\n\n  /**\n   * Funcion que se encarga de retornar el listado de notificaciones segun el\n   * tab que este seleccionado (solicitudes, solicitudes autorizadas)\n   */\n  const getItemsList = () => {\n    if (tabSolicitudes) {\n      const notificacionesSelected = notificaciones?.filter((notificacion) => {\n        return notificacion.tipo === 'solicitud';\n      });\n      return notificacionesSelected;\n    } else {\n      const notificacionesSelected = notificaciones?.filter((notificacion) => {\n        return notificacion.tipo === 'autorizacion';\n      });\n      return notificacionesSelected;\n    }\n  };\n\n  const switchToSolicitudesAutorizadas = () => {\n    setTabSolicitudes(false);\n  };\n\n  const switchToSolicitudes = () => {\n    setTabSolicitudes(true);\n  };\n\n  /**\n   * Funcion que se encarga de retornar las cantidad de notificaciones\n   * no leidas del tipo de solicitud\n   */\n  const cantidadDeNotificacionesDeSolicitudes = () => {\n    return notificaciones?.filter((notificacion) => {\n      return notificacion.tipo === 'solicitud' && notificacion.visto == false;\n    }).length;\n  };\n\n  /**\n   * Funcion que se encarga de retornar las cantidad de notificaciones\n   * no leidas del tipo de solicitudes autorizadas\n   */\n  const cantidadDeNotificacionesDeAutorizaciones = () => {\n    return notificaciones?.filter((notificacion) => {\n      return notificacion.tipo === 'autorizacion' && notificacion.visto == false;\n    }).length;\n  };\n\n  return (\n    <Box boxShadow={4} className={classes.root}>\n      <List\n        className={classes.list}\n        subheader={\n          <ListSubheader className={classes.subHeader}>\n            <Box>\n              <Typography className={classes.titleSubHeader}>Notificaciones</Typography>\n              <Box display=\"flex\" className={classes.chips}>\n                <Badge\n                  color=\"secondary\"\n                  badgeContent={cantidadDeNotificacionesDeSolicitudes()}\n                  className={classes.chipSolicitudes}\n                >\n                  <Chip\n                    label=\"Solicitudes\"\n                    color=\"primary\"\n                    clickable\n                    onClick={switchToSolicitudes}\n                    className={`${classes.chip} ${tabSolicitudes ? 'active' : ''}`}\n                  />\n                </Badge>\n                <Badge color=\"secondary\" badgeContent={cantidadDeNotificacionesDeAutorizaciones()}>\n                  <Chip\n                    label=\"Solicitudes Autorizadas\"\n                    color=\"primary\"\n                    onClick={switchToSolicitudesAutorizadas}\n                    clickable\n                    className={`${classes.chip} ${tabSolicitudes ? '' : 'active'}`}\n                  />\n                </Badge>\n              </Box>\n            </Box>\n            <Divider />\n          </ListSubheader>\n        }\n      >\n        {getItemsList()?.map((notificacion, i) => {\n          return (\n            <Box key={i}>\n              <ListItem\n                button\n                selected={!notificacion.visto}\n                onClick={() => markNotificationAsRead(notificacion)}\n              >\n                <div style={{ width: '100%' }}>\n                  <Box display=\"flex\" justifyContent=\"space-between\">\n                    <Box>\n                      <ListItemText\n                        primary={\n                          <Typography className={classes.titleText}>\n                            {notificacion.titulo}\n                          </Typography>\n                        }\n                        secondary={\n                          <Typography className={classes.mensajeText}>\n                            {notificacion.mensaje}\n                          </Typography>\n                        }\n                      />\n                    </Box>\n                    <Box display=\"flex\" alignItems=\"center\">\n                      {!notificacion.visto && (\n                        <Box className={classes.badge}>\n                          <Badge color=\"primary\" variant=\"dot\" />\n                        </Box>\n                      )}\n                      <Box>\n                        <ListItemText\n                          primary={\n                            <Typography className={classes.dateText}>\n                              {formatDateNotification(notificacion.fechaDeCreacion)}\n                            </Typography>\n                          }\n                        />\n                      </Box>\n                    </Box>\n                  </Box>\n                  <Divider />\n                </div>\n              </ListItem>\n            </Box>\n          );\n        })}\n      </List>\n    </Box>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}