{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _toConsumableArray from \"/reintegros/reintegros-frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n// Third-party imports\nimport { IconButton, InputLabel, Link, makeStyles, Typography } from '@material-ui/core';\nimport { Cancel } from '@material-ui/icons';\nimport React, { useEffect, useState } from 'react';\nimport { getFileName } from '../common/helpers';\nvar useStyles = makeStyles(function (theme) {\n  return {\n    helpText: {\n      fontSize: '12px'\n    },\n    fileLink: {\n      fontSize: '16px'\n    }\n  };\n}); // Component\n\nexport default function FileInput(props) {\n  var _useState = useState(false),\n      clear = _useState[0],\n      setClear = _useState[1]; // const [fileName, setFileName] = useState('');\n  // const [fileContent, setFileContent] = useState<File | string | File[] | string[]>(null);\n\n\n  var _useState2 = useState(props.value || []),\n      fileList = _useState2[0],\n      setFileList = _useState2[1];\n\n  var _useState3 = useState(true),\n      showInput = _useState3[0],\n      setShowInput = _useState3[1];\n\n  var classes = useStyles(); // const { reset, register, watch, setError, setValue, clearErrors } = methods;\n\n  var changeHandler = function changeHandler(event) {\n    var target = event.target;\n    setClear(false);\n\n    try {\n      if (!props.multiple) {\n        var _props$methods;\n\n        var reader = new FileReader();\n        var file = target.files[0]; // setFileName(file.name);\n\n        reader.onload = function () {\n          props.onReadData && props.onReadData({\n            result: reader.result.toString(),\n            file: file\n          });\n        }; // setFileContent(file);\n\n\n        reader.readAsText(file);\n        setFileList([file.name]);\n        (_props$methods = props.methods) === null || _props$methods === void 0 ? void 0 : _props$methods.setValue(props.name, [file]);\n        props.onChange && props.onChange(file);\n      } else {\n        var _props$methods2;\n\n        var faux = [];\n        var list = [];\n        Array.from(target.files).forEach(function (file) {\n          var reader = new FileReader();\n\n          reader.onload = function () {\n            props.onReadData && props.onReadData({\n              result: reader.result.toString(),\n              file: file\n            });\n          };\n\n          reader.readAsText(file);\n          faux.push(file);\n          list.push(file.name);\n        }); // setFileContent(faux);\n\n        setFileList([].concat(_toConsumableArray(fileList), list));\n        (_props$methods2 = props.methods) === null || _props$methods2 === void 0 ? void 0 : _props$methods2.setValue(props.name, faux);\n        props.onChange && props.onChange(faux);\n      }\n    } catch (e) {//TODO some thing\n    }\n  };\n\n  var removeFile = function removeFile(file) {\n    if (typeof fileList === 'string') {\n      setFileList([]);\n    } else {\n      var files = fileList.filter(function (f) {\n        return f !== file;\n      });\n      setFileList(files);\n    } // setFileName(null);\n    // setFileContent(null);\n    // setClear(true);\n\n\n    props.onRemove && props.onRemove(file);\n  };\n\n  var getFileListItem = function getFileListItem(file) {\n    return /*#__PURE__*/_jsxs(Typography, {\n      className: classes.fileLink,\n      children: [/*#__PURE__*/_jsx(Link, {\n        href: file,\n        target: \"_blank\",\n        children: getFileName(file)\n      }), /*#__PURE__*/_jsx(IconButton, {\n        onClick: function onClick() {\n          removeFile(file);\n        },\n        color: \"default\",\n        children: /*#__PURE__*/_jsx(Cancel, {})\n      })]\n    });\n  };\n\n  var getFileList = function getFileList() {\n    if (typeof fileList === 'string') {\n      return /*#__PURE__*/_jsx(\"span\", {\n        children: getFileListItem(fileList)\n      });\n    }\n\n    return fileList.map(function (file, i) {\n      return /*#__PURE__*/_jsx(\"span\", {\n        children: getFileListItem(file)\n      }, i);\n    });\n  }; // useEffect(() => {\n  //   if () {\n  //     let files = props.value || [];\n  //     if (props.value && typeof props.value === 'string') {\n  //       files = [files];\n  //     }\n  //     setFileList(files);\n  //   }\n  // }, [props, fileList, setFileList]);\n\n\n  useEffect(function () {\n    setShowInput(!props.multiple && fileList.length <= 0 || props.multiple && props.max && fileList.length < props.max);\n  }, [props, fileList, setShowInput]);\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [props.label && /*#__PURE__*/_jsx(InputLabel, {\n      htmlFor: 'file-input',\n      children: props.label\n    }), showInput && /*#__PURE__*/_jsx(\"input\", {\n      accept: props.accept,\n      id: \"file-input\",\n      multiple: props.multiple,\n      type: \"file\",\n      onChange: changeHandler\n    }), props.accept && /*#__PURE__*/_jsxs(Typography, {\n      className: classes.helpText,\n      color: \"textPrimary\",\n      variant: \"caption\",\n      display: \"block\",\n      gutterBottom: true,\n      children: [\"Archivos aceptados: \", props.accept]\n    }), props.error && /*#__PURE__*/_jsx(Typography, {\n      component: \"p\",\n      color: \"error\",\n      children: props.error\n    }), getFileList()]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}