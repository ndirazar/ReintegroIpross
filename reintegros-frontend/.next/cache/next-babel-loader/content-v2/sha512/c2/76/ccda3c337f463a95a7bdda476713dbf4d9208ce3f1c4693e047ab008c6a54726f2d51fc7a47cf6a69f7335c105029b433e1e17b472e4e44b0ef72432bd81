{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _regeneratorRuntime from \"/reintegros/reintegros-frontend/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/reintegros/reintegros-frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport React, { useState, useEffect } from 'react';\nimport { AppBar, Box, Button, Toolbar, Container, Typography, Grid, Badge } from '@material-ui/core';\nimport { useRouter } from 'next/router';\nimport { APP_NAME, LOGIN, MAIN_ENTITIES, ADMIN_ENTITIES, ACCOUNTS_ENTITIES, NAVBAR } from '../../../labels';\nimport Cookies from 'universal-cookie';\nimport HomeIcon from '@material-ui/icons/Home';\nimport PeopleRoundedIcon from '@material-ui/icons/PeopleRounded';\nimport { Apartment, Contacts, FindInPage, Receipt } from '@material-ui/icons';\nimport AccountBalance from '@material-ui/icons/AccountBalance';\nimport Gavel from '@material-ui/icons/Gavel';\nimport PeopleOutline from '@material-ui/icons/PeopleOutline';\nimport PeopleAlt from '@material-ui/icons/PeopleAlt';\nimport Dns from '@material-ui/icons/Dns';\nimport Notifications from '@material-ui/icons/Notifications';\nimport ViewList from '@material-ui/icons/ViewList';\nimport StarIcon from '@material-ui/icons/Star';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport useStyles from './NavbarStyle';\nimport Notificaciones from '../../notificaciones/Notificaciones';\nimport { send } from '../../api-call/service';\nimport { getUser } from '../helpers';\nexport default function NavBar() {\n  var router = useRouter();\n  var cookies = new Cookies();\n  var classes = useStyles();\n\n  var _useState = useState([]),\n      activeSections = _useState[0],\n      setActiveSections = _useState[1];\n\n  var _useState2 = useState('solicitudes'),\n      active = _useState2[0],\n      setActive = _useState2[1];\n\n  var _useState3 = useState(''),\n      userName = _useState3[0],\n      setUserName = _useState3[1];\n\n  var _useState4 = useState(getUser()),\n      user = _useState4[0],\n      setUser = _useState4[1];\n\n  var _useState5 = useState([]),\n      delegaciones = _useState5[0],\n      setDelegaciones = _useState5[1];\n\n  var _useState6 = useState(''),\n      delegacion = _useState6[0],\n      setDelegacion = _useState6[1];\n\n  var _useState7 = useState(false),\n      displayNotifications = _useState7[0],\n      setDisplayNotifications = _useState7[1];\n\n  var _useState8 = useState(null),\n      notifications = _useState8[0],\n      setNotifications = _useState8[1];\n\n  var _useState9 = useState([]),\n      navButtons = _useState9[0],\n      setNavButtons = _useState9[1];\n\n  var changeDelegacion = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(event) {\n      var user_response;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return send({\n                url: \"api/usuarios/\".concat(user === null || user === void 0 ? void 0 : user.id, \"/actualizar-delegacion-principal/\"),\n                data: {\n                  delegacionPrincipal: event.target.value\n                },\n                method: 'PUT',\n                headers: {\n                  'Content-Type': 'application/json'\n                }\n              });\n\n            case 2:\n              user_response = _context.sent;\n              setDelegacion(event.target.value);\n              localStorage.setItem('user', JSON.stringify(user_response.data));\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function changeDelegacion(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var getNotifications = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var preview;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return send({\n                url: \"api/usuarios/\".concat(user.id, \"/notificaciones\"),\n                method: 'GET',\n                headers: {\n                  'Content-Type': 'application/json'\n                }\n              });\n\n            case 2:\n              preview = _context2.sent;\n              setNotifications(preview.data.notifications);\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function getNotifications() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  /**\n   * Funcion que se encarga de actualizar las notificaciones del usuario y de abrir y cerrar\n   * el listado no notificaciones\n   */\n\n\n  var showNotifications = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              getNotifications();\n              setDisplayNotifications(!displayNotifications);\n\n            case 2:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function showNotifications() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    localStorage.setItem('notifications', JSON.stringify(notifications));\n  }, [notifications]);\n  var sectionIcons = [{\n    section: 'solicitudes',\n    icon: /*#__PURE__*/_jsx(PeopleRoundedIcon, {\n      className: classes.sectionIcon\n    })\n  }, {\n    section: 'auditorias',\n    icon: /*#__PURE__*/_jsx(FindInPage, {\n      className: classes.sectionIcon\n    })\n  }, {\n    section: 'lotes',\n    icon: /*#__PURE__*/_jsx(ViewList, {\n      className: classes.sectionIcon\n    })\n  }, {\n    section: 'cuentas_terceros',\n    icon: /*#__PURE__*/_jsx(AccountBalance, {\n      className: classes.sectionIcon\n    })\n  }, {\n    section: 'cuentas_judiciales',\n    icon: /*#__PURE__*/_jsx(Gavel, {\n      className: classes.sectionIcon\n    })\n  }, {\n    section: 'usuarios',\n    icon: /*#__PURE__*/_jsx(PeopleAlt, {\n      className: classes.sectionIcon\n    })\n  }, {\n    section: 'afiliados',\n    icon: /*#__PURE__*/_jsx(PeopleOutline, {\n      className: classes.sectionIcon\n    })\n  }, {\n    section: 'nomenclador',\n    icon: /*#__PURE__*/_jsx(Dns, {\n      className: classes.sectionIcon\n    })\n  }, {\n    section: 'cupones',\n    icon: /*#__PURE__*/_jsx(Receipt, {\n      className: classes.sectionIcon\n    })\n  }, {\n    section: 'delegaciones',\n    icon: /*#__PURE__*/_jsx(Apartment, {\n      className: classes.sectionIcon\n    })\n  }, {\n    section: 'prestadores',\n    icon: /*#__PURE__*/_jsx(Contacts, {\n      className: classes.sectionIcon\n    })\n  }];\n\n  var getButtonIcon = function getButtonIcon(section) {\n    var icon = sectionIcons.find(function (s) {\n      return s.section === section;\n    });\n    return icon ? icon.icon : /*#__PURE__*/_jsx(_Fragment, {});\n  };\n\n  useEffect(function () {\n    // Active tabs\n    var currentRoute = router.route.replace('/', '');\n    var isAdminRoute = ADMIN_ENTITIES.find(function (e) {\n      return e.page === currentRoute;\n    });\n    var isAccountRoute = ACCOUNTS_ENTITIES.find(function (e) {\n      return e.page === currentRoute;\n    });\n    setActive(currentRoute);\n\n    if (isAdminRoute) {\n      setActiveSections(ADMIN_ENTITIES);\n    } else if (isAccountRoute) {\n      setActiveSections(ACCOUNTS_ENTITIES);\n    } else {\n      setActiveSections(MAIN_ENTITIES);\n    }\n\n    if (cookies.get('username')) {\n      setUserName(cookies.get('username'));\n    }\n\n    if (localStorage.getItem('notifications')) {\n      setNotifications(JSON.parse(localStorage.getItem('notifications')));\n    }\n  }, [router.route]);\n  useEffect(function () {\n    if (user) {\n      var _user$delegaciones, _user$delegacionPrinc, _delegaciones$;\n\n      var dels = (_user$delegaciones = user.delegaciones) === null || _user$delegaciones === void 0 ? void 0 : _user$delegaciones.map(function (d) {\n        return {\n          value: d.id,\n          label: d.nombre\n        };\n      });\n      setDelegaciones(delegaciones);\n      setDelegacion((user === null || user === void 0 ? void 0 : (_user$delegacionPrinc = user.delegacionPrincipal) === null || _user$delegacionPrinc === void 0 ? void 0 : _user$delegacionPrinc.id) || ((_delegaciones$ = delegaciones[0]) === null || _delegaciones$ === void 0 ? void 0 : _delegaciones$.value) || '');\n      var NAV_BUTTONS = [{\n        label: NAVBAR.home,\n        action: function action() {\n          router.push('solicitudes');\n        },\n        permissions: ['Administrador', 'AuditoriaAdministrativa', 'AuditoriaCentral', 'AuditoriaMedica', 'Contaduria', 'Delegado', 'Presidencia', 'Reintegro', 'SoloLectura', 'Tesoreria']\n      }, {\n        label: NAVBAR.accounts,\n        action: function action() {\n          router.push('cuentas_terceros');\n        },\n        permissions: ['Administrador', 'Reintegro', 'Delegado']\n      }, {\n        label: NAVBAR.config,\n        action: function action() {\n          router.push('nomenclador');\n        },\n        permissions: ['Administrador', 'Presidencia']\n      }];\n      setNavButtons(NAV_BUTTONS.filter(function (btn) {\n        return hasUserPermissions(btn.permissions);\n      }));\n    }\n  }, [user]);\n\n  var logout = function logout() {\n    cookies.remove('access');\n    cookies.remove('refresh');\n    cookies.remove('username');\n    localStorage.removeItem('user');\n    localStorage.removeItem('notifications');\n    router.push('login');\n  };\n\n  var hasUserPermissions = function hasUserPermissions(sectionPermissions) {\n    var _user$groups;\n\n    var hasPermissions = false;\n    user === null || user === void 0 ? void 0 : (_user$groups = user.groups) === null || _user$groups === void 0 ? void 0 : _user$groups.forEach(function (group) {\n      if (sectionPermissions !== null && sectionPermissions !== void 0 && sectionPermissions.includes(group.name)) {\n        hasPermissions = true;\n      }\n    });\n    return hasPermissions;\n  };\n  /**\n   * Funcion que se encarga de verificar si hay al menos una notificacion sin leer.\n   */\n\n\n  var checkForMoreThanOneUnreadNotification = function checkForMoreThanOneUnreadNotification() {\n    var unreadNotifications = true;\n    notifications === null || notifications === void 0 ? void 0 : notifications.forEach(function (notification) {\n      if (notification.visto == false) {\n        unreadNotifications = false;\n      }\n    });\n    return unreadNotifications;\n  };\n  /**\n   * Funcion que se encarga de actualizar las notitificaciones cuando\n   * el usuario las marca como vistas\n   */\n\n\n  var updateNotificaciones = function updateNotificaciones(notificaciones) {\n    setNotifications(notificaciones);\n  };\n  /**\n   * Funcion que se encargar de verificar segun la seccion del sistema si tiene notificaciones\n   * sin leer, esto sirve para activar el badge del boton de la seccion.\n   */\n\n\n  var checkForBadgeVisibility = function checkForBadgeVisibility(section) {\n    switch (section.name) {\n      case 'Solicitudes':\n        var notificacionesSolicitudes = notifications === null || notifications === void 0 ? void 0 : notifications.filter(function (notificacion) {\n          return notificacion.tipo === 'solicitud' && notificacion.visto == false;\n        });\n\n        if ((notificacionesSolicitudes === null || notificacionesSolicitudes === void 0 ? void 0 : notificacionesSolicitudes.length) > 0) {\n          return false;\n        } else {\n          return true;\n        }\n\n      case 'Solicitudes Autorizadas':\n        var notificacionesAutorizaciones = notifications === null || notifications === void 0 ? void 0 : notifications.filter(function (notificacion) {\n          return notificacion.tipo === 'autorizacion' && notificacion.visto == false;\n        });\n\n        if ((notificacionesAutorizaciones === null || notificacionesAutorizaciones === void 0 ? void 0 : notificacionesAutorizaciones.length) > 0) {\n          return false;\n        } else {\n          return true;\n        }\n\n      default:\n        return true;\n    }\n  };\n\n  return /*#__PURE__*/_jsxs(Grid, {\n    children: [/*#__PURE__*/_jsx(AppBar, {\n      className: classes.appMenu,\n      children: /*#__PURE__*/_jsxs(Toolbar, {\n        children: [/*#__PURE__*/_jsx(\"img\", {\n          src: \"/images/logo-ipross.png\",\n          alt: APP_NAME,\n          width: 143,\n          height: 63,\n          className: classes.appLogo\n        }), /*#__PURE__*/_jsx(Box, {\n          display: \"flex\",\n          flexGrow: 1\n        }), navButtons.map(function (btn, i) {\n          return /*#__PURE__*/_jsx(Button, {\n            className: classes.menuBtn,\n            onClick: btn.action,\n            children: btn.label\n          }, i);\n        }), user !== null && user !== void 0 && user.casaCentral ? /*#__PURE__*/_jsxs(Box, {\n          display: \"flex\",\n          children: [/*#__PURE__*/_jsx(HomeIcon, {\n            className: classes.delegacionPrincipal\n          }), /*#__PURE__*/_jsx(Typography, {\n            className: classes.delegacionPrincipal,\n            children: \"Casa Central\"\n          })]\n        }) : /*#__PURE__*/_jsx(FormControl, {\n          children: /*#__PURE__*/_jsx(Select, {\n            id: \"delegacion-select\",\n            className: classes.delegacionSelect,\n            value: delegacion,\n            onChange: changeDelegacion,\n            title: \"Delegaci\\xF3n\",\n            children: delegaciones.map(function (del, i) {\n              return /*#__PURE__*/_jsx(MenuItem, {\n                className: classes.delegacionSelectItem,\n                value: del.value,\n                children: del.value == delegacion ? /*#__PURE__*/_jsxs(Box, {\n                  display: \"flex\",\n                  children: [/*#__PURE__*/_jsx(StarIcon, {}), /*#__PURE__*/_jsx(Typography, {\n                    children: del.label\n                  })]\n                }) : del.label\n              }, i);\n            })\n          })\n        }), /*#__PURE__*/_jsxs(Box, {\n          style: {\n            position: 'relative'\n          },\n          children: [/*#__PURE__*/_jsx(Button, {\n            className: classes.menuBtn,\n            onClick: showNotifications,\n            children: /*#__PURE__*/_jsx(Badge, {\n              color: \"primary\",\n              variant: \"dot\",\n              invisible: checkForMoreThanOneUnreadNotification(),\n              children: /*#__PURE__*/_jsx(Notifications, {})\n            })\n          }), /*#__PURE__*/_jsx(Box, {\n            style: {\n              position: 'absolute',\n              top: '35px',\n              right: '-85px',\n              visibility: displayNotifications ? 'visible' : 'hidden'\n            },\n            children: /*#__PURE__*/_jsx(Notificaciones, {\n              notificaciones: notifications,\n              onUpdateNotificaciones: updateNotificaciones\n            })\n          })]\n        }), /*#__PURE__*/_jsxs(Button, {\n          className: classes.menuBtn,\n          onClick: logout,\n          children: [LOGIN.logout, \" (\", userName, \")\"]\n        })]\n      })\n    }), /*#__PURE__*/_jsx(Container, {\n      children: /*#__PURE__*/_jsx(Box, {\n        className: classes.sectionsMenu,\n        children: activeSections.map(function (me, i) {\n          if (hasUserPermissions(me.tabPermissions)) {\n            return /*#__PURE__*/_jsx(Button, {\n              className: \"\".concat(classes.sectionBtn, \" \").concat(me.page === active ? 'active' : ''),\n              color: \"inherit\",\n              onClick: function onClick() {\n                return router.push(me.page);\n              },\n              style: {\n                width: 1200 / activeSections.length - 34,\n                maxWidth: 450\n              },\n              children: /*#__PURE__*/_jsx(Badge, {\n                color: \"primary\",\n                variant: \"dot\",\n                invisible: checkForBadgeVisibility(me),\n                style: {\n                  width: '100%'\n                },\n                children: /*#__PURE__*/_jsxs(Box, {\n                  children: [/*#__PURE__*/_jsx(\"span\", {\n                    className: classes.sectionIconWrapper,\n                    children: getButtonIcon(me.page)\n                  }), /*#__PURE__*/_jsx(\"span\", {\n                    className: classes.sectionName,\n                    children: me.name\n                  })]\n                })\n              })\n            }, i);\n          }\n        })\n      })\n    })]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}