{"ast":null,"code":"import { format, parseISO } from 'date-fns';\nvar APP_NAME = 'Reintegros';\nvar DATE_FORMAT = 'dd/MM/yyyy';\nvar FORM_BUILDER = {\n  required: 'Campo requerido ',\n  min: 'El valor debe ser superior a ',\n  minLength: 'Longitud debe ser de al menos ',\n  max: 'El valor debe ser inferior a ',\n  maxLength: 'Longitud debe ser a lo sumo de ',\n  pattern: 'El formato no es válido',\n  \"default\": 'Error desconocido',\n  unique: 'Este campo debe ser único'\n};\nvar USERS = {\n  name: 'Usuarios',\n  route: 'api/usuarios',\n  page: 'usuarios',\n  fields: {\n    username: 'Nombre de usuario',\n    email: 'Email',\n    first_name: 'Nombre',\n    last_name: 'Apellido',\n    is_active: 'Estado',\n    groups: 'Roles',\n    delegaciones: 'Delegaciones',\n    delegacionPrincipal: 'Delegacion principal',\n    capitulos: 'Capítulos'\n  },\n  filters: {\n    usuario: 'Usuario',\n    groups: 'Roles',\n    estado: 'Estado',\n    delegacion: 'Delegación'\n  },\n  optionsEstado: [{\n    label: 'Todos',\n    value: ''\n  }, {\n    label: 'Activo',\n    value: 'true'\n  }, {\n    label: 'Inactivo',\n    value: 'false'\n  }],\n  renders: {\n    is_active: function is_active(rowData) {\n      return rowData ? 'Si' : 'No';\n    },\n    groups: function groups(rowData) {\n      return rowData.groups.map(function (elem) {\n        return elem.name;\n      }).join(', ');\n    },\n    delegaciones: function delegaciones(rowData) {\n      return rowData.delegaciones.map(function (elem) {\n        return elem.nombre;\n      }).join(', ');\n    },\n    delegacionPrincipal: function delegacionPrincipal(rowData) {\n      var _rowData$delegacionPr;\n\n      return (_rowData$delegacionPr = rowData.delegacionPrincipal) === null || _rowData$delegacionPr === void 0 ? void 0 : _rowData$delegacionPr.nombre;\n    }\n  },\n  customActions: {\n    sync: 'Sincronizar Usuarios'\n  },\n  tabPermissions: ['Administrador', 'Presidencia'],\n  roles: {\n    list: [],\n    create: [],\n    update: [],\n    destroy: []\n  }\n};\nvar PRESTACIONES = {\n  name: 'Prestaciones',\n  route: 'api/prestaciones',\n  page: 'prestaciones',\n  fields: {\n    auditor: 'Auditor',\n    cantidad: 'Cantidad',\n    unidad: 'Unidad',\n    montoTotal: 'Monto total',\n    capitulo: 'Capítulo',\n    prestador: 'Prestador',\n    nomenclador: 'Prestación',\n    coseguroNomenclador: 'Coseguro',\n    valorIprossNomenclador: 'Valor IPROSS',\n    valorPrestacion: 'Monto pagado',\n    montoReintegrar: 'Monto a reintegrar',\n    estadoActual: 'Estado de auditoría',\n    cobertura: 'Cobertura',\n    fechaPractica: 'Fecha de práctica',\n    fechaPracticaHasta: 'Fecha finalizacion práctica',\n    periodo: 'Período',\n    factura: 'Factura',\n    adjuntos: 'Otros adjuntos',\n    modalidad: 'Ámbito',\n    discapacitado: '¿Posee CUD?',\n    cud: 'CUD'\n  },\n  cols: {\n    auditor: 'Auditor',\n    cantidad: 'Cantidad',\n    unidad: 'Unidad',\n    montoTotal: 'Monto total',\n    prestador: 'Prestador',\n    codigo: 'Código',\n    nomenclador: 'Prestación',\n    coseguroNomenclador: 'Coseguro',\n    valorIprossNomenclador: 'Valor IPROSS',\n    valorPrestacion: 'Monto pagado',\n    montoReintegrar: 'Monto a reintegrar',\n    estadoActual: 'Estado de auditoría',\n    cobertura: 'Cobertura',\n    fechaPractica: 'Fecha de práctica',\n    fechaPracticaHasta: 'Fecha finalizacion práctica',\n    periodo: 'Período',\n    factura: 'Factura',\n    adjuntos: 'Otros adjuntos',\n    modalidad: 'Ámbito',\n    discapacitado: '¿Posee CUD?',\n    cud: 'CUD'\n  },\n  filters: {\n    auditorActual: 'Auditor',\n    nomenclador: 'Prestación',\n    prestador: 'Prestador',\n    estadoActual: 'Estado de auditoría',\n    fechaDesde: 'Fecha desde',\n    fechaHasta: 'Fecha hasta'\n  },\n  optionsEstadoActual: [{\n    label: 'En curso',\n    value: 'enCurso'\n  }, {\n    label: 'Aceptado',\n    value: 'aceptado'\n  }, {\n    label: 'Rechazado',\n    value: 'rechazado'\n  }, {\n    label: 'Desvinculado de lote',\n    value: 'desvinculado'\n  }, {\n    label: 'Cerrado',\n    value: 'cerrado'\n  }],\n  optionsCobertura: [{\n    label: '50%',\n    value: '50'\n  }, {\n    label: '70%',\n    value: '70'\n  }, {\n    label: '80%',\n    value: '80'\n  }, {\n    label: '90%',\n    value: '90'\n  }, {\n    label: '100%',\n    value: '100'\n  }],\n  optionsDate: [{\n    label: 'Fecha',\n    value: 'date'\n  }, {\n    label: 'Rango',\n    value: 'range'\n  }],\n  renders: {\n    auditor: function auditor(rowData) {\n      var _rowData$auditoria;\n\n      if ((_rowData$auditoria = rowData.auditoria) !== null && _rowData$auditoria !== void 0 && _rowData$auditoria.auditorActual) {\n        return rowData.auditoria.auditorActual.first_name + ' ' + rowData.auditoria.auditorActual.last_name;\n      }\n    },\n    categoria: function categoria(rowData) {\n      var _rowData$categoria, _rowData$nomenclador;\n\n      if ((_rowData$categoria = rowData.categoria) !== null && _rowData$categoria !== void 0 && _rowData$categoria.nombre) {\n        var _rowData$categoria2;\n\n        return (_rowData$categoria2 = rowData.categoria) === null || _rowData$categoria2 === void 0 ? void 0 : _rowData$categoria2.nombre;\n      }\n\n      if ((_rowData$nomenclador = rowData.nomenclador) !== null && _rowData$nomenclador !== void 0 && _rowData$nomenclador.categoria) {\n        var _rowData$nomenclador2;\n\n        return (_rowData$nomenclador2 = rowData.nomenclador) === null || _rowData$nomenclador2 === void 0 ? void 0 : _rowData$nomenclador2.categoria.nombre;\n      }\n\n      return '';\n    },\n    coseguroNomenclador: function coseguroNomenclador(rowData) {\n      return 100 - rowData.cobertura;\n    },\n    modalidad: function modalidad(rowData) {\n      var _rowData$nomenclador3, _rowData$item;\n\n      var modalidad = ((_rowData$nomenclador3 = rowData.nomenclador) === null || _rowData$nomenclador3 === void 0 ? void 0 : _rowData$nomenclador3.modalidadPrestacion) || ((_rowData$item = rowData.item) === null || _rowData$item === void 0 ? void 0 : _rowData$item.modalidadPrestacion);\n      var nom = NOMENCLADOR.optionsModalidadPresentacion.find(function (n) {\n        return n.value === modalidad;\n      });\n      return nom === null || nom === void 0 ? void 0 : nom.label;\n    },\n    prestador: function prestador(rowData) {\n      var _rowData$prestador, _rowData$prestador2, _rowData$prestador3;\n\n      if (!rowData.prestador.id) {\n        return '';\n      }\n\n      return \"\".concat((_rowData$prestador = rowData.prestador) === null || _rowData$prestador === void 0 ? void 0 : _rowData$prestador.matricula, \" - \").concat((_rowData$prestador2 = rowData.prestador) === null || _rowData$prestador2 === void 0 ? void 0 : _rowData$prestador2.nombre, \" \").concat((_rowData$prestador3 = rowData.prestador) === null || _rowData$prestador3 === void 0 ? void 0 : _rowData$prestador3.apellido);\n    },\n    codigo: function codigo(rowData) {\n      var _rowData$nomenclador4, _rowData$item2;\n\n      return ((_rowData$nomenclador4 = rowData.nomenclador) === null || _rowData$nomenclador4 === void 0 ? void 0 : _rowData$nomenclador4.codigo) || ((_rowData$item2 = rowData.item) === null || _rowData$item2 === void 0 ? void 0 : _rowData$item2.codigo);\n    },\n    nomenclador: function nomenclador(rowData) {\n      var _rowData$nomenclador5, _rowData$item3;\n\n      return ((_rowData$nomenclador5 = rowData.nomenclador) === null || _rowData$nomenclador5 === void 0 ? void 0 : _rowData$nomenclador5.descripcion) || ((_rowData$item3 = rowData.item) === null || _rowData$item3 === void 0 ? void 0 : _rowData$item3.descripcion);\n    },\n    estadoActual: function estadoActual(rowData) {\n      var _rowData$auditoria2, _PRESTACIONES$options;\n\n      var estado = ((_rowData$auditoria2 = rowData.auditoria) === null || _rowData$auditoria2 === void 0 ? void 0 : _rowData$auditoria2.estadoActual) || rowData.estadoActual || 'enCurso';\n      return (_PRESTACIONES$options = PRESTACIONES.optionsEstadoActual.find(function (elem) {\n        return elem.value === estado;\n      })) === null || _PRESTACIONES$options === void 0 ? void 0 : _PRESTACIONES$options.label;\n    },\n    fechaPractica: function fechaPractica(rowData) {\n      return format(parseISO(rowData.fechaPractica), DATE_FORMAT);\n    },\n    fechaPracticaHasta: function fechaPracticaHasta(rowData) {\n      return rowData.fechaPracticaHasta ? format(parseISO(rowData.fechaPracticaHasta), DATE_FORMAT) : '-';\n    },\n    adjuntos: function adjuntos(rowData) {\n      if (rowData.adjuntos) {\n        var adArr = rowData.adjuntos.map(function (a) {\n          return a.archivo;\n        });\n        return adArr.join(', ');\n      }\n\n      return '';\n    },\n    montoTotal: function montoTotal(rowData) {\n      return \"$ \".concat((parseFloat(rowData.valorIprossNomenclador) * rowData.cantidad).toFixed(2));\n    },\n    montoReintegrar: function montoReintegrar(rowData) {\n      if (rowData.montoReintegrar) {\n        return \"$ \".concat(rowData.montoReintegrar);\n      }\n\n      return \"$ \".concat((parseFloat(rowData.valorIprossNomenclador) * rowData.cantidad * (rowData.cobertura / 100)).toFixed(2));\n    },\n    valorPrestacion: function valorPrestacion(rowData) {\n      return \"$ \".concat(rowData.valorPrestacion);\n    },\n    valorIprossNomenclador: function valorIprossNomenclador(rowData) {\n      return \"$ \".concat(rowData.valorIprossNomenclador);\n    },\n    cud: function cud(rowData) {\n      var _rowData$solicitud, _rowData$solicitud2, _rowData$solicitud2$a;\n\n      return rowData !== null && rowData !== void 0 && (_rowData$solicitud = rowData.solicitud) !== null && _rowData$solicitud !== void 0 && _rowData$solicitud.discapacitado ? rowData === null || rowData === void 0 ? void 0 : (_rowData$solicitud2 = rowData.solicitud) === null || _rowData$solicitud2 === void 0 ? void 0 : (_rowData$solicitud2$a = _rowData$solicitud2.afiliado) === null || _rowData$solicitud2$a === void 0 ? void 0 : _rowData$solicitud2$a.cud : '';\n    },\n    discapacitado: function discapacitado(rowData) {\n      var _rowData$solicitud3;\n\n      return rowData !== null && rowData !== void 0 && (_rowData$solicitud3 = rowData.solicitud) !== null && _rowData$solicitud3 !== void 0 && _rowData$solicitud3.discapacitado ? 'Si' : 'No';\n    }\n  }\n};\nvar NOMENCLADOR = {\n  name: 'Nomenclador',\n  route: 'api/nomenclador',\n  page: 'nomenclador',\n  modalImportNomenclador: 'Vista previa',\n  addPrestacion: 'Agregar prestación',\n  importPrestaciones: 'Sincronizar',\n  fields: {\n    capitulo: 'Capítulo',\n    codigo: 'Código',\n    descripcion: 'Descripción',\n    complejidadPractica: 'Nivel de complejidad',\n    numeroNormaRespaldatoria: 'Nº Norma respaldatoria',\n    fechaNorma: 'Fecha de la norma',\n    topesCoberturaPeriodo: 'Topes de cobertura por período',\n    periodoTope: 'Período del tope',\n    modalidadPresentacion: 'Ámbito',\n    valorIpross: 'Valor IPROSS',\n    unidades: 'Unidad',\n    requiereAuditoriaMedica: '¿Requiere auditoría médica?'\n  },\n  cols: {\n    codigo: 'Código',\n    estado: 'Estado',\n    capitulo: 'Capítulo',\n    modalidadPresentacion: 'Ámbito',\n    valorIpross: 'Valor IPROSS',\n    descripcion: 'Descripción',\n    complejidadPractica: 'Complejidad',\n    numeroNormaRespaldatoria: 'Nº Norma',\n    fechaNorma: 'Fecha norma',\n    topesCoberturaPeriodo: 'Topes',\n    periodoTope: 'Período',\n    unidad: 'Unidades',\n    requiereAuditoriaMedica: 'Aud. Med.'\n  },\n  filters: {\n    modalidad: 'Ámbito',\n    capitulo: 'Capítulo',\n    requiereAuditoriaMedica: 'Aud. Méd.'\n  },\n  optionsModalidadPresentacion: [{\n    label: 'Ambulatoria',\n    value: 'ambulatorio'\n  }, {\n    label: 'Internación',\n    value: 'internacion'\n  }, {\n    label: 'Internacion y Ambulatoria',\n    value: 'internacionyambulatoria'\n  }],\n  optionsPeriodoTope: [{\n    label: 'Por única vez',\n    value: 'porunicavez'\n  }, {\n    label: 'Mensual',\n    value: 'mensual'\n  }, {\n    label: 'Bimenstral',\n    value: 'bimestral'\n  }, {\n    label: 'Trimestral',\n    value: 'trimestral'\n  }, {\n    label: 'Cuatrimestral',\n    value: 'cuatrimestral'\n  }, {\n    label: 'Semestral',\n    value: 'semestral'\n  }, {\n    label: 'Anual',\n    value: 'anual'\n  }],\n  optionsUnidades: [{\n    label: 'km',\n    value: 'km'\n  }, {\n    label: 'horas',\n    value: 'hs'\n  }, {\n    label: 'sesiones',\n    value: 'sesiones'\n  }, {\n    label: 'unidades',\n    value: 'unidades'\n  }],\n  renders: {\n    capitulo: function capitulo(rowData) {\n      return \"\".concat(rowData.capitulo.capitulo, \"-\").concat(rowData.capitulo.descripcion);\n    },\n    fechaNorma: function fechaNorma(rowData) {\n      return format(parseISO(rowData.fechaNorma), DATE_FORMAT);\n    },\n    modalidadPresentacion: function modalidadPresentacion(rowData) {\n      var _NOMENCLADOR$optionsM;\n\n      return (_NOMENCLADOR$optionsM = NOMENCLADOR.optionsModalidadPresentacion.find(function (elem) {\n        return elem.value === rowData.modalidadPrestacion;\n      })) === null || _NOMENCLADOR$optionsM === void 0 ? void 0 : _NOMENCLADOR$optionsM.label;\n    },\n    periodoTope: function periodoTope(rowData) {\n      var _NOMENCLADOR$optionsP;\n\n      return (_NOMENCLADOR$optionsP = NOMENCLADOR.optionsPeriodoTope.find(function (elem) {\n        return elem.value === rowData.periodoTope;\n      })) === null || _NOMENCLADOR$optionsP === void 0 ? void 0 : _NOMENCLADOR$optionsP.label;\n    },\n    estado: function estado(rowData) {\n      return rowData.estado === 'activo' ? 'Activo' : 'Inactivo';\n    },\n    requiereAuditoriaMedica: function requiereAuditoriaMedica(rowData) {\n      return rowData.requiereAuditoriaMedica === true ? 'Si' : 'No';\n    }\n  },\n  messages: {\n    processingFileMessage: 'Procesando archivo de importación',\n    successfulImportNomenclador: 'Importación exitosa'\n  },\n  tabPermissions: ['Administrador', 'Presidencia'],\n  deleteMessage: '¿Seguro que desea eliminar el nomenclador?'\n};\nvar CUENTAS_TERCEROS = {\n  name: 'Cuentas de terceros',\n  route: 'api/cuenta-de-terceros',\n  page: 'cuentas_terceros',\n  fields: {\n    afiliado: 'Afiliado',\n    nombre: 'Nombre',\n    apellido: 'Apellido',\n    cuitCuil: 'CUIT / CUIL',\n    cbu: 'CBU',\n    responsableDeCarga: 'Responsable de carga',\n    delegacion: 'Delegación',\n    adjuntos: 'Archivos adjuntos',\n    estado: 'Estado'\n  },\n  filters: {\n    delegacion: 'Delegación'\n  },\n  optionsEstados: [{\n    value: 'inactiva',\n    label: 'Inactiva'\n  }, {\n    value: 'pendiente',\n    label: 'Pendiente'\n  }, {\n    value: 'aprobada',\n    label: 'Aprobada'\n  }, {\n    value: 'rechazada',\n    label: 'Rechazada'\n  }],\n  renders: {\n    responsableDeCarga: function responsableDeCarga(rowData) {\n      return rowData.responsableDeCarga.first_name + ' ' + rowData.responsableDeCarga.last_name;\n    },\n    delegacion: function delegacion(rowData) {\n      var _rowData$delegacion;\n\n      return (_rowData$delegacion = rowData.delegacion) === null || _rowData$delegacion === void 0 ? void 0 : _rowData$delegacion.nombre;\n    },\n    adjuntos: function adjuntos(rowData) {\n      return rowData.adjuntos.archivo;\n    },\n    afiliado: function afiliado(rowData) {\n      var _rowData$afiliado, _rowData$afiliado2, _rowData$afiliado3;\n\n      return \"\".concat((_rowData$afiliado = rowData.afiliado) === null || _rowData$afiliado === void 0 ? void 0 : _rowData$afiliado.numeroAfiliado, \" | \").concat((_rowData$afiliado2 = rowData.afiliado) === null || _rowData$afiliado2 === void 0 ? void 0 : _rowData$afiliado2.nombre, \", \").concat((_rowData$afiliado3 = rowData.afiliado) === null || _rowData$afiliado3 === void 0 ? void 0 : _rowData$afiliado3.apellido);\n    },\n    estado: function estado(rowData) {\n      var _CUENTAS_TERCEROS$opt;\n\n      return (_CUENTAS_TERCEROS$opt = CUENTAS_TERCEROS.optionsEstados.find(function (c) {\n        return c.value === rowData.estado;\n      })) === null || _CUENTAS_TERCEROS$opt === void 0 ? void 0 : _CUENTAS_TERCEROS$opt.label;\n    }\n  },\n  tabPermissions: ['Administrador', 'Reintegro', 'Delegado', 'Presidencia'],\n  deleteMessage: '¿Seguro que desea desactivar esta cuenta de terceros?',\n  helpCuit: 'Ingresar número sin guiones ni puntos'\n};\nvar CUENTAS_JUDICIALES = {\n  name: 'Cuentas judiciales',\n  route: 'api/cuenta-judicial',\n  page: 'cuentas_judiciales',\n  fields: {\n    afiliado: 'Afiliado',\n    nombre: 'Nombre',\n    apellido: 'Apellido',\n    responsableDeCarga: 'Responsable de carga',\n    delegacion: 'Delegación',\n    informacionAdicional: 'Información adicional',\n    oficioJudicial: 'Oficio judicial',\n    cuitCuil: 'CUIT / CUIL',\n    cbu: 'CBU',\n    estado: 'Estado'\n  },\n  filters: {\n    delegacion: 'Delegación'\n  },\n  optionsEstados: [{\n    value: 'inactiva',\n    label: 'Inactiva'\n  }, {\n    value: 'activa',\n    label: 'Activa'\n  }],\n  renders: {\n    responsableDeCarga: function responsableDeCarga(rowData) {\n      return rowData.responsableDeCarga.first_name + ' ' + rowData.responsableDeCarga.last_name;\n    },\n    delegacion: function delegacion(rowData) {\n      var _rowData$delegacion2;\n\n      return (_rowData$delegacion2 = rowData.delegacion) === null || _rowData$delegacion2 === void 0 ? void 0 : _rowData$delegacion2.nombre;\n    },\n    afiliado: function afiliado(rowData) {\n      var _rowData$afiliado4, _rowData$afiliado5, _rowData$afiliado6;\n\n      return \"\".concat((_rowData$afiliado4 = rowData.afiliado) === null || _rowData$afiliado4 === void 0 ? void 0 : _rowData$afiliado4.numeroAfiliado, \" | \").concat((_rowData$afiliado5 = rowData.afiliado) === null || _rowData$afiliado5 === void 0 ? void 0 : _rowData$afiliado5.nombre, \", \").concat((_rowData$afiliado6 = rowData.afiliado) === null || _rowData$afiliado6 === void 0 ? void 0 : _rowData$afiliado6.apellido);\n    },\n    estado: function estado(rowData) {\n      var _CUENTAS_JUDICIALES$o;\n\n      return (_CUENTAS_JUDICIALES$o = CUENTAS_JUDICIALES.optionsEstados.find(function (c) {\n        return c.value === rowData.estado;\n      })) === null || _CUENTAS_JUDICIALES$o === void 0 ? void 0 : _CUENTAS_JUDICIALES$o.label;\n    }\n  },\n  tabPermissions: ['Administrador', 'Delegado', 'Presidencia'],\n  deleteMessage: '¿Seguro que desea desactivar esta cuenta judicial?',\n  helpCuit: 'Ingresar número sin guiones ni puntos'\n};\nvar CAPITULO = {\n  name: 'Capitulo',\n  route: 'capitulo',\n  page: 'capitulo',\n  fields: {\n    coseguro: 'Coseguro',\n    capitulo: 'Capítulo',\n    descripción: 'Descripción'\n  },\n  renders: {}\n}; //Used by generator, dont remove this line #entitiesobject\n\nvar CUPONES = {\n  name: 'Solicitudes Autorizadas',\n  page: 'cupones',\n  route: 'api/cupon',\n  fields: {\n    id: 'N° Autorización',\n    'solicitud.id': 'N° Solicitud',\n    'solicitud.afiliado.numeroAfiliado': 'N° Afiliado',\n    fechaDeAlta: 'Fecha de alta',\n    'solicitud.delegacion.nombre': 'Delegación',\n    // plazo: 'Plazo',\n    montoDeReintegro: 'Monto de reintegro',\n    lotesIds: 'N° Lote',\n    estado: 'Estado',\n    capitulos: 'Capítulos',\n    numeroDePago: 'Número de pago',\n    motivoDeRechazo: 'Motivo de rechazo'\n  },\n  filters: {\n    fechaDesde: 'Fecha desde',\n    fechaHasta: 'Fecha hasta',\n    capitulo: 'Capítulo',\n    nroLote: 'N° Lote',\n    delegacion: 'Delegación',\n    estado: 'Estado',\n    tipo: 'Tipo'\n  },\n  optionsEstado: [{\n    label: 'Todos',\n    value: ''\n  }, {\n    label: 'Abierto',\n    value: 'abierto'\n  }, {\n    label: 'En proceso',\n    value: 'enProceso'\n  }, {\n    label: 'Pago realizado',\n    value: 'pagoRealizado'\n  }, {\n    label: 'Pago rechazado',\n    value: 'pagoRechazado'\n  }, {\n    label: 'Rechazo parcial',\n    value: 'rechazoParcial'\n  }, {\n    label: 'Cerrado',\n    value: 'cerrado'\n  }, {\n    label: 'Desvinculado de lote',\n    value: 'desvinculado'\n  }],\n  renders: {\n    fechaDeAlta: function fechaDeAlta(rowData) {\n      return format(parseISO(rowData.fechaDeAlta), DATE_FORMAT);\n    },\n    montoDeReintegro: function montoDeReintegro(rowData) {\n      return \"$ \".concat(rowData.montoDeReintegro);\n    },\n    capitulos: function capitulos(rowData) {\n      return rowData.capitulos.join(', ');\n    } // lotes: (rowData) => rowData.lotes[0]?.id\n    // lotes: (rowData) => {\n    //   var ids = [];\n    //   rowData.lotes.forEach((lote) => {\n    //     ids.push(lote.id);\n    //     ids.push('-');\n    //   });\n    //   ids.pop();\n    //   return ids;\n    // },\n\n  },\n  createLoteForFilteredCupones: 'Crear lote para todos',\n  modalCreateLote: {\n    mainTitle: 'Vista previa de creación de lotes',\n    subTitle: 'Resultado del análisis de las autorizaciones:',\n    subTitle2: 'Solo se crearán los lotes, si todas las autorizaciones seleccionadas son correctas.'\n  },\n  modalSetState: {\n    mainTitle: 'Modificar estado de autorización',\n    subTitle1: '¿Está seguro que desea modificar el estado de la autorización?',\n    subTitle2: 'Si se modifica el estado a \"abierto\" la autorización podrá formar parte de un nuevo lote.',\n    subTitle3: function subTitle3(cupon) {\n      var _cupon$solicitud$cuen;\n\n      var tipoDeCuenta = '';\n\n      switch ((_cupon$solicitud$cuen = cupon.solicitud.cuenta) === null || _cupon$solicitud$cuen === void 0 ? void 0 : _cupon$solicitud$cuen.origen) {\n        case 'cuentaAfiliado':\n          tipoDeCuenta = 'cuenta de afiliado';\n          break;\n\n        case 'cuentaDeTerceros':\n          tipoDeCuenta = 'cuenta de terceros';\n          break;\n\n        case 'cuentaJudicial':\n          tipoDeCuenta = 'cuenta judicial';\n          break;\n\n        default:\n          break;\n      }\n\n      return \"Se volver\\xE1n a copiar los datos para el pago desde la \".concat(tipoDeCuenta, \"; puede modificar los datos de dicha cuenta antes de modificar el estado de la autorizaci\\xF3n.\");\n    },\n    subTitle4: 'Esta acción no se puede deshacer.'\n  },\n  messages: {\n    successCreateCupones: 'Proceso finalizado con éxito',\n    successReopenCupones: 'Actualizacion exitosa del estado del cupon',\n    loading: 'Procesando las autorizaciones',\n    deleteMessage: '¿Seguro que desea remover el cupón?'\n  },\n  tabPermissions: ['Administrador', 'AuditoriaAdministrativa', 'AuditoriaCentral', 'AuditoriaMedica', 'Contaduria', 'Delegado', 'Presidencia', 'Reintegro', 'SoloLectura']\n};\nvar LOTES = {\n  name: 'Lotes',\n  page: 'lotes',\n  route: 'api/lote',\n  fields: {\n    id: 'N° Lote',\n    fechaDeAlta: 'Fecha de alta',\n    tipo: 'Tipo',\n    montoTotal: 'Monto total',\n    estado: 'Estado',\n    procesadoPor: 'Procesado por'\n  },\n  filters: {\n    fechaDesde: 'Fecha desde',\n    fechaHasta: 'Fecha hasta',\n    tipo: 'Tipo',\n    estado: 'Estado',\n    delegacion: 'Delegación'\n  },\n  optionsTipos: [{\n    label: 'No judicial',\n    value: 'noJudicial'\n  }, {\n    label: 'Judicial',\n    value: 'judicial'\n  }],\n  optionsEstados: [{\n    label: 'No procesado',\n    value: 'noProcesado'\n  }, {\n    label: 'Procesado',\n    value: 'procesadoOk'\n  }, {\n    label: 'Procesado con error',\n    value: 'procesadoConError'\n  }, {\n    label: 'Eliminado',\n    value: 'eliminado'\n  }],\n  renders: {\n    fechaDeAlta: function fechaDeAlta(rowData) {\n      return format(parseISO(rowData.fechaDeAlta), DATE_FORMAT);\n    },\n    tipo: function tipo(rowData) {\n      return rowData.tipo === 'noJudicial' ? 'No judicial' : 'Judicial';\n    },\n    montoTotal: function montoTotal(rowData) {\n      return rowData.montoTotal ? \"$ \".concat(rowData.montoTotal) : '';\n    },\n    procesadoPor: function procesadoPor(rowData) {\n      return \"\".concat(rowData.procesadoPor);\n    },\n    estado: function estado(rowData) {\n      var _LOTES$optionsEstados;\n\n      return (_LOTES$optionsEstados = LOTES.optionsEstados.find(function (opt) {\n        return opt.value === rowData.estado;\n      })) === null || _LOTES$optionsEstados === void 0 ? void 0 : _LOTES$optionsEstados.label;\n    }\n  },\n  modalResultQnQoFiles: {\n    subTitle: 'Resultado del análisis de los archivos:',\n    subtitle2Error: 'No se pueden procesar las autorizaciones. Se deben corregir los errores y volver a cargar los archivos para el lote.',\n    subtitle2Success: 'Se procesaron exitosamente los archivos.'\n  },\n  tabPermissions: ['Administrador', 'Tesoreria', 'Contaduria', 'Presidencia', 'SoloLectura'],\n  deleteMessage: '¿Seguro que desea elimiar el lote?'\n};\nvar DELEGACIONES = {\n  name: 'Delegaciones',\n  page: 'delegaciones',\n  route: 'api/delegaciones',\n  fields: {\n    id: 'N° Delegación',\n    nombre: 'Nombre'\n  },\n  renders: {\n    is_active: function is_active(rowData) {\n      return rowData ? 'Si' : 'No';\n    }\n  },\n  tabPermissions: ['Administrador', 'Presidencia'],\n  userWithoutDelegacionesOption: 'El usuario no tiene delegaciones asignadas'\n};\nvar AFILIADOS = {\n  name: 'Afiliados',\n  page: 'afiliados',\n  route: 'api/afiliados',\n  fields: {\n    numeroAfiliado: 'N° Afiliado',\n    nombre: 'Nombre',\n    apellido: 'Apellido',\n    cuitCuil: 'CUIT / CUIL',\n    cbu: 'CBU',\n    activo: 'Activo',\n    fechaBaja: 'Fecha de baja',\n    cuentaDeTerceros: 'Cuenta de terceros',\n    cuentaJudicial: 'Cuenta judicial'\n  },\n  renders: {\n    activo: function activo(rowData) {\n      return rowData.activo ? 'Si' : 'No';\n    }\n  },\n  tabPermissions: ['Administrador', 'Presidencia']\n};\nvar AUDITORIAS = {\n  name: 'Auditorias',\n  page: 'auditorias',\n  route: 'api/auditorias',\n  fields: {\n    'solicitud.id': 'N° Solicitud',\n    practica: 'Práctica',\n    fechaPractica: 'Fecha de práctica',\n    prestadorName: 'Prestador',\n    estadoActual: 'Estado',\n    discapacitado: 'Es discapacitado?',\n    cud: 'CUD'\n  },\n  optionsRechazo: [{\n    value: 'faltaDocumentacion',\n    label: 'Falta documentación'\n  }, {\n    value: 'prestacionNoEstaEnMenuPrestacional',\n    label: 'Prestación no está en menú prestacional'\n  }, {\n    value: 'noTieneAutorizacionPrevia',\n    label: 'No tiene autorización previa'\n  }, {\n    value: 'noCorrespondeCoberturaPorReintegro',\n    label: 'No corresponde cobertura por reintegro'\n  }],\n  renders: {\n    'solicitud.id': function solicitudId(rowData) {\n      var _rowData$solicitud$id, _rowData$solicitud$id2;\n\n      return \"\".concat('0'.repeat(7 - ((_rowData$solicitud$id = rowData.solicitud.id) === null || _rowData$solicitud$id === void 0 ? void 0 : _rowData$solicitud$id.toString().length))).concat((_rowData$solicitud$id2 = rowData.solicitud.id) === null || _rowData$solicitud$id2 === void 0 ? void 0 : _rowData$solicitud$id2.toString());\n    },\n    fechaPractica: function fechaPractica(rowData) {\n      return format(parseISO(rowData.fechaPractica), DATE_FORMAT);\n    },\n    prestador: function prestador(rowData) {\n      var _rowData$prestador4, _rowData$prestador5, _rowData$prestador6;\n\n      return \"\".concat((_rowData$prestador4 = rowData.prestador) === null || _rowData$prestador4 === void 0 ? void 0 : _rowData$prestador4.matricula, \" - \").concat((_rowData$prestador5 = rowData.prestador) === null || _rowData$prestador5 === void 0 ? void 0 : _rowData$prestador5.nombre, \" \").concat((_rowData$prestador6 = rowData.prestador) === null || _rowData$prestador6 === void 0 ? void 0 : _rowData$prestador6.apellido);\n    },\n    practica: function practica(rowData) {\n      return \"\".concat(rowData.nomenclador.codigo, \" - \").concat(rowData.nomenclador.descripcion, \" - \").concat(rowData.nomenclador.capitulo.descripcion);\n    },\n    estadoActual: function estadoActual(rowData) {\n      var _PRESTACIONES$options2;\n\n      // let estado = rowData.auditoria?.estadoActual;\n      // if (!estado || estado === '') {\n      //   estado = 'enCurso';\n      // }\n      return (_PRESTACIONES$options2 = PRESTACIONES.optionsEstadoActual.find(function (opt) {\n        return opt.value === rowData.estadoActual;\n      })) === null || _PRESTACIONES$options2 === void 0 ? void 0 : _PRESTACIONES$options2.label;\n    } // cud: (rowData) => (rowData?.solicitud?.discapacitado ? rowData?.solicitud?.afiliado?.cud : ''),\n    // discapacitado: (rowData) => (rowData?.discapacitado ? 'Si' : 'No'),\n\n  },\n  tabPermissions: ['Administrador', 'AuditoriaAdministrativa', 'AuditoriaCentral', 'AuditoriaMedica', 'Presidencia', 'SoloLectura']\n};\nvar TABLE = {\n  labelRowsSelect: 'filas',\n  labelDisplayedRows: '{from}-{to} de {count}',\n  labelRowsPerPage: 'Filas por página',\n  firstAriaLabel: 'Primera página',\n  firstTooltip: 'Primera página',\n  previousAriaLabel: 'Anterior',\n  previousTooltip: 'Anterior',\n  nextAriaLabel: 'Siguiente',\n  nextTooltip: 'Siguiente',\n  lastAriaLabel: 'Última página',\n  lastTooltip: 'Última página',\n  actions: '',\n  searchPlaceholder: 'Buscar',\n  exportCSV: 'Exportar csv'\n};\nvar TABLE_FILTER = {\n  title: 'Filtro'\n};\nvar LOGIN = {\n  passwordRecoveryMessage: 'Contacte al administrador de LDAP: mesadeayuda@ipross.rionegro.gov.ar',\n  passwordRecoveryButton: 'Olvidé mi contraseña',\n  signIn: 'Ingresar',\n  logout: 'Salir',\n  password: 'Contraseña'\n};\nvar SOLICITUDES = {\n  name: 'Solicitudes',\n  route: 'api/solicitudes',\n  page: 'solicitudes',\n  editPrestaciones: 'Editar',\n  fields: {\n    id: 'N° Solicitud',\n    estadoActual: 'Estado',\n    fechaAlta: 'Fecha de alta',\n    'delegacion.nombre': 'Delegación',\n    'afiliado.numeroAfiliado': 'Afiliado',\n    tipo: '¿Judicializada?',\n    montoTotal: 'Monto total',\n    montoTotalAReintegrar: 'Monto total a reintegrar',\n    capitulosPrestaciones: 'Capítulos',\n    'factura.id': 'Factura',\n    discapacitado: '¿Posee CUD?',\n    cud: 'CUD'\n  },\n  filters: {\n    afiliado: 'Nro. de Afiliado',\n    delegacion: 'Delegación',\n    estadoActual: 'Estado actual',\n    fechaDesde: 'Fecha desde',\n    fechaHasta: 'Fecha hasta',\n    judicial: '¿Judicializada?',\n    source: 'Origen'\n  },\n  renders: {\n    estadoActual: function estadoActual(rowData) {\n      var _SOLICITUDES$optionsE;\n\n      return (_SOLICITUDES$optionsE = SOLICITUDES.optionsEstadoActual.find(function (elem) {\n        return elem.value === rowData.estadoActual;\n      })) === null || _SOLICITUDES$optionsE === void 0 ? void 0 : _SOLICITUDES$optionsE.label;\n    },\n    fechaAlta: function fechaAlta(rowData) {\n      return format(parseISO(rowData.fechaAlta), DATE_FORMAT);\n    },\n    'afiliado.numeroAfiliado': function afiliadoNumeroAfiliado(rowData) {\n      var _rowData$afiliado7, _rowData$afiliado8, _rowData$afiliado9;\n\n      return \"\".concat((_rowData$afiliado7 = rowData.afiliado) === null || _rowData$afiliado7 === void 0 ? void 0 : _rowData$afiliado7.numeroAfiliado, \" | \").concat((_rowData$afiliado8 = rowData.afiliado) === null || _rowData$afiliado8 === void 0 ? void 0 : _rowData$afiliado8.nombre, \", \").concat((_rowData$afiliado9 = rowData.afiliado) === null || _rowData$afiliado9 === void 0 ? void 0 : _rowData$afiliado9.apellido);\n    },\n    tipo: function tipo(rowData) {\n      return rowData.tipo === 'noJudicial' ? 'No' : 'Si';\n    },\n    montoTotal: function montoTotal(rowData) {\n      // let montoTotal = 0;\n      // rowData.prestaciones?.map((p) => {\n      //   montoTotal += parseFloat(p.valorIprossNomenclador) * p.cantidad;\n      // });\n      return \"$ \".concat(rowData === null || rowData === void 0 ? void 0 : rowData.montoTotal);\n    },\n    montoTotalAReintegrar: function montoTotalAReintegrar(rowData) {\n      // let montoAReintegrar = 0;\n      // rowData.prestaciones?.map((p) => {\n      //   const total = parseFloat(p.valorIprossNomenclador) * p.cantidad;\n      //   const montoReintegrar = (total * p.cobertura) / 100;\n      //   montoAReintegrar += montoReintegrar;\n      // });\n      return \"$ \".concat(rowData.montoTotalAReintegrar);\n    },\n    capitulosPrestaciones: function capitulosPrestaciones(rowData) {\n      return rowData.capitulosPrestaciones.join(', ');\n    },\n    factura: function factura(rowData) {\n      var _rowData$factura;\n\n      return (_rowData$factura = rowData.factura) === null || _rowData$factura === void 0 ? void 0 : _rowData$factura.archivo;\n    } // cud: (rowData) => (rowData.discapacitado ? rowData.afiliado?.cud : ''),\n    // discapacitado: (rowData) => (rowData.discapacitado ? 'Si' : 'No'),\n\n  },\n  optionsEstadoActual: [{\n    label: 'Sin pagos realizados',\n    value: 'sinPagos'\n  }, {\n    label: 'Pago parcial',\n    value: 'pagoParcial'\n  }, {\n    label: 'Pago total',\n    value: 'pagoTotal'\n  }],\n  optionsType: [{\n    label: 'Si',\n    value: 'judicial'\n  }, {\n    label: 'No',\n    value: 'noJudicial'\n  }],\n  sources: [{\n    label: 'Interna',\n    value: 'interna'\n  }, {\n    label: 'VEM',\n    value: 'vem'\n  }, {\n    label: 'Bajo Presupuesto',\n    value: 'bajoPresupuesto'\n  }],\n  customActions: {\n    addPresentacion: 'Agregar prestacion'\n  },\n  modalEditPrestacion: {\n    mainTitle: 'Editar prestacion'\n  },\n  modalCreateCupones: {\n    mainTitle: 'Vista previa de creacion de cupones',\n    subTitle: 'Resultado del análisis de las solicitudes',\n    subTitle2: function subTitle2(data) {\n      return \"Se crearan \".concat(data, \" cupones. Las siguientes solicitudes no cumplen con las condiciones para que se puedan crear los cupones:\");\n    }\n  },\n  messages: {\n    errorCreateCupones: \"No se cre\\xF3 ning\\xFAn cup\\xF3n\",\n    successCreateCupones: function successCreateCupones(data) {\n      return \"Se crearon exitosamente \".concat(data, \" cupones\");\n    },\n    loading: 'Procesando las solicitudes',\n    tipoForm: 'Tipos de cuentas disponibles',\n    errorAlObtenerCuenta: 'Error al intentar obtener la cuenta',\n    toolTipJudicializada: 'Seleccionar el tipo de cuenta.',\n    successEditPrestacion: 'Prestacion editada correctamente'\n  },\n  tabPermissions: ['Administrador', 'AuditoriaAdministrativa', 'AuditoriaCentral', 'AuditoriaMedica', 'Contaduria', 'Delegado', 'Presidencia', 'Reintegro', 'SoloLectura', 'Tesoreria']\n};\nvar PRESTADORES = {\n  name: 'Prestadores',\n  route: 'api/prestadores',\n  page: 'prestadores',\n  addPrestador: 'Agregar Prestador',\n  \"import\": 'Importar prestadores',\n  fields: {\n    tipoDocumento: 'Tipo de documento',\n    nroDocumento: 'N° Documento',\n    apellido: 'Apellido',\n    nombre: 'Nombre',\n    sexoSisa: 'Sexo',\n    perEstado: 'Per. Estado',\n    fechaNacimiento: 'Fecha de nacimiento',\n    lugarNacimiento: 'Lugar de nacimiento',\n    nacionalidad: 'Nacionalidad',\n    domicilio: 'Domicilio',\n    localidadDes: 'Localidad',\n    profEstado: 'Prof. Estado',\n    areaDes: 'Area des.',\n    matricula: 'Matrícula',\n    libro: 'Libro',\n    folio: 'Folio',\n    matTipoRegistro: 'Tipo de matrícula',\n    matFechaRegistro: 'Fecha de registro de matrícula',\n    matCondicionMatricula: 'Condición de matrícula',\n    matFechaExpededTitulo: 'Fecha de expedición de título',\n    tituloDes: 'Título Des.',\n    especialidadDes: 'Especialidad',\n    institucionDes: 'Institución'\n  },\n  cols: {\n    nroDocumento: 'N° Documento',\n    nombre: 'Nombre',\n    apellido: 'Apellido',\n    localidadDes: 'Localidad',\n    profEstado: 'Prof. Estado',\n    matricula: 'Matrícula',\n    libro: 'Libro',\n    folio: 'Folio',\n    tituloDes: 'Título Des.'\n  },\n  renders: {\n    localidadDes: function localidadDes(data) {\n      var _PRESTADORES$optionsP;\n\n      return (_PRESTADORES$optionsP = PRESTADORES.optionsProvincias.find(function (p) {\n        return p.value === data.localidadDes;\n      })) === null || _PRESTADORES$optionsP === void 0 ? void 0 : _PRESTADORES$optionsP.label;\n    },\n    profEstado: function profEstado(data) {\n      var _PRESTADORES$optionsE;\n\n      return (_PRESTADORES$optionsE = PRESTADORES.optionsEstado.find(function (e) {\n        return e.value === data.profEstado;\n      })) === null || _PRESTADORES$optionsE === void 0 ? void 0 : _PRESTADORES$optionsE.label;\n    },\n    perEstado: function perEstado(data) {\n      var _PRESTADORES$optionsE2;\n\n      return (_PRESTADORES$optionsE2 = PRESTADORES.optionsEstado.find(function (e) {\n        return e.value === data.perEstado;\n      })) === null || _PRESTADORES$optionsE2 === void 0 ? void 0 : _PRESTADORES$optionsE2.label;\n    }\n  },\n  optionsGender: [{\n    value: 'F',\n    label: 'Femenino'\n  }, {\n    value: 'M',\n    label: 'Masculino'\n  }, {\n    value: 'A',\n    label: 'A'\n  }],\n  optionsEstado: [{\n    value: 'alta',\n    label: 'Alta'\n  }, {\n    value: 'baja',\n    label: 'Baja'\n  }],\n  optionsDni: [{\n    value: '1',\n    label: 'DNI'\n  }, {\n    value: '2',\n    label: 'LC'\n  }, {\n    value: '3',\n    label: 'LE'\n  }, {\n    value: '4',\n    label: 'CI'\n  }, {\n    value: '5',\n    label: 'DE'\n  }, {\n    value: '6',\n    label: 'DNIF'\n  }, {\n    value: '7',\n    label: 'DNIM'\n  }],\n  optionsNacionalidad: [{\n    value: '200',\n    label: 'Argentina'\n  }, {\n    value: '202',\n    label: 'Bolivia'\n  }, {\n    value: '203',\n    label: 'Brasil'\n  }, {\n    value: '208',\n    label: 'Chile'\n  }, {\n    value: '221',\n    label: 'Paraguay'\n  }, {\n    value: '225',\n    label: 'Uruguay'\n  }],\n  optionsProvincias: [{\n    value: '1',\n    label: 'CABA'\n  }, {\n    value: '2',\n    label: 'Buenos Aires'\n  }, {\n    value: '3',\n    label: 'Catamarca'\n  }, {\n    value: '4',\n    label: 'Chaco'\n  }, {\n    value: '5',\n    label: 'Chubut'\n  }, {\n    value: '6',\n    label: 'Córdoba'\n  }, {\n    value: '7',\n    label: 'Corrientes'\n  }, {\n    value: '8',\n    label: 'Entre Ríos'\n  }, {\n    value: '9',\n    label: 'Formosa'\n  }, {\n    value: '10',\n    label: 'Jujuy'\n  }, {\n    value: '11',\n    label: 'La Pampa'\n  }, {\n    value: '12',\n    label: 'La Rioja'\n  }, {\n    value: '13',\n    label: 'Mendoza'\n  }, {\n    value: '14',\n    label: 'Misiones'\n  }, {\n    value: '15',\n    label: 'Neuquén'\n  }, {\n    value: '16',\n    label: 'Río Negro'\n  }, {\n    value: '17',\n    label: 'Salta'\n  }, {\n    value: '18',\n    label: 'San Juan'\n  }, {\n    value: '19',\n    label: 'San Luis'\n  }, {\n    value: '20',\n    label: 'Santa Cruz'\n  }, {\n    value: '21',\n    label: 'Santa Fe'\n  }, {\n    value: '22',\n    label: 'Santiago del Estero'\n  }, {\n    value: '23',\n    label: 'Tierra del Fuego'\n  }, {\n    value: '24',\n    label: 'Tucumán'\n  }],\n  messages: {\n    processingFileMessage: 'Procesando archivo de importación',\n    successfulImport: 'Importacion exitosa'\n  },\n  tabPermissions: ['Administrador', 'Presidencia'],\n  deleteMessage: '¿Seguro que desea eliminar el prestador?'\n};\nvar MAIN_ENTITIES = [SOLICITUDES, AUDITORIAS, CUPONES, LOTES];\nvar ADMIN_ENTITIES = [NOMENCLADOR, DELEGACIONES, USERS, AFILIADOS, PRESTADORES];\nvar ACCOUNTS_ENTITIES = [CUENTAS_TERCEROS, CUENTAS_JUDICIALES];\n\nvar LOADING = function LOADING(entity) {\n  return \"Cargando \".concat(entity);\n};\n\nvar ERRORS = {\n  unknown: 'Error desconocido',\n  onGet: function onGet(entity) {\n    return \"Error al obtener \".concat(entity);\n  },\n  onCreate: function onCreate(entity) {\n    return \"Error al crear \".concat(entity);\n  },\n  onDelete: function onDelete(entity) {\n    return \"Error al eliminar \".concat(entity);\n  },\n  onUpdate: function onUpdate(entity) {\n    return \"Error al actualizar \".concat(entity);\n  },\n  onSync: function onSync(entity) {\n    return \"Error al sincronizar \".concat(entity);\n  },\n  onDeactivate: function onDeactivate(entity) {\n    return \"Error al desactivar \".concat(entity);\n  },\n  onSetGroups: function onSetGroups(entity) {\n    return \"Error al modificar los roles del usuario\";\n  },\n  onSetCapitulos: function onSetCapitulos(entity) {\n    return \"Error al modificar los cap\\xEDtulos del usuario\";\n  },\n  onSetDelegaciones: function onSetDelegaciones(entity) {\n    return 'Error al modificar las delegaciones del usuario';\n  },\n  onSetDelegacionPrincipal: function onSetDelegacionPrincipal(entity) {\n    return 'Error al modificar la delegación principal del usuario';\n  },\n  inactiveUser: 'Su cuenta está inactiva. Contacte al administrador del sistema: admin@dominio.com',\n  invalidLdap: 'Usuario o contraseña incorrecta. Contacte al administrador de LDAP: mesadeayuda@ipross.rionegro.gov.ar',\n  onAudit: function onAudit(error) {\n    return 'Error al actualizar auditoría';\n  },\n  onUpload: 'Error subiendo archivos',\n  onEditStateCupon: function onEditStateCupon(entity) {\n    return \"Error al actualizar \".concat(entity);\n  },\n  onRemoveCupon: function onRemoveCupon(entity) {\n    return \"Error al desvincular \".concat(entity);\n  },\n  onUpdateNomenclador: function onUpdateNomenclador() {\n    return 'Error al actualizar el nomenclador';\n  },\n  cuitCuil: function cuitCuil() {\n    return 'El cuit-cuil debe tener una longitud de 11 caracteres';\n  },\n  cuitCuilInvalid: function cuitCuilInvalid() {\n    return 'El cuit-cuil no es valido';\n  }\n};\nvar INFO = {\n  onSync: function onSync(entity, count) {\n    return count === 0 ? 'Usuarios sincronizados' : \"Se sincronizaron \".concat(count, \" \").concat(entity);\n  },\n  setGroups: \"Se actualiz\\xF3 correctamente el usuario\",\n  setDelegaciones: \"Se actualiz\\xF3 correctamente el usuario\",\n  setDelegacionPrincipal: \"Se actualiz\\xF3 correctamente el usuario\",\n  //Spinner message\n  working: 'Por favor espere...'\n};\nvar ACTIONS = {\n  crete: function crete(entity) {\n    return \"Crear \".concat(entity);\n  },\n  \"delete\": function _delete(entity) {\n    return \"Eliminar \".concat(entity);\n  },\n  update: function update(entity) {\n    return \"Actualizar \".concat(entity);\n  },\n  \"import\": function _import(entity) {\n    return \"Importar \".concat(entity);\n  }\n};\nvar STEPPER_SOLICITUDES = {\n  add: 'Agregar solicitud',\n  end: 'Solicitud cargada exitosamente. Presione \"cerrar\" para terminar:',\n  steps: [{\n    title: 'Crear solicitud',\n    description: 'Complete los siguientes campos con la información de la solicitud:'\n  }, {\n    title: 'Agregar prestaciones',\n    description: 'Primero, cargue la factura para agregar la prestación. Una vez cargada, complete el formulario:'\n  }, {\n    title: 'Guardar',\n    description: 'Confirme los datos para guardar la solicitud y sus prestaciones:'\n  }, {\n    title: 'Agregar archivos adjuntos adicionales (opcional)',\n    description: 'Puedes agregar otros archivos adjuntos a cada prestación de la solicitud:'\n  }],\n  back: 'Atrás',\n  next: 'Siguiente',\n  finish: 'Finalizar',\n  cancel: 'Cancelar',\n  close: 'Cerrar',\n  save: 'Guardar y terminar',\n  saveAndContinue: 'Guardar y agregar otra',\n  addPrestacion: 'Agregar',\n  onSubmitSolicitud: {\n    title: 'Solicitud creada exitosamente',\n    message: 'Se creó una nueva solicitud',\n    severity: 'success'\n  },\n  onSubmitFactura: {\n    title: 'Factura guardada exitosamente',\n    message: 'Se guardó la factura. Complete los datos de la prestación para continuar. Luego, presione \"siguiente\" para terminar, o guardar y agregar para seguir cargando prestaciones',\n    severity: 'success'\n  },\n  onSubmitPrestacion: function onSubmitPrestacion(count) {\n    return {\n      title: \"\".concat(count, \"\\xBA Prestaci\\xF3n creada\"),\n      message: \"Se cre\\xF3 la \".concat(count, \"\\xBA prestaci\\xF3n\"),\n      severity: 'success'\n    };\n  },\n  onNewPrestacion: function onNewPrestacion(count) {\n    return {\n      title: 'Detalles prestación',\n      message: \"Complete formulario con los detalles de la \".concat(count, \"\\xBA prestaci\\xF3n asociada a la solicitud\"),\n      severity: 'info'\n    };\n  },\n  onNewFactura: function onNewFactura(count) {\n    return {\n      title: 'Cargar factura',\n      message: \"Suba el archivo de la factura correspondiente a la \".concat(count, \"\\xBA prestaci\\xF3n asociada a la solicitud\"),\n      severity: 'info'\n    };\n  },\n  onFinish: {\n    title: 'Proceso finalizado',\n    message: 'Solicitud completa, puede ver un resumen de los datos ingresados a continuación',\n    severity: 'info'\n  }\n};\nvar CONFIRM_DIALOG = {\n  title: 'Confirmar',\n  accept: 'Aceptar',\n  cancel: 'Cancelar'\n};\nvar NAVBAR = {\n  home: 'Inicio',\n  accounts: 'Cuentas Especiales',\n  config: 'Configuración'\n};\nexport { CONFIRM_DIALOG, STEPPER_SOLICITUDES, FORM_BUILDER, USERS, TABLE, TABLE_FILTER, NOMENCLADOR, MAIN_ENTITIES, ADMIN_ENTITIES, APP_NAME, DATE_FORMAT, LOADING, ERRORS, ACTIONS, SOLICITUDES, LOGIN, INFO, PRESTACIONES, CAPITULO, CUENTAS_TERCEROS, CUENTAS_JUDICIALES, AUDITORIAS //Used by generator, dont remove this line #exportconsts\n, CUPONES, LOTES, DELEGACIONES, AFILIADOS, PRESTADORES, ACCOUNTS_ENTITIES, NAVBAR };","map":null,"metadata":{},"sourceType":"module"}