{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from 'react';\nimport useSWR from 'swr';\nimport { Box, Button } from '@material-ui/core'; //App imports\n\nimport SolicitudesList from './SolicitudesList';\nimport { remove } from '../api-call/service';\nimport useLoading from '../common/hooks/Loading';\nimport useAlert from '../common/hooks/Alert';\nimport { FormStepper } from './Stepper';\nimport { useForm, FormProvider } from 'react-hook-form';\nimport { ERRORS, SOLICITUDES, STEPPER_SOLICITUDES } from '../../labels';\nexport default function Solicitudes() {\n  const {\n    data,\n    error: errorGet,\n    mutate\n  } = useSWR(SOLICITUDES.route);\n  const {\n    0: error,\n    1: setError\n  } = useState(errorGet);\n  const [showStepper, setShowStepper] = React.useState(false);\n  const methods = useForm({\n    mode: 'onBlur'\n  }); //Hooks for feedback handle\n\n  const {\n    isLoading,\n    unsetLoading\n  } = useLoading();\n  const {\n    addAlert,\n    removeAlert\n  } = useAlert();\n  useEffect(() => {\n    if (!data) {\n      if (errorGet) {\n        addAlert(ERRORS.onGet(SOLICITUDES.name), 'error');\n      } else {\n        isLoading();\n      }\n    } else {\n      unsetLoading();\n\n      if (!error) {\n        removeAlert();\n      } else {\n        addAlert(error, 'error');\n      }\n    }\n  }, [data, errorGet, error]);\n\n  const handleDelete = async id => {\n    try {\n      await remove(SOLICITUDES.route, id);\n    } catch (error) {\n      setError(ERRORS.onDeactivate(SOLICITUDES.name));\n    }\n\n    mutate();\n  };\n\n  const onEdit = async data => {//TODO\n  };\n\n  return /*#__PURE__*/_jsxs(Box, {\n    children: [/*#__PURE__*/_jsx(Button, {\n      onClick: () => setShowStepper(true),\n      children: STEPPER_SOLICITUDES.add\n    }), showStepper && /*#__PURE__*/_jsx(FormProvider, _objectSpread(_objectSpread({}, methods), {}, {\n      children: /*#__PURE__*/_jsx(FormStepper, {\n        setShowStepper: setShowStepper\n      })\n    })), data && /*#__PURE__*/_jsx(SolicitudesList, {\n      data: data,\n      handleDelete: handleDelete,\n      onEdit: onEdit\n    })]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}