{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _defineProperty from \"/reintegros/reintegros-frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// Third-party imports\nimport React, { useState, useCallback } from 'react';\nimport { FormControl, FormHelperText, TextField, CircularProgress, makeStyles } from '@material-ui/core';\nimport { Controller } from 'react-hook-form';\nimport Autocomplete from '@material-ui/lab/Autocomplete'; // App imports\n\nvar useStyles = makeStyles(function (theme) {\n  return {\n    selectInput: {\n      '& .MuiInputBase-root': {\n        border: '1px solid #565656',\n        borderRadius: '6px',\n        paddingLeft: '10px',\n        marginTop: '15px',\n        '& .MuiInputBase-input': {\n          border: 'none'\n        }\n      },\n      '& >.MuiInput-underline:after': {\n        border: 'none'\n      },\n      '& .MuiAutocomplete-endAdornment': {\n        top: '0'\n      }\n    }\n  };\n}); // Component\n\nexport default function FormBuilderAutocomplete(_ref) {\n  var _form$getValues$field, _field$rules;\n\n  var field = _ref.field,\n      error = _ref.error,\n      form = _ref.form;\n\n  var _useState = useState(''),\n      query = _useState[0],\n      setQuery = _useState[1];\n\n  var _useState2 = useState(false),\n      open = _useState2[0],\n      setOpen = _useState2[1];\n\n  var _useState3 = useState(false),\n      loading = _useState3[0],\n      setLoading = _useState3[1];\n\n  var classes = useStyles();\n\n  var _useState4 = useState(Array.isArray(field.options) ? field.options : []),\n      options = _useState4[0],\n      setOptions = _useState4[1];\n\n  var optionsFunction = Array.isArray(field.options) ? null : field.options;\n\n  var _useState5 = useState(((_form$getValues$field = form.getValues()[field.name]) === null || _form$getValues$field === void 0 ? void 0 : _form$getValues$field.label) || ''),\n      inputText = _useState5[0],\n      setInputText = _useState5[1];\n\n  var _useState6 = useState(form.getValues()[field.name]),\n      currentValue = _useState6[0],\n      setCurrentValue = _useState6[1];\n\n  var updateOptions = useCallback(function () {\n    if (optionsFunction) {\n      setLoading(true);\n      optionsFunction(form, query).then(function (newOptions) {\n        setOptions(newOptions || []); // This fixes the bug in Autocomplete, that does not refresh the label\n        // const currentValue = form.getValues()[field.name];\n\n        if (currentValue) {\n          console.log({\n            currentValue: currentValue,\n            inputText: inputText\n          });\n\n          if (field.multiple) {\n            form.setValue(field.name, field.multiple ? [] : null);\n          } else {\n            form.setValue(field.name, currentValue);\n          }\n        }\n      })[\"finally\"](function () {\n        return setLoading(false);\n      });\n    }\n  }, [optionsFunction, form, query, field.multiple, field.name]); // If it has a value, an the option in not loaded, then load options\n\n  var shouldLoad; // const currentValue = form.getValues()[field.name];\n\n  if (field.multiple) {\n    shouldLoad = optionsFunction && currentValue && currentValue.length && !options.filter(function (o) {\n      return currentValue.indexOf(o.value) >= 0;\n    }).length;\n  } else {\n    shouldLoad = optionsFunction && currentValue && !options.find(function (o) {\n      return o.value === currentValue;\n    });\n  }\n\n  var _useState7 = useState(false),\n      mounted = _useState7[0],\n      setMounted = _useState7[1]; // Load option it is has data\n\n\n  React.useEffect(function () {\n    // let mounted = true;\n    if (!mounted && shouldLoad) {\n      updateOptions();\n      setMounted(true);\n      setCurrentValue(form.getValues()[field.name]);\n    }\n  }, [shouldLoad, updateOptions]); // Load option it is has data\n\n  React.useEffect(function () {\n    var fieldVal = '';\n\n    if (typeof form.getValues()[field.name] === 'object') {\n      var _form$getValues$field2;\n\n      fieldVal = (_form$getValues$field2 = form.getValues()[field.name]) === null || _form$getValues$field2 === void 0 ? void 0 : _form$getValues$field2.label;\n    } else if (typeof form.getValues()[field.name] === 'string') {\n      fieldVal = form.getValues()[field.name];\n    } else {\n      fieldVal = '';\n    } // setCurrentValue(form.getValues()[field.name]);\n\n\n    setInputText(fieldVal); // console.log({field: field.name, fieldVal, currentValue, inputText})\n  }, [field, form, setCurrentValue]);\n\n  var getInputTextValue = function getInputTextValue(props) {\n    var _props$value;\n\n    return ((_props$value = props.value) === null || _props$value === void 0 ? void 0 : _props$value.label) || inputText || '';\n  };\n\n  return /*#__PURE__*/_jsxs(FormControl, {\n    component: \"fieldset\",\n    error: !!error,\n    fullWidth: true,\n    children: [/*#__PURE__*/_jsx(Controller, {\n      label: field.label + (((_field$rules = field.rules) === null || _field$rules === void 0 ? void 0 : _field$rules.required) === true ? ' *' : ''),\n      defaultValue: currentValue,\n      render: function render(props) {\n        return /*#__PURE__*/_jsx(Autocomplete, {\n          freeSolo: true,\n          open: open,\n          onOpen: function onOpen() {\n            setOpen(true);\n            updateOptions();\n          },\n          onClose: function onClose() {\n            return setOpen(false);\n          },\n          options: options,\n          disabled: field.disabled,\n          loading: loading,\n          multiple: field.multiple,\n          getOptionDisabled: function getOptionDisabled() {\n            return loading;\n          },\n          getOptionSelected: function getOptionSelected(option, value) {\n            return option.value === (!value ? '' : typeof value === 'string' ? value : value === null || value === void 0 ? void 0 : value.value);\n          },\n          onChange: function onChange(event, newValue) {\n            var _options$find;\n\n            var aux = newValue === null ? '' : newValue;\n            form.setValue(field.name, typeof newValue === 'string' ? aux : aux === null || aux === void 0 ? void 0 : aux.value);\n            setInputText(((_options$find = options.find(function (o) {\n              return o.value === (typeof newValue === 'string' ? aux : newValue === null || newValue === void 0 ? void 0 : newValue.value);\n            })) === null || _options$find === void 0 ? void 0 : _options$find.label) || '');\n            setCurrentValue(newValue); // setInputText(aux.label ? aux?.label : aux);\n\n            setQuery(aux.label ? aux === null || aux === void 0 ? void 0 : aux.label : aux);\n            field.onChange && field.onChange(aux, form);\n          },\n          getOptionLabel: function getOptionLabel(option) {\n            var _options$find2;\n\n            return ((_options$find2 = options.find(function (o) {\n              return o.value === (typeof option === 'string' ? option : option.value);\n            })) === null || _options$find2 === void 0 ? void 0 : _options$find2.label) || '';\n          },\n          value: props.value,\n          inputValue: getInputTextValue(props),\n          renderInput: function renderInput(params) {\n            return /*#__PURE__*/_jsx(TextField, _objectSpread(_objectSpread({}, params), {}, {\n              // value={props.value}\n              error: !!error,\n              label: field.label,\n              className: classes.selectInput,\n              fullWidth: true,\n              placeholder: field.placeholder,\n              onChange: function onChange(event) {\n                setInputText(event.target.value);\n\n                if (field.onUpdate) {\n                  field.onUpdate(event.target.value, form);\n                }\n\n                setQuery(event.target.value);\n                updateOptions();\n              },\n              InputProps: _objectSpread(_objectSpread({}, params.InputProps), {}, {\n                endAdornment: /*#__PURE__*/_jsxs(_Fragment, {\n                  children: [loading ? /*#__PURE__*/_jsx(CircularProgress, {\n                    color: \"inherit\",\n                    size: 20\n                  }) : null, params.InputProps.endAdornment]\n                })\n              })\n            }));\n          }\n        });\n      },\n      id: field.name,\n      name: field.name,\n      rules: field.rules,\n      noOptionsText: field.noOptionsText ? field.noOptionsText : 'No hay opciones',\n      control: form.control,\n      onChange: function onChange(args) {\n        var _field$onChange;\n\n        var value = !args[1] ? null : field.multiple ? args[1].map(function (v) {\n          return v.value || v;\n        }) : args[1].value;\n        (_field$onChange = field.onChange) === null || _field$onChange === void 0 ? void 0 : _field$onChange.call(field, value, form);\n        return value;\n      }\n    }), error && /*#__PURE__*/_jsx(FormHelperText, {\n      className: 'Mui-error',\n      children: error\n    })]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}