{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { MenuItem, Select, Switch } from '@material-ui/core';\nimport React, { useState } from 'react';\nimport { USERS } from '../../labels';\nimport Table from '../common/Table';\nimport SelectGroups from './SelectGroups';\nimport SelectDelegacion from './SelectDelegacion';\nimport AutorenewIcon from '@material-ui/icons/Autorenew';\nexport default function UsersList({\n  data,\n  delegaciones,\n  grupos,\n  onUserDeactivate,\n  onhandleSetGroups,\n  onhandleSetDelegaciones,\n  onhandleSetDelegacionPrincipal,\n  onSync,\n  onPaginationChange\n}) {\n  const onSetUserGroups = async (groupsSelected, userId) => {\n    let result = [];\n\n    if (grupos !== undefined) {\n      groupsSelected.forEach(groupSelected => {\n        let grupo = grupos.results.find(grupo => grupo.name === groupSelected);\n        result.push(grupo.id);\n      });\n      onhandleSetGroups(result, userId);\n    }\n  };\n\n  const onSetDelegaciones = (delegacionesSelected, userId) => {\n    let result = [];\n\n    if (delegaciones !== undefined) {\n      delegacionesSelected.forEach(delegacionSelected => {\n        let delegacion = delegaciones.results.find(delegacion => delegacion.nombre === delegacionSelected);\n        result.push(delegacion.id);\n      });\n      onhandleSetDelegaciones(result, userId);\n    }\n  };\n\n  const onSetDelegacionPrincipal = (delegacionId, userId) => {\n    onhandleSetDelegacionPrincipal(delegacionId, userId);\n  };\n\n  const dynamicRenders = {\n    is_active: rowData => {\n      return /*#__PURE__*/_jsx(Switch, {\n        checked: rowData.is_active === true,\n        onChange: () => onUserDeactivate(rowData === null || rowData === void 0 ? void 0 : rowData.id, rowData.is_active),\n        name: \"active-switch\",\n        color: \"primary\"\n      });\n    },\n    groups: rowData => {\n      return /*#__PURE__*/_jsx(SelectGroups, {\n        grupos: grupos,\n        rowData: rowData,\n        onSetUserGroups: onSetUserGroups\n      });\n    },\n    delegaciones: rowData => {\n      return /*#__PURE__*/_jsx(SelectDelegacion, {\n        delegaciones: delegaciones,\n        rowData: rowData,\n        onSetDelegaciones: onSetDelegaciones\n      });\n    },\n    delegacionPrincipal: rowData => {\n      var _rowData$delegacionPr, _rowData$delegacionPr2;\n\n      return /*#__PURE__*/_jsx(Select, {\n        onChange: event => {\n          onSetDelegacionPrincipal(event.target.value, rowData.id);\n        },\n        value: (_rowData$delegacionPr = (_rowData$delegacionPr2 = rowData.delegacionPrincipal) === null || _rowData$delegacionPr2 === void 0 ? void 0 : _rowData$delegacionPr2.id) !== null && _rowData$delegacionPr !== void 0 ? _rowData$delegacionPr : '',\n        children: rowData.delegaciones.map(d => {\n          return /*#__PURE__*/_jsx(MenuItem, {\n            value: d.id,\n            children: d.nombre\n          }, d.id);\n        })\n      });\n    }\n  };\n  const columns = Object.keys(USERS.fields).map(key => {\n    var _ref, _dynamicRenders$key;\n\n    return {\n      title: USERS.fields[key],\n      field: key,\n      render: (_ref = (_dynamicRenders$key = dynamicRenders[key]) !== null && _dynamicRenders$key !== void 0 ? _dynamicRenders$key : USERS.renders[key]) !== null && _ref !== void 0 ? _ref : null\n    };\n  });\n  const userActions = [{\n    label: USERS.customActions.sync,\n    onClick: onSync,\n    icon: /*#__PURE__*/_jsx(AutorenewIcon, {})\n  }];\n  const {\n    0: pagination,\n    1: setPagination\n  } = useState({\n    page: 1,\n    pageSize: 20\n  });\n\n  const reloadPagination = pagData => {\n    setPagination(pagData);\n    onPaginationChange(_objectSpread(_objectSpread({}, pagination), pagData));\n  };\n\n  return /*#__PURE__*/_jsx(Table, {\n    columns: columns,\n    totalCount: data === null || data === void 0 ? void 0 : data.count,\n    data: data === null || data === void 0 ? void 0 : data.results,\n    title: USERS.name,\n    headerActions: userActions,\n    options: {\n      actionsColumnIndex: -1,\n      search: false\n    },\n    pagination: {\n      page: pagination.page - 1,\n      pageSize: pagination.pageSize\n    },\n    onPageChange: (page, pageSize) => {\n      reloadPagination(_objectSpread(_objectSpread({}, pagination), {}, {\n        page: page + 1,\n        pageSize\n      }));\n    },\n    onChangeRowsPerPage: pageSize => {\n      reloadPagination(_objectSpread(_objectSpread({}, pagination), {}, {\n        pageSize\n      }));\n    }\n  });\n}","map":null,"metadata":{},"sourceType":"module"}