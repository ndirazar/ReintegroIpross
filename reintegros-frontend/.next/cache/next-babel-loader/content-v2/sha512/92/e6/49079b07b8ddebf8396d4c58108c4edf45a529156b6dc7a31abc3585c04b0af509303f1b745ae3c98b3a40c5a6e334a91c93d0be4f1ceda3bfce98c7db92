{"ast":null,"code":"import { format, parseISO } from 'date-fns';\nvar APP_NAME = 'Reintegros';\nvar DATE_FORMAT = 'dd/MM/yyyy';\nvar FORM_BUILDER = {\n  required: 'Campo requerido ',\n  min: 'El valor debe ser superior a ',\n  minLength: 'Longitud debe ser de al menos ',\n  max: 'El valor debe ser inferior a ',\n  maxLength: 'Longitud debe ser a lo sumo de ',\n  pattern: 'El formato no es válido',\n  \"default\": 'Error desconocido'\n};\nvar USERS = {\n  name: 'Usuarios',\n  route: 'usuarios',\n  page: 'usuarios',\n  fields: {\n    username: 'Nombre de usuario',\n    email: 'Mail',\n    first_name: 'Nombre',\n    last_name: 'Apellido',\n    is_active: 'Activo',\n    groups: 'Roles',\n    delegaciones: 'Delegaciones'\n  },\n  renders: {\n    is_active: function is_active(rowData) {\n      return rowData ? 'Si' : 'No';\n    },\n    groups: function groups(rowData) {\n      return rowData.groups.map(function (elem) {\n        return elem.name;\n      }).join(', ');\n    },\n    delegaciones: function delegaciones(rowData) {\n      return rowData.delegaciones.map(function (elem) {\n        return elem.nombre;\n      }).join(', ');\n    }\n  },\n  customActions: {\n    sync: 'Sincronizar Usuarios'\n  }\n};\nvar PRESTACIONES = {\n  name: 'Prestaciones',\n  route: 'api/prestaciones',\n  page: 'prestaciones',\n  fields: {\n    auditor: 'Auditor',\n    cantidad: 'Cantidad',\n    categoria: 'Categoria',\n    prestador: 'Prestador',\n    nomenclador: 'Item',\n    coseguroNomenclador: 'Coseguro',\n    valorIprossNomenclador: 'Valor IPROSS',\n    valorPrestacion: 'Monto pagado',\n    montoReintegrar: 'Monto a reintegrar',\n    estadoActual: 'Estado actual',\n    factura: 'Factura',\n    cobertura: 'Cobertura',\n    fechaPractica: 'Fecha de práctica',\n    periodo: 'Periodo',\n    adjuntos: 'Adjuntos'\n  },\n  optionsEstadoActual: [{\n    label: 'En curso',\n    value: 'enCurso'\n  }, {\n    label: 'Aceptado',\n    value: 'aceptado'\n  }, {\n    label: 'Rechazado',\n    value: 'rechazado'\n  }],\n  renders: {\n    categoria: function categoria(rowData) {\n      return rowData.categoria.nombre;\n    },\n    prestador: function prestador(rowData) {\n      return rowData.prestador.matricula;\n    },\n    nomenclador: function nomenclador(rowData) {\n      return rowData.nomenclador.descripcion;\n    },\n    factura: function factura(rowData) {\n      return rowData.factura.archivo;\n    },\n    estadoActual: function estadoActual(rowData) {\n      var _PRESTACIONES$options;\n\n      return (_PRESTACIONES$options = PRESTACIONES.optionsEstadoActual.find(function (elem) {\n        return elem.value === rowData.estadoActual;\n      })) === null || _PRESTACIONES$options === void 0 ? void 0 : _PRESTACIONES$options.label;\n    },\n    fechaPractica: function fechaPractica(rowData) {\n      return format(parseISO(rowData.fechaPractica), DATE_FORMAT);\n    }\n  }\n};\nvar NOMENCLADOR = {\n  name: 'Nomenclador',\n  route: 'nomenclador',\n  page: 'nomenclador',\n  fields: {\n    areaCubrir: 'Área a Cubrir',\n    capitulo: 'Capítulo',\n    codigo: 'Código',\n    complejidadPractica: 'Nivel de complejidad',\n    descripcion: 'Descripción',\n    fechaNorma: 'Fecha de la norma',\n    modalidadPresentacion: 'Modalidad de Prestación ',\n    montoFijoMensual: 'Monto Fijo Mensual ',\n    numeroNormaRespaldatoria: 'Nº Norma respaldatoria',\n    periodoTope: 'Periodo del tope',\n    programaSanitario: 'Programa sanitario',\n    topesCoberturaPeriodo: 'Topes de cobertura por período',\n    valorIpross: 'Valor IPROSS',\n    categoria: 'Categoria'\n  },\n  optionsModalidadPresentacion: [{\n    label: 'Ambulatoria',\n    value: 'ambulatoria'\n  }, {\n    label: 'Internación',\n    value: 'internacion'\n  }],\n  optionsPeriodoTope: [{\n    label: 'Día',\n    value: 'dia'\n  }, {\n    label: 'Mes',\n    value: 'mes'\n  }, {\n    label: 'Trimestre',\n    value: 'trimestre'\n  }, {\n    label: 'Año',\n    value: 'anio'\n  }],\n  renders: {\n    capitulo: function capitulo(rowData) {\n      return \"\".concat(rowData.capitulo.capitulo, \"-\").concat(rowData.capitulo.descripcion);\n    },\n    fechaNorma: function fechaNorma(rowData) {\n      return format(parseISO(rowData.fechaNorma), DATE_FORMAT);\n    },\n    modalidadPresentacion: function modalidadPresentacion(rowData) {\n      var _NOMENCLADOR$optionsM;\n\n      return (_NOMENCLADOR$optionsM = NOMENCLADOR.optionsModalidadPresentacion.find(function (elem) {\n        return elem.value === rowData.modalidadPresentacion;\n      })) === null || _NOMENCLADOR$optionsM === void 0 ? void 0 : _NOMENCLADOR$optionsM.label;\n    },\n    periodoTope: function periodoTope(rowData) {\n      var _NOMENCLADOR$optionsP;\n\n      return (_NOMENCLADOR$optionsP = NOMENCLADOR.optionsPeriodoTope.find(function (elem) {\n        return elem.value === rowData.periodoTope;\n      })) === null || _NOMENCLADOR$optionsP === void 0 ? void 0 : _NOMENCLADOR$optionsP.label;\n    },\n    categoria: function categoria(rowData) {\n      var _rowData$categoria;\n\n      return (_rowData$categoria = rowData.categoria) === null || _rowData$categoria === void 0 ? void 0 : _rowData$categoria.name;\n    }\n  }\n};\nvar CUENTAS_TERCEROS = {\n  name: 'Cuentas de terceros',\n  route: 'cuenta-de-terceros',\n  page: 'cuentas_terceros',\n  fields: {\n    nombre: 'Nombre',\n    apellido: 'Apellido',\n    cuitCuil: 'CUIT / CUIL',\n    cbu: 'CBU',\n    responsableDeCarga: 'Responsable de carga',\n    delegacion: 'Delegación',\n    adjuntos: 'Archivos adjuntos'\n  },\n  renders: {\n    responsableDeCarga: function responsableDeCarga(rowData) {\n      return rowData.responsableDeCarga.first_name + '' + rowData.responsableDeCarga.last_name;\n    },\n    delegacion: function delegacion(rowData) {\n      return rowData.delegacion.nombre;\n    },\n    adjuntos: function adjuntos(rowData) {\n      return rowData.adjuntos.archivo;\n    }\n  }\n};\nvar CUENTAS_JUDICIALES = {\n  name: 'Cuentas judiciales',\n  route: 'cuenta-judicial',\n  page: 'cuentas_judiciales',\n  fields: {\n    responsableDeCarga: 'Responsable de carga',\n    delegacion: 'Delegacion',\n    oficioJudicial: 'Oficio judicial',\n    afiliado: 'Afiliado',\n    informacionAdicional: 'Informacion adicional'\n  },\n  renders: {\n    responsableDeCarga: function responsableDeCarga(rowData) {\n      return rowData.responsableDeCarga.first_name + ' ' + rowData.responsableDeCarga.last_name;\n    },\n    delegacion: function delegacion(rowData) {\n      return rowData.delegacion.nombre;\n    },\n    afiliado: function afiliado(rowData) {\n      var _rowData$afiliado, _rowData$afiliado2;\n\n      return ((_rowData$afiliado = rowData.afiliado) === null || _rowData$afiliado === void 0 ? void 0 : _rowData$afiliado.nombre) + ' ' + ((_rowData$afiliado2 = rowData.afiliado) === null || _rowData$afiliado2 === void 0 ? void 0 : _rowData$afiliado2.apellido);\n    }\n  }\n};\nvar CAPITULO = {\n  name: 'Capitulo',\n  route: 'capitulo',\n  page: 'capitulo',\n  fields: {\n    coseguro: 'Coseguro',\n    capitulo: 'Capítulo',\n    descripción: 'Descripción'\n  },\n  renders: {}\n}; //Used by generator, dont remove this line #entitiesobject\n\nvar CUPONES = {\n  name: 'Cupones',\n  page: 'cupones',\n  route: 'api/cupon',\n  fields: {\n    id: 'id',\n    montoDeReintegro: 'Monto de reintegro',\n    fechaDeAlta: 'Fecha de alta',\n    estado: 'Estado',\n    solicitud: 'Solcitud',\n    lote: 'Lote'\n  },\n  renders: {}\n};\nvar LOTES = {\n  name: 'Lotes',\n  page: 'lotes',\n  route: 'api/lote',\n  fields: {\n    id: 'id',\n    fechaDeAlta: 'Fecha de alta'\n  },\n  renders: {\n    fechaDeAlta: function fechaDeAlta(rowData) {\n      return format(parseISO(rowData.fechaDeAlta), DATE_FORMAT);\n    }\n  }\n};\nvar DELEGACIONES = {\n  name: 'Delegaciones',\n  page: 'delegaciones',\n  route: 'api/delegaciones',\n  fields: {\n    id: 'id',\n    nombre: 'Nombre'\n  },\n  renders: {\n    is_active: function is_active(rowData) {\n      return rowData ? 'Si' : 'No';\n    }\n  }\n};\nvar AFILIADOS = {\n  name: 'Afiliados',\n  page: 'afiliados',\n  route: 'api/afiliados',\n  fields: {\n    numeroAfiliado: 'Numero de afiliado',\n    nombre: 'Nombre',\n    apellido: 'Apellido',\n    cuitCuil: 'Cuil',\n    cbu: 'CBU',\n    activo: 'Activo',\n    fechaBaja: 'Fecha de baja',\n    cuentaDeTerceros: 'Cuenta de terceros',\n    cuentaJudicial: 'Cuenta judicial'\n  },\n  renders: {\n    activo: function activo(rowData) {\n      return rowData.activo ? 'Si' : 'No';\n    }\n  }\n};\nvar AUDITORIAS = {\n  name: 'Auditorias',\n  page: 'auditorias',\n  route: 'api/auditorias',\n  fields: {\n    'solicitud.id': 'Solicitud',\n    practica: 'Practica',\n    fechaPractica: 'Fecha de práctica',\n    prestador: 'Prestador'\n  },\n  renders: {\n    'solicitud.id': function solicitudId(rowData) {\n      var _rowData$solicitud$id, _rowData$solicitud$id2;\n\n      return \"\".concat('0'.repeat(7 - ((_rowData$solicitud$id = rowData.solicitud.id) === null || _rowData$solicitud$id === void 0 ? void 0 : _rowData$solicitud$id.toString().length))).concat((_rowData$solicitud$id2 = rowData.solicitud.id) === null || _rowData$solicitud$id2 === void 0 ? void 0 : _rowData$solicitud$id2.toString());\n    },\n    fechaPractica: function fechaPractica(rowData) {\n      return format(parseISO(rowData.fechaPractica), DATE_FORMAT);\n    },\n    prestador: function prestador(rowData) {\n      return rowData.prestador.matricula;\n    },\n    practica: function practica(rowData) {\n      return \"\".concat(rowData.nomenclador.codigo, \" - \").concat(rowData.nomenclador.descripcion, \" - \").concat(rowData.nomenclador.capitulo.descripcion);\n    }\n  }\n};\nvar TABLE = {\n  labelRowsSelect: 'filas',\n  labelDisplayedRows: '{from}-{to} de {count}',\n  labelRowsPerPage: 'Filas por página',\n  firstAriaLabel: 'Primera página',\n  firstTooltip: 'Primera página',\n  previousAriaLabel: 'Anterior',\n  previousTooltip: 'Anterior',\n  nextAriaLabel: 'Siguiente',\n  nextTooltip: 'Siguiente',\n  lastAriaLabel: 'Última página',\n  lastTooltip: 'Última página',\n  actions: 'Acciones'\n};\nvar LOGIN = {\n  passwordRecoveryMessage: 'Contacte al administrador de LDAP: adminldap@dominio.com',\n  passwordRecoveryButton: 'Olvide mi contraseña',\n  signIn: 'Entrar',\n  logout: 'Salir'\n};\nvar SOLICITUDES = {\n  name: 'Solicitudes',\n  route: 'api/solicitudes',\n  page: 'solicitudes',\n  fields: {\n    estadoActual: 'Estado actual',\n    fechaAlta: 'Fecha de alta',\n    'delegacion.nombre': 'Delegación',\n    'afiliado.codigo': 'Afiliado'\n  },\n  renders: {\n    estadoActual: function estadoActual(rowData) {\n      var _SOLICITUDES$optionsE;\n\n      return (_SOLICITUDES$optionsE = SOLICITUDES.optionsEstadoActual.find(function (elem) {\n        return elem.value === rowData.estadoActual;\n      })) === null || _SOLICITUDES$optionsE === void 0 ? void 0 : _SOLICITUDES$optionsE.label;\n    },\n    fechaAlta: function fechaAlta(rowData) {\n      return format(parseISO(rowData.fechaAlta), DATE_FORMAT);\n    }\n  },\n  optionsEstadoActual: [{\n    label: 'Sin pagos realizados',\n    value: 'sinPagos'\n  }, {\n    label: 'Pago parcial',\n    value: 'pagoParcial'\n  }, {\n    label: 'Pago total',\n    value: 'pagoTotal'\n  }],\n  customActions: {\n    addPresentacion: 'Agregar prestacion'\n  }\n};\nvar PRESTADORES = {\n  name: 'Prestadores',\n  route: 'api/prestadores',\n  page: 'prestadores'\n};\nvar MAIN_ENTITIES = [SOLICITUDES, AUDITORIAS, LOTES, CUENTAS_TERCEROS, CUENTAS_JUDICIALES];\nvar ADMIN_ENTITIES = [USERS, NOMENCLADOR, CUPONES, LOTES, DELEGACIONES, AFILIADOS // PRESTADORES\n];\n\nvar LOADING = function LOADING(entity) {\n  return \"Cargando \".concat(entity);\n};\n\nvar ERRORS = {\n  unknown: 'Error desconocido',\n  onGet: function onGet(entity) {\n    return \"Error al obtener \".concat(entity);\n  },\n  onCreate: function onCreate(entity) {\n    return \"Error al crear \".concat(entity);\n  },\n  onDelete: function onDelete(entity) {\n    return \"Error al eliminar \".concat(entity);\n  },\n  onUpdate: function onUpdate(entity) {\n    return \"Error al actualizar \".concat(entity);\n  },\n  onSync: function onSync(entity) {\n    return \"Error al sincronizar \".concat(entity);\n  },\n  onDeactivate: function onDeactivate(entity) {\n    return \"Error al desactivar \".concat(entity);\n  },\n  onSetGroups: function onSetGroups(entity) {\n    return \"Error al modificar los roles del usuario\";\n  },\n  onSetDelegaciones: function onSetDelegaciones(entity) {\n    return 'Error al modificar las delegaciones del usuario';\n  },\n  inactiveUser: 'Tu cuenta está inactiva. Contactar al administrador: admin@dominio.com',\n  invalidLdap: 'Usuario o contraseña incorrecta. Contacte al administrador de LDAP: adminldap@dominio.com'\n};\nvar INFO = {\n  onSync: function onSync(entity, count) {\n    count === 0 ? 'Todos los usuarios ya estan sincronizados' : \"Se sincronizaron \".concat(count, \" \").concat(entity);\n  },\n  setGroups: \"Se actualizo correctamente el usuario\",\n  setDelegaciones: \"Se actualizo correctamente el usuario\",\n  //Spinner message\n  working: 'Por favor espere...'\n};\nvar ACTIONS = {\n  crete: function crete(entity) {\n    return \"Crear \".concat(entity);\n  },\n  \"delete\": function _delete(entity) {\n    return \"Eliminar \".concat(entity);\n  },\n  update: function update(entity) {\n    return \"Actualizar \".concat(entity);\n  }\n};\nvar STEPPER_SOLICITUDES = {\n  add: 'Agregar solicitud',\n  end: 'Solicitud cargada, presione cerrar para terminar',\n  steps: [{\n    title: 'Crear solicitud',\n    description: 'Complete los siguientes campos con la información de la solicitud:'\n  }, {\n    title: 'Agregar prestaciones',\n    description: 'Sube la factura para agregar la prestación. Una vez subida, completa el formulario'\n  }, {\n    title: 'Guardar',\n    description: 'Confirma los datos para guardar la solicitud'\n  }, {\n    title: 'Agregar adjuntos(opcional)',\n    description: 'Agrega archivos adjuntos a las prestaciones de la lista'\n  }],\n  back: 'Atras',\n  next: 'Siguiente',\n  finish: 'Finalizar',\n  cancel: 'Cancelar',\n  close: 'Cerrar',\n  save: 'Guardar y terminar',\n  saveAndContinue: 'Guardar y agregar otra',\n  onSubmitSolicitud: {\n    title: 'Solicitud creada!',\n    message: 'Se creo nueva solicitud',\n    severity: 'success'\n  },\n  onSubmitFactura: {\n    title: 'Factura guardada!',\n    message: 'Se guardo la factura, completa los datos de la prestacion para continuar. Luego elige siguiente para terminar o guardar y agregar para seguir cargando prestaciones',\n    severity: 'success'\n  },\n  onSubmitPrestacion: function onSubmitPrestacion(count) {\n    return {\n      title: \"\".concat(count, \"\\xBA Prestacion creada\"),\n      message: \"Se creo la \".concat(count, \"\\xBA prestaci\\xF3n\"),\n      severity: 'success'\n    };\n  },\n  onNewPrestacion: function onNewPrestacion(count) {\n    return {\n      title: 'Detalles prestación',\n      message: \"Complete formulario con los detalles de la \".concat(count, \"\\xBA prestaci\\xF3n asociada a la solicitud\"),\n      severity: 'info'\n    };\n  },\n  onNewFactura: function onNewFactura(count) {\n    return {\n      title: 'Cargar factura',\n      message: \"Suba el archivo de la factura correspondiente a la \".concat(count, \"\\xBA prestaci\\xF3n asociada a la solicitud\"),\n      severity: 'info'\n    };\n  },\n  onFinish: {\n    title: 'Proceso finalizado',\n    message: 'Solicitud completa, puede ver un resumen de los datos ingresados a continuación',\n    severity: 'info'\n  }\n};\nexport { STEPPER_SOLICITUDES, FORM_BUILDER, USERS, TABLE, NOMENCLADOR, MAIN_ENTITIES, ADMIN_ENTITIES, APP_NAME, DATE_FORMAT, LOADING, ERRORS, ACTIONS, SOLICITUDES, LOGIN, INFO, PRESTACIONES, CAPITULO, CUENTAS_TERCEROS, CUENTAS_JUDICIALES, AUDITORIAS //Used by generator, dont remove this line #exportconsts\n, CUPONES, LOTES, DELEGACIONES, AFILIADOS };","map":null,"metadata":{},"sourceType":"module"}