{"ast":null,"code":"import { format, parseISO } from 'date-fns';\nconst APP_NAME = 'Reintegros';\nconst DATE_FORMAT = 'dd/MM/yyyy';\nconst FORM_BUILDER = {\n  required: 'Campo requerido ',\n  min: 'El valor debe ser superior a ',\n  minLength: 'Longitud debe ser de al menos ',\n  max: 'El valor debe ser inferior a ',\n  maxLength: 'Longitud debe ser a lo sumo de ',\n  pattern: 'El formato no es válido',\n  default: 'Error desconocido'\n};\nconst USERS = {\n  name: 'Usuarios',\n  route: 'api/usuarios',\n  page: 'usuarios',\n  fields: {\n    username: 'Nombre de usuario',\n    email: 'Mail',\n    first_name: 'Nombre',\n    last_name: 'Apellido',\n    is_active: 'Activo',\n    groups: 'Roles',\n    delegaciones: 'Delegaciones',\n    delegacionPrincipal: 'Delegacion Pr.'\n  },\n  filters: {\n    groups: 'Roles',\n    estado: 'Estado',\n    delegacion: 'Delegación'\n  },\n  optionsEstado: [{\n    label: 'Todos',\n    value: ''\n  }, {\n    label: 'Activo',\n    value: 'true'\n  }, {\n    label: 'No activo',\n    value: 'false'\n  }],\n  renders: {\n    is_active: rowData => rowData ? 'Si' : 'No',\n    groups: rowData => rowData.groups.map(elem => elem.name).join(', '),\n    delegaciones: rowData => rowData.delegaciones.map(elem => elem.nombre).join(', '),\n    delegacionPrincipal: rowData => {\n      var _rowData$delegacionPr;\n\n      return (_rowData$delegacionPr = rowData.delegacionPrincipal) === null || _rowData$delegacionPr === void 0 ? void 0 : _rowData$delegacionPr.nombre;\n    }\n  },\n  customActions: {\n    sync: 'Sincronizar Usuarios'\n  },\n  tabPermissions: ['Administrador', 'Presidencia'],\n  roles: {\n    list: [],\n    create: [],\n    update: [],\n    destroy: []\n  }\n};\nconst PRESTACIONES = {\n  name: 'Prestaciones',\n  route: 'api/prestaciones',\n  page: 'prestaciones',\n  fields: {\n    auditor: 'Auditor',\n    cantidad: 'Cantidad',\n    montoTotal: 'Monto Total',\n    categoria: 'Categoria',\n    prestador: 'Prestador',\n    nomenclador: 'Prestación',\n    coseguroNomenclador: 'Coseguro',\n    valorIprossNomenclador: 'Valor IPROSS',\n    valorPrestacion: 'Monto pagado',\n    montoReintegrar: 'Monto a reintegrar',\n    estadoActual: 'Estado actual',\n    factura: 'Factura',\n    cobertura: 'Cobertura',\n    fechaPractica: 'Fecha de práctica',\n    periodo: 'Periodo',\n    adjuntos: 'Adjuntos',\n    modalidad: 'Modalidad'\n  },\n  filters: {\n    auditorActual: 'Auditor',\n    nomenclador: 'Prestacion',\n    prestador: 'Prestador',\n    estadoActual: 'Estado',\n    fechaDesde: 'Fecha desde',\n    fechaHasta: 'Fecha hasta'\n  },\n  optionsEstadoActual: [{\n    label: 'En curso',\n    value: 'enCurso'\n  }, {\n    label: 'Aceptado',\n    value: 'aceptado'\n  }, {\n    label: 'Rechazado',\n    value: 'rechazado'\n  }],\n  optionsCobertura: [{\n    label: '80%',\n    value: '80'\n  }, {\n    label: '90%',\n    value: '90'\n  }, {\n    label: '100%',\n    value: '100'\n  }],\n  renders: {\n    auditor: rowData => {\n      var _rowData$auditoria;\n\n      if ((_rowData$auditoria = rowData.auditoria) !== null && _rowData$auditoria !== void 0 && _rowData$auditoria.auditorActual) {\n        return rowData.auditoria.auditorActual.first_name + ' ' + rowData.auditoria.auditorActual.last_name;\n      }\n    },\n    categoria: rowData => {\n      var _rowData$categoria, _rowData$nomenclador;\n\n      if ((_rowData$categoria = rowData.categoria) !== null && _rowData$categoria !== void 0 && _rowData$categoria.nombre) {\n        var _rowData$categoria2;\n\n        return (_rowData$categoria2 = rowData.categoria) === null || _rowData$categoria2 === void 0 ? void 0 : _rowData$categoria2.nombre;\n      }\n\n      if ((_rowData$nomenclador = rowData.nomenclador) !== null && _rowData$nomenclador !== void 0 && _rowData$nomenclador.categoria) {\n        var _rowData$nomenclador2;\n\n        return (_rowData$nomenclador2 = rowData.nomenclador) === null || _rowData$nomenclador2 === void 0 ? void 0 : _rowData$nomenclador2.categoria.nombre;\n      }\n\n      return '';\n    },\n    coseguroNomenclador: rowData => {\n      var _rowData$nomenclador3, _rowData$nomenclador4;\n\n      return (_rowData$nomenclador3 = rowData.nomenclador) === null || _rowData$nomenclador3 === void 0 ? void 0 : (_rowData$nomenclador4 = _rowData$nomenclador3.capitulo) === null || _rowData$nomenclador4 === void 0 ? void 0 : _rowData$nomenclador4.coseguro;\n    },\n    modalidad: rowData => {\n      var _rowData$nomenclador5, _rowData$item;\n\n      const modalidad = ((_rowData$nomenclador5 = rowData.nomenclador) === null || _rowData$nomenclador5 === void 0 ? void 0 : _rowData$nomenclador5.modalidadPrestacion) || ((_rowData$item = rowData.item) === null || _rowData$item === void 0 ? void 0 : _rowData$item.modalidadPrestacion);\n      const nom = NOMENCLADOR.optionsModalidadPresentacion.find(n => n.value === modalidad);\n      return nom === null || nom === void 0 ? void 0 : nom.label;\n    },\n    prestador: rowData => {\n      var _rowData$prestador;\n\n      return (_rowData$prestador = rowData.prestador) === null || _rowData$prestador === void 0 ? void 0 : _rowData$prestador.matricula;\n    },\n    nomenclador: rowData => {\n      var _rowData$nomenclador6, _rowData$item2;\n\n      return ((_rowData$nomenclador6 = rowData.nomenclador) === null || _rowData$nomenclador6 === void 0 ? void 0 : _rowData$nomenclador6.descripcion) || ((_rowData$item2 = rowData.item) === null || _rowData$item2 === void 0 ? void 0 : _rowData$item2.descripcion);\n    },\n    factura: rowData => {\n      var _rowData$factura;\n\n      return (_rowData$factura = rowData.factura) === null || _rowData$factura === void 0 ? void 0 : _rowData$factura.archivo;\n    },\n    estadoActual: rowData => {\n      var _rowData$auditoria2, _PRESTACIONES$options;\n\n      const estado = ((_rowData$auditoria2 = rowData.auditoria) === null || _rowData$auditoria2 === void 0 ? void 0 : _rowData$auditoria2.estadoActual) || rowData.estadoActual;\n      return (_PRESTACIONES$options = PRESTACIONES.optionsEstadoActual.find(elem => elem.value === estado)) === null || _PRESTACIONES$options === void 0 ? void 0 : _PRESTACIONES$options.label;\n    },\n    fechaPractica: rowData => format(parseISO(rowData.fechaPractica), DATE_FORMAT),\n    adjuntos: rowData => {\n      if (rowData.adjuntos) {\n        const adArr = rowData.adjuntos.map(a => a.archivo);\n        return adArr.join(', ');\n      }\n\n      return '';\n    },\n    montoReintegrar: rowData => {\n      var _rowData$nomenclador7;\n\n      if (rowData.item) {\n        return rowData.montoReintegrar;\n      }\n\n      const valorIpross = (_rowData$nomenclador7 = rowData.nomenclador) === null || _rowData$nomenclador7 === void 0 ? void 0 : _rowData$nomenclador7.valorIpross;\n      const coseguro = rowData === null || rowData === void 0 ? void 0 : rowData.nomenclador.capitulo.coseguro;\n      return (parseFloat(valorIpross) - parseFloat(valorIpross) * (parseFloat(coseguro) / 100)).toFixed(2);\n    }\n  }\n};\nconst NOMENCLADOR = {\n  name: 'Nomenclador',\n  route: 'api/nomenclador',\n  page: 'nomenclador',\n  modalImportNomenclador: 'Vista previa',\n  addPrestacion: 'Agregar prestación',\n  importPrestaciones: 'Importar prestaciones',\n  fields: {\n    capitulo: 'Capítulo',\n    codigo: 'Código',\n    descripcion: 'Descripción',\n    complejidadPractica: 'Nivel de complejidad',\n    numeroNormaRespaldatoria: 'Nº Norma respaldatoria',\n    fechaNorma: 'Fecha de la norma',\n    topesCoberturaPeriodo: 'Topes de cobertura por período',\n    periodoTope: 'Periodo del tope',\n    modalidadPresentacion: 'Modalidad de Prestación ',\n    valorIpross: 'Valor IPROSS',\n    categoria: 'Categoria',\n    // montoFijoMensual: 'Monto Fijo Mensual ',\n    // programaSanitario: 'Programa sanitario',\n    unidades: 'Unidades',\n    requiereAuditoriaMedica: 'Requiere auditría médica'\n  },\n  cols: {\n    codigo: 'Código',\n    categoria: 'Categoria',\n    capitulo: 'Capítulo',\n    modalidadPresentacion: 'Modalidad',\n    valorIpross: 'Valor IPROSS',\n    descripcion: 'Descripción',\n    complejidadPractica: 'Complejidad',\n    numeroNormaRespaldatoria: 'Nº Norma',\n    fechaNorma: 'Fecha',\n    topesCoberturaPeriodo: 'Topes',\n    periodoTope: 'Periodo',\n    unidad: 'Unidades'\n  },\n  filters: {\n    categoria: 'Categoría',\n    modalidad: 'Modalidad',\n    capitulo: 'Capítulo'\n  },\n  optionsModalidadPresentacion: [{\n    label: 'Ambulatoria',\n    value: 'ambulatoria'\n  }, {\n    label: 'Internación',\n    value: 'internacion'\n  }, {\n    label: 'Internacion y Ambulatoria',\n    value: 'internacionyambulatoria'\n  }],\n  optionsPeriodoTope: [{\n    label: 'Día',\n    value: 'dia'\n  }, {\n    label: 'Mes',\n    value: 'mes'\n  }, {\n    label: 'Trimestre',\n    value: 'trimestre'\n  }, {\n    label: 'Año',\n    value: 'anio'\n  }],\n  optionsUnidades: [{\n    label: 'km',\n    value: 'km'\n  }, {\n    label: 'hs',\n    value: 'hs'\n  }, {\n    label: 'sesiones',\n    value: 'sesiones'\n  }, {\n    label: 'unidades',\n    value: 'unidades'\n  }],\n  renders: {\n    capitulo: rowData => `${rowData.capitulo.capitulo}-${rowData.capitulo.descripcion}`,\n    fechaNorma: rowData => format(parseISO(rowData.fechaNorma), DATE_FORMAT),\n    modalidadPresentacion: rowData => {\n      var _NOMENCLADOR$optionsM;\n\n      return (_NOMENCLADOR$optionsM = NOMENCLADOR.optionsModalidadPresentacion.find(elem => elem.value === rowData.modalidadPrestacion)) === null || _NOMENCLADOR$optionsM === void 0 ? void 0 : _NOMENCLADOR$optionsM.label;\n    },\n    periodoTope: rowData => {\n      var _NOMENCLADOR$optionsP;\n\n      return (_NOMENCLADOR$optionsP = NOMENCLADOR.optionsPeriodoTope.find(elem => elem.value === rowData.periodoTope)) === null || _NOMENCLADOR$optionsP === void 0 ? void 0 : _NOMENCLADOR$optionsP.label;\n    },\n    categoria: rowData => {\n      var _rowData$categoria3;\n\n      return (_rowData$categoria3 = rowData.categoria) === null || _rowData$categoria3 === void 0 ? void 0 : _rowData$categoria3.nombre;\n    }\n  },\n  messages: {\n    processingFileMessage: 'Procesando archivo de nomenclador',\n    successfulImportNomenclador: 'Importacion exitosa'\n  },\n  tabPermissions: ['Administrador', 'Presidencia']\n};\nconst CUENTAS_TERCEROS = {\n  name: 'Cuentas de terceros',\n  route: 'api/cuenta-de-terceros',\n  page: 'cuentas_terceros',\n  fields: {\n    afiliado: 'Afiliado',\n    nombre: 'Nombre',\n    apellido: 'Apellido',\n    cuitCuil: 'CUIT / CUIL',\n    cbu: 'CBU',\n    responsableDeCarga: 'Responsable de carga',\n    delegacion: 'Delegación',\n    adjuntos: 'Archivos adjuntos'\n  },\n  filters: {\n    delegacion: 'Delegación'\n  },\n  renders: {\n    responsableDeCarga: rowData => rowData.responsableDeCarga.first_name + ' ' + rowData.responsableDeCarga.last_name,\n    delegacion: rowData => rowData.delegacion.nombre,\n    adjuntos: rowData => rowData.adjuntos.archivo,\n    afiliado: rowData => {\n      var _rowData$afiliado, _rowData$afiliado2, _rowData$afiliado3;\n\n      return ((_rowData$afiliado = rowData.afiliado) === null || _rowData$afiliado === void 0 ? void 0 : _rowData$afiliado.numeroAfiliado) + ' ' + ((_rowData$afiliado2 = rowData.afiliado) === null || _rowData$afiliado2 === void 0 ? void 0 : _rowData$afiliado2.nombre) + ' ' + ((_rowData$afiliado3 = rowData.afiliado) === null || _rowData$afiliado3 === void 0 ? void 0 : _rowData$afiliado3.apellido);\n    }\n  },\n  tabPermissions: ['Administrador', 'Reintegro', 'Delegado', 'Presidencia']\n};\nconst CUENTAS_JUDICIALES = {\n  name: 'Cuentas judiciales',\n  route: 'api/cuenta-judicial',\n  page: 'cuentas_judiciales',\n  fields: {\n    afiliado: 'Afiliado',\n    responsableDeCarga: 'Responsable de carga',\n    delegacion: 'Delegacion',\n    informacionAdicional: 'Informacion adicional',\n    oficioJudicial: 'Oficio judicial'\n  },\n  filters: {\n    delegacion: 'Delegación'\n  },\n  renders: {\n    responsableDeCarga: rowData => rowData.responsableDeCarga.first_name + ' ' + rowData.responsableDeCarga.last_name,\n    delegacion: rowData => rowData.delegacion.nombre,\n    afiliado: rowData => {\n      var _rowData$afiliado4, _rowData$afiliado5;\n\n      return ((_rowData$afiliado4 = rowData.afiliado) === null || _rowData$afiliado4 === void 0 ? void 0 : _rowData$afiliado4.nombre) + ' ' + ((_rowData$afiliado5 = rowData.afiliado) === null || _rowData$afiliado5 === void 0 ? void 0 : _rowData$afiliado5.apellido);\n    }\n  },\n  tabPermissions: ['Administrador', 'Delegado', 'Presidencia']\n};\nconst CAPITULO = {\n  name: 'Capitulo',\n  route: 'capitulo',\n  page: 'capitulo',\n  fields: {\n    coseguro: 'Coseguro',\n    capitulo: 'Capítulo',\n    descripción: 'Descripción'\n  },\n  renders: {}\n}; //Used by generator, dont remove this line #entitiesobject\n\nconst CUPONES = {\n  name: 'Solicitudes Autorizadas',\n  page: 'cupones',\n  route: 'api/cupon',\n  fields: {\n    id: 'id',\n    'solicitud.id': 'Solcitud',\n    'solicitud.afiliado.numeroAfiliado': 'Afiliado',\n    fechaDeAlta: 'Fecha de alta',\n    'solicitud.delegacion.nombre': 'Delegacion',\n    plazo: 'Plazo',\n    montoDeReintegro: 'Monto de reintegro',\n    lotes: 'Lote',\n    estado: 'Estado',\n    categorias: 'Categorias prestaciones',\n    numeroDePago: 'Número de Pago',\n    motivoDeRechazo: 'Motivo de Rechazo'\n  },\n  filters: {\n    fechaDesde: 'Fecha desde',\n    fechaHasta: 'Fecha hasta',\n    categoria: 'Categoría',\n    nroLote: 'N° Lote',\n    delegacion: 'Delegación',\n    estado: 'Estado'\n  },\n  optionsCategorias: [{\n    label: 'NO IMPLEMENTADO',\n    value: 'xxx'\n  }],\n  optionsEstado: [{\n    label: 'Todos',\n    value: ''\n  }, {\n    label: 'Abierto',\n    value: 'abierto'\n  }, {\n    label: 'En Proceso',\n    value: 'enProceso'\n  }, {\n    label: 'Pago Realizado',\n    value: 'pagoRealizado'\n  }, {\n    label: 'Pago Rechazado',\n    value: 'pagoRechazado'\n  }, {\n    label: 'Rechazo Parcial',\n    value: 'rechazoParcial'\n  }, {\n    label: 'Cerrado',\n    value: 'cerrado'\n  }],\n  renders: {\n    fechaDeAlta: rowData => format(parseISO(rowData.fechaDeAlta), DATE_FORMAT),\n    montoDeReintegro: rowData => `$ ${rowData.montoDeReintegro}`,\n    categorias: rowData => rowData.categorias,\n    // lotes: (rowData) => rowData.lotes[0]?.id\n    lotes: rowData => {\n      var ids = [];\n      rowData.lotes.forEach(lote => {\n        ids.push(lote.id);\n        ids.push('-');\n      });\n      ids.pop();\n      return ids;\n    }\n  },\n  modalCreateLote: {\n    mainTitle: 'Vista previa de creacion de lotes',\n    subTitle: 'Resultado del análisis de los cupones',\n    subTitle2: 'Solo se crearan el o los lotes si todos los cupones seleccionados son correctos.'\n  },\n  messages: {\n    successCreateCupones: 'Proceso finalizado con exito',\n    loading: 'Procesando los cupones'\n  },\n  tabPermissions: ['Administrador', 'AuditoriaAdministrativa', 'AuditoriaCentral', 'AuditoriaMedica', 'Contaduria', 'Delegado', 'Presidencia', 'Reintegro', 'SoloLectura']\n};\nconst LOTES = {\n  name: 'Lotes',\n  page: 'lotes',\n  route: 'api/lote',\n  fields: {\n    id: 'id',\n    fechaDeAlta: 'Fecha de alta',\n    tipo: 'Tipo',\n    montoTotal: 'Monto Total',\n    estado: 'Estado',\n    procesadoPor: 'Procesado por'\n  },\n  filters: {\n    fechaDesde: 'Fecha desde',\n    fechaHasta: 'Fecha hasta',\n    tipo: 'Tipo',\n    estado: 'Estado',\n    delegacion: 'Delegación'\n  },\n  optionsTipos: [{\n    label: 'No judicial',\n    value: 'noJudicial'\n  }, {\n    label: 'Judicial',\n    value: 'judicial'\n  }],\n  optionsEstados: [{\n    label: 'NO IMPLEMENTADO',\n    value: 'xxx'\n  }],\n  renders: {\n    fechaDeAlta: rowData => format(parseISO(rowData.fechaDeAlta), DATE_FORMAT),\n    tipo: rowData => rowData.tipo === 'noJudicial' ? 'No judicial' : 'Judicial',\n    montoTotal: rowData => `$ ${rowData.montoTotal}`,\n    procesadoPor: rowData => `${rowData.procesadoPor}`\n  },\n  modalResultQnQoFiles: {\n    subTitle: 'Resultado del análisis de los archivos',\n    subtitle2Error: 'No se pueden procesar los cupones. Se deben corregir los errores y volver a cargar los archivos para el lote.',\n    subtitle2Success: 'Se procesaron exitosamente los archivos'\n  },\n  tabPermissions: ['Administrador', 'Tesoreria', 'Contaduria', 'Presidencia', 'SoloLectura']\n};\nconst DELEGACIONES = {\n  name: 'Delegaciones',\n  page: 'delegaciones',\n  route: 'api/delegaciones',\n  fields: {\n    id: 'id',\n    nombre: 'Nombre'\n  },\n  renders: {\n    is_active: rowData => rowData ? 'Si' : 'No'\n  },\n  tabPermissions: ['Administrador', 'Presidencia']\n};\nconst AFILIADOS = {\n  name: 'Afiliados',\n  page: 'afiliados',\n  route: 'api/afiliados',\n  fields: {\n    numeroAfiliado: 'Numero de afiliado',\n    nombre: 'Nombre',\n    apellido: 'Apellido',\n    cuitCuil: 'Cuil',\n    cbu: 'CBU',\n    activo: 'Activo',\n    fechaBaja: 'Fecha de baja',\n    cuentaDeTerceros: 'Cuenta de terceros',\n    cuentaJudicial: 'Cuenta judicial'\n  },\n  renders: {\n    activo: rowData => rowData.activo ? 'Si' : 'No'\n  },\n  tabPermissions: ['Administrador', 'Presidencia']\n};\nconst AUDITORIAS = {\n  name: 'Auditorias',\n  page: 'auditorias',\n  route: 'api/auditorias',\n  fields: {\n    'solicitud.id': 'Solicitud',\n    practica: 'Practica',\n    fechaPractica: 'Fecha de práctica',\n    prestador: 'Prestador',\n    estadoActual: 'Estado'\n  },\n  renders: {\n    'solicitud.id': rowData => {\n      var _rowData$solicitud$id, _rowData$solicitud$id2;\n\n      return `${'0'.repeat(7 - ((_rowData$solicitud$id = rowData.solicitud.id) === null || _rowData$solicitud$id === void 0 ? void 0 : _rowData$solicitud$id.toString().length))}${(_rowData$solicitud$id2 = rowData.solicitud.id) === null || _rowData$solicitud$id2 === void 0 ? void 0 : _rowData$solicitud$id2.toString()}`;\n    },\n    fechaPractica: rowData => format(parseISO(rowData.fechaPractica), DATE_FORMAT),\n    prestador: rowData => rowData.prestador.matricula,\n    practica: rowData => `${rowData.nomenclador.codigo} - ${rowData.nomenclador.descripcion} - ${rowData.nomenclador.capitulo.descripcion}`,\n    estadoActual: rowData => {\n      var _PRESTACIONES$options2;\n\n      return (_PRESTACIONES$options2 = PRESTACIONES.optionsEstadoActual.find(opt => {\n        var _rowData$auditoria3;\n\n        return opt.value === ((_rowData$auditoria3 = rowData.auditoria) === null || _rowData$auditoria3 === void 0 ? void 0 : _rowData$auditoria3.estadoActual);\n      })) === null || _PRESTACIONES$options2 === void 0 ? void 0 : _PRESTACIONES$options2.label;\n    }\n  },\n  tabPermissions: ['Administrador', 'AuditoriaAdministrativa', 'AuditoriaCentral', 'AuditoriaMedica', 'Presidencia', 'SoloLectura']\n};\nconst TABLE = {\n  labelRowsSelect: 'filas',\n  labelDisplayedRows: '{from}-{to} de {count}',\n  labelRowsPerPage: 'Filas por página',\n  firstAriaLabel: 'Primera página',\n  firstTooltip: 'Primera página',\n  previousAriaLabel: 'Anterior',\n  previousTooltip: 'Anterior',\n  nextAriaLabel: 'Siguiente',\n  nextTooltip: 'Siguiente',\n  lastAriaLabel: 'Última página',\n  lastTooltip: 'Última página',\n  actions: 'Acciones'\n};\nconst LOGIN = {\n  passwordRecoveryMessage: 'Contacte al administrador de LDAP: adminldap@dominio.com',\n  passwordRecoveryButton: 'Olvide mi contraseña',\n  signIn: 'Entrar',\n  logout: 'Salir'\n};\nconst SOLICITUDES = {\n  name: 'Solicitudes',\n  route: 'api/solicitudes',\n  page: 'solicitudes',\n  fields: {\n    id: 'id',\n    estadoActual: 'Estado actual',\n    fechaAlta: 'Fecha de alta',\n    'delegacion.nombre': 'Delegación',\n    afiliado: 'Afiliado',\n    tipo: 'Tipo',\n    montoTotal: 'Monto Total',\n    montoTotalAReintegrar: 'Monto total a reintegrar'\n  },\n  filters: {\n    afiliado: 'Afiliado',\n    delegacion: 'Delegación',\n    estadoActual: 'Estado actual',\n    fechaDesde: 'Fecha desde',\n    fechaHasta: 'Fecha hasta',\n    judicial: 'Judicial',\n    source: 'Origen'\n  },\n  renders: {\n    estadoActual: rowData => {\n      var _SOLICITUDES$optionsE;\n\n      return (_SOLICITUDES$optionsE = SOLICITUDES.optionsEstadoActual.find(elem => elem.value === rowData.estadoActual)) === null || _SOLICITUDES$optionsE === void 0 ? void 0 : _SOLICITUDES$optionsE.label;\n    },\n    fechaAlta: rowData => format(parseISO(rowData.fechaAlta), DATE_FORMAT),\n    afiliado: rowData => `${rowData.afiliado.nombre}, ${rowData.afiliado.apellido} | ${rowData.afiliado.numeroAfiliado}`,\n    tipo: rowData => rowData.tipo === 'noJudicial' ? 'No judicial' : 'judicial',\n    montoTotal: rowData => {\n      var _rowData$prestaciones;\n\n      let montoTotal = 0;\n      (_rowData$prestaciones = rowData.prestaciones) === null || _rowData$prestaciones === void 0 ? void 0 : _rowData$prestaciones.map(p => {\n        montoTotal += parseFloat(p.valorIprossNomenclador) * p.cantidad;\n      });\n      return montoTotal.toFixed(2);\n    },\n    montoTotalAReintegrar: rowData => {\n      var _rowData$prestaciones2;\n\n      let montoAReintegrar = 0;\n      (_rowData$prestaciones2 = rowData.prestaciones) === null || _rowData$prestaciones2 === void 0 ? void 0 : _rowData$prestaciones2.map(p => {\n        var _p$nomenclador, _p$nomenclador$capitu;\n\n        const total = parseFloat(p.valorIprossNomenclador) * p.cantidad;\n        const montoReintegrar = total * parseFloat(p === null || p === void 0 ? void 0 : (_p$nomenclador = p.nomenclador) === null || _p$nomenclador === void 0 ? void 0 : (_p$nomenclador$capitu = _p$nomenclador.capitulo) === null || _p$nomenclador$capitu === void 0 ? void 0 : _p$nomenclador$capitu.coseguro) / 100;\n        montoAReintegrar += montoReintegrar;\n      });\n      return montoAReintegrar.toFixed(2);\n    }\n  },\n  optionsEstadoActual: [{\n    label: 'Sin pagos realizados',\n    value: 'sinPagos'\n  }, {\n    label: 'Pago parcial',\n    value: 'pagoParcial'\n  }, {\n    label: 'Pago total',\n    value: 'pagoTotal'\n  }],\n  optionsType: [{\n    label: 'No judicial',\n    value: 'noJudicial'\n  }, {\n    label: 'Judicial',\n    value: 'judicial'\n  }],\n  sources: [{\n    label: 'Interna',\n    value: 'interna'\n  }, {\n    label: 'VEM',\n    value: 'vem'\n  }, {\n    label: 'Bajo Presupuesto',\n    value: 'bajoPresupuesto'\n  }],\n  customActions: {\n    addPresentacion: 'Agregar prestacion'\n  },\n  modalCreateCupones: {\n    mainTitle: 'Vista previa de creacion de cupones',\n    subTitle: 'Resultado del análisis de las solicitudes',\n    subTitle2: data => `Se crearan ${data} cupones. Las siguientes solicitudes no cumplen con las condiciones para que se puedan crear los cupones:`\n  },\n  messages: {\n    errorCreateCupones: `No se creó ningún cupón`,\n    successCreateCupones: data => `Se crearon exitosamente ${data} cupones`,\n    loading: 'Procesando las solicitudes',\n    tipoForm: 'Tipos de cuentas disponibles'\n  },\n  tabPermissions: ['Administrador', 'AuditoriaAdministrativa', 'AuditoriaCentral', 'AuditoriaMedica', 'Contaduria', 'Delegado', 'Presidencia', 'Reintegro', 'SoloLectura', 'Tesoreria']\n};\nconst PRESTADORES = {\n  name: 'Prestadores',\n  route: 'api/prestadores',\n  page: 'prestadores',\n  addPrestador: 'Agregar Prestador',\n  import: 'Importar',\n  fields: {\n    tipoDocumento: 'Tipo de documento',\n    nroDocumento: 'Nro. Documento',\n    apellido: 'Apellido',\n    nombre: 'Nombre',\n    sexoSisa: 'Sexo',\n    perEstado: 'Per. Estado',\n    fechaNacimiento: 'Fecha de nacimiento',\n    lugarNacimiento: 'Lugar de nacimiento',\n    nacionalidad: 'Nacionalidad',\n    domicilio: 'Domicilio',\n    localidadDes: 'Localidad',\n    profEstado: 'Prof. Estado',\n    areaDes: 'Area des.',\n    matricula: 'Matricula',\n    libro: 'Libro',\n    folio: 'Folio',\n    matTipoRegistro: 'Mat. Tipo',\n    matFechaRegistro: 'Fecha registro de matrícula',\n    matCondicionMatricula: 'Condicion matrícula',\n    matFechaExpededTitulo: 'Fecha expedición de título',\n    tituloDes: 'Título Des.',\n    especialidadDes: 'Especialidad',\n    institucionDes: 'Institución'\n  },\n  cols: {\n    nroDocumento: 'Nro. Documento',\n    nombre: 'Nombre',\n    apellido: 'Apellido',\n    localidadDes: 'Localidad',\n    profEstado: 'Prof. Estado',\n    matricula: 'Matricula',\n    libro: 'Libro',\n    folio: 'Folio',\n    tituloDes: 'Título Des.'\n  },\n  renders: {\n    localidadDes: data => {\n      var _PRESTADORES$optionsP;\n\n      return (_PRESTADORES$optionsP = PRESTADORES.optionsProvincias.find(p => p.value === data.localidadDes)) === null || _PRESTADORES$optionsP === void 0 ? void 0 : _PRESTADORES$optionsP.label;\n    },\n    profEstado: data => {\n      var _PRESTADORES$optionsE;\n\n      return (_PRESTADORES$optionsE = PRESTADORES.optionsEstado.find(e => e.value === data.profEstado)) === null || _PRESTADORES$optionsE === void 0 ? void 0 : _PRESTADORES$optionsE.label;\n    },\n    perEstado: data => {\n      var _PRESTADORES$optionsE2;\n\n      return (_PRESTADORES$optionsE2 = PRESTADORES.optionsEstado.find(e => e.value === data.perEstado)) === null || _PRESTADORES$optionsE2 === void 0 ? void 0 : _PRESTADORES$optionsE2.label;\n    }\n  },\n  optionsGender: [{\n    value: 'F',\n    label: 'Femenino'\n  }, {\n    value: 'M',\n    label: 'Masculino'\n  }, {\n    value: 'A',\n    label: 'A'\n  }],\n  optionsEstado: [{\n    value: 'alta',\n    label: 'Alta'\n  }, {\n    value: 'baja',\n    label: 'Baja'\n  }],\n  optionsDni: [{\n    value: '1',\n    label: 'DNI'\n  }, {\n    value: '2',\n    label: 'LC'\n  }, {\n    value: '3',\n    label: 'LE'\n  }, {\n    value: '4',\n    label: 'CI'\n  }, {\n    value: '5',\n    label: 'DE'\n  }, {\n    value: '6',\n    label: 'DNIF'\n  }, {\n    value: '7',\n    label: 'DNIM'\n  }],\n  optionsNacionalidad: [{\n    value: '200',\n    label: 'Aregentina'\n  }, {\n    value: '202',\n    label: 'Bolivia'\n  }, {\n    value: '203',\n    label: 'Brasil'\n  }, {\n    value: '208',\n    label: 'Chile'\n  }, {\n    value: '221',\n    label: 'Paraguay'\n  }, {\n    value: '225',\n    label: 'Uruguay'\n  }],\n  optionsProvincias: [{\n    value: '1',\n    label: 'CABA'\n  }, {\n    value: '2',\n    label: 'Buenos Aires'\n  }, {\n    value: '3',\n    label: 'Catamarca'\n  }, {\n    value: '4',\n    label: 'Chaco'\n  }, {\n    value: '5',\n    label: 'Chubut'\n  }, {\n    value: '6',\n    label: 'Córdoba'\n  }, {\n    value: '7',\n    label: 'Corrientes'\n  }, {\n    value: '8',\n    label: 'Entre Ríos'\n  }, {\n    value: '9',\n    label: 'Formosa'\n  }, {\n    value: '10',\n    label: 'Jujuy'\n  }, {\n    value: '11',\n    label: 'La Pampa'\n  }, {\n    value: '12',\n    label: 'La Rioja'\n  }, {\n    value: '13',\n    label: 'Mendoza'\n  }, {\n    value: '14',\n    label: 'Misiones'\n  }, {\n    value: '15',\n    label: 'Neuquén'\n  }, {\n    value: '16',\n    label: 'Río Negro'\n  }, {\n    value: '17',\n    label: 'Salta'\n  }, {\n    value: '18',\n    label: 'San Juan'\n  }, {\n    value: '19',\n    label: 'San Luis'\n  }, {\n    value: '20',\n    label: 'Santa Cruz'\n  }, {\n    value: '21',\n    label: 'Santa Fe'\n  }, {\n    value: '22',\n    label: 'Santiago del Estero'\n  }, {\n    value: '23',\n    label: 'Tierra del Fuego'\n  }, {\n    value: '24',\n    label: 'Tucumán'\n  }],\n  messages: {\n    processingFileMessage: 'Procesando archivo de importación',\n    successfulImport: 'Importacion exitosa'\n  },\n  tabPermissions: ['Administrador', 'Presidencia']\n};\nconst MAIN_ENTITIES = [SOLICITUDES, AUDITORIAS, CUPONES, LOTES, CUENTAS_TERCEROS, CUENTAS_JUDICIALES];\nconst ADMIN_ENTITIES = [NOMENCLADOR, DELEGACIONES, USERS, AFILIADOS, PRESTADORES];\n\nconst LOADING = entity => `Cargando ${entity}`;\n\nconst ERRORS = {\n  unknown: 'Error desconocido',\n  onGet: entity => `Error al obtener ${entity}`,\n  onCreate: entity => `Error al crear ${entity}`,\n  onDelete: entity => `Error al eliminar ${entity}`,\n  onUpdate: entity => `Error al actualizar ${entity}`,\n  onSync: entity => `Error al sincronizar ${entity}`,\n  onDeactivate: entity => `Error al desactivar ${entity}`,\n  onSetGroups: entity => `Error al modificar los roles del usuario`,\n  onSetDelegaciones: entity => 'Error al modificar las delegaciones del usuario',\n  onSetDelegacionPrincipal: entity => 'Error al modificar la delegacion principal del usuario',\n  inactiveUser: 'Tu cuenta está inactiva. Contactar al administrador: admin@dominio.com',\n  invalidLdap: 'Usuario o contraseña incorrecta. Contacte al administrador de LDAP: adminldap@dominio.com',\n  onAudit: error => 'Error al actualizar auditoría',\n  onUpload: 'Error subiendo archivos'\n};\nconst INFO = {\n  onSync: (entity, count) => {\n    return count === 0 ? 'Todos los usuarios ya estan sincronizados' : `Se sincronizaron ${count} ${entity}`;\n  },\n  setGroups: `Se actualizo correctamente el usuario`,\n  setDelegaciones: `Se actualizo correctamente el usuario`,\n  setDelegacionPrincipal: `Se actualizo correctamente el usuario`,\n  //Spinner message\n  working: 'Por favor espere...'\n};\nconst ACTIONS = {\n  crete: entity => `Crear ${entity}`,\n  delete: entity => `Eliminar ${entity}`,\n  update: entity => `Actualizar ${entity}`,\n  import: entity => `Importar ${entity}`\n};\nconst STEPPER_SOLICITUDES = {\n  add: 'Agregar solicitud',\n  end: 'Solicitud cargada, presione cerrar para terminar',\n  steps: [{\n    title: 'Crear solicitud',\n    description: 'Complete los siguientes campos con la información de la solicitud:'\n  }, {\n    title: 'Agregar prestaciones',\n    description: 'Sube la factura para agregar la prestación. Una vez subida, completa el formulario'\n  }, {\n    title: 'Guardar',\n    description: 'Confirma los datos para guardar la solicitud'\n  }, {\n    title: 'Agregar adjuntos(opcional)',\n    description: 'Agrega archivos adjuntos a las prestaciones de la lista'\n  }],\n  back: 'Atras',\n  next: 'Siguiente',\n  finish: 'Finalizar',\n  cancel: 'Cancelar',\n  close: 'Cerrar',\n  save: 'Guardar y terminar',\n  saveAndContinue: 'Guardar y agregar otra',\n  onSubmitSolicitud: {\n    title: 'Solicitud creada!',\n    message: 'Se creo nueva solicitud',\n    severity: 'success'\n  },\n  onSubmitFactura: {\n    title: 'Factura guardada!',\n    message: 'Se guardo la factura, completa los datos de la prestacion para continuar. Luego elige siguiente para terminar o guardar y agregar para seguir cargando prestaciones',\n    severity: 'success'\n  },\n  onSubmitPrestacion: count => ({\n    title: `${count}º Prestacion creada`,\n    message: `Se creo la ${count}º prestación`,\n    severity: 'success'\n  }),\n  onNewPrestacion: count => ({\n    title: 'Detalles prestación',\n    message: `Complete formulario con los detalles de la ${count}º prestación asociada a la solicitud`,\n    severity: 'info'\n  }),\n  onNewFactura: count => ({\n    title: 'Cargar factura',\n    message: `Suba el archivo de la factura correspondiente a la ${count}º prestación asociada a la solicitud`,\n    severity: 'info'\n  }),\n  onFinish: {\n    title: 'Proceso finalizado',\n    message: 'Solicitud completa, puede ver un resumen de los datos ingresados a continuación',\n    severity: 'info'\n  }\n};\nexport { STEPPER_SOLICITUDES, FORM_BUILDER, USERS, TABLE, NOMENCLADOR, MAIN_ENTITIES, ADMIN_ENTITIES, APP_NAME, DATE_FORMAT, LOADING, ERRORS, ACTIONS, SOLICITUDES, LOGIN, INFO, PRESTACIONES, CAPITULO, CUENTAS_TERCEROS, CUENTAS_JUDICIALES, AUDITORIAS //Used by generator, dont remove this line #exportconsts\n, CUPONES, LOTES, DELEGACIONES, AFILIADOS, PRESTADORES };","map":null,"metadata":{},"sourceType":"module"}