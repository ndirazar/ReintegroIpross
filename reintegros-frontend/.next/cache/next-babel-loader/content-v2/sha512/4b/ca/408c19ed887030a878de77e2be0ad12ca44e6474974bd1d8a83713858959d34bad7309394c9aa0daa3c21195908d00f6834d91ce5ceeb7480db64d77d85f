{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Box } from '@material-ui/core';\nimport React, { useEffect, useState } from 'react';\nimport useSWR from 'swr';\nimport UsersForm from './UsersForm';\nimport UsersList from './UsersList';\nimport { ERRORS, INFO, LOADING, USERS, DELEGACIONES } from '../../labels';\nimport { patch, send } from '../api-call/service';\nimport Loading from '../common/Loading';\nimport Alert from '../common/Alert';\nimport TableFilters from '../common/TableFilters';\nimport filterConfig from './FiltersConfig';\nimport { objToQueryString } from '../common/helpers';\nexport default function Users() {\n  const INITIAL_FILTER = {\n    page: 1,\n    size: 20,\n    delegaciones: [],\n    is_active: '',\n    groups: '',\n    usuario: ''\n  };\n  const {\n    0: filters,\n    1: setFilters\n  } = useState(_objectSpread({}, INITIAL_FILTER));\n  const {\n    0: filterQueryStr,\n    1: setFilterQueryStr\n  } = useState(objToQueryString(filters));\n  const {\n    data,\n    error: errorOnGet,\n    mutate\n  } = useSWR(`${USERS.route}/?` + filterQueryStr, {\n    revalidateOnFocus: false,\n    revalidateOnReconnect: false,\n    refreshWhenOffline: false,\n    refreshWhenHidden: false,\n    refreshInterval: 0\n  });\n  const {\n    data: grupos,\n    error: errorOnGetGroup\n  } = useSWR('api/groups/?page=1&size=1000', {\n    revalidateOnFocus: false,\n    revalidateOnReconnect: false,\n    refreshWhenOffline: false,\n    refreshWhenHidden: false,\n    refreshInterval: 0\n  });\n  const {\n    data: capitulos,\n    error: errorOnGetCapitulos\n  } = useSWR('api/capitulos/?page=1&size=1000', {\n    revalidateOnFocus: false,\n    revalidateOnReconnect: false,\n    refreshWhenOffline: false,\n    refreshWhenHidden: false,\n    refreshInterval: 0\n  });\n  const {\n    data: delegaciones,\n    error: errorOnGetDelegaciones\n  } = useSWR(`${DELEGACIONES.route}/?page=1&size=1000`, {\n    revalidateOnFocus: false,\n    revalidateOnReconnect: false,\n    refreshWhenOffline: false,\n    refreshWhenHidden: false,\n    refreshInterval: 0\n  });\n  const {\n    0: openForm,\n    1: setOpenForm\n  } = useState(false);\n  const {\n    0: error,\n    1: setError\n  } = useState(null);\n  const {\n    0: info,\n    1: setInfo\n  } = useState(null);\n  const {\n    0: showFilters,\n    1: setShowFilters\n  } = useState(false);\n\n  const handleSetDelegaciones = async (delegacionesSelected, userId) => {\n    try {\n      await send({\n        url: `api/usuarios/${userId}/actualizar-delegaciones/`,\n        data: {\n          delegaciones: delegacionesSelected\n        },\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      setInfo(INFO.setDelegaciones);\n      mutate();\n    } catch (error) {\n      setError('onSetDelegaciones');\n    }\n  };\n\n  const handleSetGroups = async (groupsSelected, userId) => {\n    try {\n      await send({\n        url: `api/usuarios/${userId}/actualizar-roles/`,\n        data: {\n          roles: groupsSelected\n        },\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      setInfo(INFO.setGroups);\n      mutate();\n    } catch (error) {\n      setError('onSetGroups');\n    }\n  };\n\n  const handleSetCapitulos = async (capitulosSelected, userId) => {\n    try {\n      await send({\n        url: `api/usuarios/${userId}/actualizar-capitulos/`,\n        data: {\n          capitulos: capitulosSelected\n        },\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      setInfo(INFO.setGroups);\n      mutate();\n    } catch (error) {\n      setError('onSetCapitulos');\n    }\n  };\n\n  const handleDeactivate = async (id, state) => {\n    try {\n      await patch('api/usuarios', {\n        is_active: !state\n      }, id);\n      mutate();\n    } catch (error) {\n      setError('onDeactivate');\n    }\n  };\n\n  const handleSync = async () => {\n    setError(null);\n    setError(null);\n\n    try {\n      var _res$data$count, _res$data;\n\n      const res = await send({\n        url: 'api/usuarios/ldap-sync-users',\n        method: 'POST'\n      });\n      setInfo(INFO.onSync(USERS.name, (_res$data$count = res === null || res === void 0 ? void 0 : (_res$data = res.data) === null || _res$data === void 0 ? void 0 : _res$data.count) !== null && _res$data$count !== void 0 ? _res$data$count : 0));\n      mutate();\n    } catch (error) {\n      setError('onSync');\n    }\n  };\n\n  const handleSetDelegacionPrincipal = async (delegacionId, userId) => {\n    try {\n      await send({\n        url: `api/usuarios/${userId}/actualizar-delegacion-principal/`,\n        data: {\n          delegacionPrincipal: delegacionId\n        },\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      setInfo(INFO.setDelegaciones);\n      mutate();\n    } catch (error) {\n      setError('onSetDelegacionPrincipal');\n    }\n  };\n\n  const handleChangePagination = pagination => {\n    setFilters(_objectSpread(_objectSpread({}, filters), {}, {\n      page: pagination.page,\n      size: pagination.pageSize\n    }));\n  };\n\n  const handleFilter = newFilters => {\n    setFilters(_objectSpread(_objectSpread({}, INITIAL_FILTER), newFilters));\n    setShowFilters(false);\n  };\n\n  const handleCancelFilter = () => {\n    setFilters(_objectSpread({}, INITIAL_FILTER));\n  };\n\n  const handleCloseFilter = () => {\n    setShowFilters(false);\n  };\n\n  useEffect(() => {\n    setFilterQueryStr(objToQueryString(filters));\n  }, [filters]);\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsxs(Box, {\n      p: 2,\n      m: 1,\n      border: \"1px solid #c4c4c4\",\n      style: {\n        position: 'relative'\n      },\n      children: [openForm && /*#__PURE__*/_jsx(UsersForm, {}), /*#__PURE__*/_jsx(UsersList, {\n        data: data,\n        delegaciones: delegaciones,\n        grupos: grupos,\n        capitulos: capitulos,\n        onUserDeactivate: handleDeactivate,\n        onhandleSetGroups: handleSetGroups,\n        onhandleSetCapitulos: handleSetCapitulos,\n        onhandleSetDelegaciones: handleSetDelegaciones,\n        onhandleSetDelegacionPrincipal: handleSetDelegacionPrincipal,\n        onSync: handleSync,\n        onPaginationChange: handleChangePagination,\n        onFilter: () => {\n          setShowFilters(!showFilters);\n        }\n      }), /*#__PURE__*/_jsx(TableFilters, {\n        config: filterConfig,\n        data: filters,\n        onSubmit: handleFilter,\n        onCancel: handleCancelFilter,\n        onClose: handleCloseFilter,\n        show: showFilters\n      })]\n    }), /*#__PURE__*/_jsx(Loading, {\n      loading: !data,\n      message: LOADING(USERS.name)\n    }), /*#__PURE__*/_jsx(Alert, {\n      open: errorOnGet || errorOnGetDelegaciones || errorOnGetGroup || errorOnGetCapitulos || error || info ? true : false,\n      severity: info ? 'success' : 'error',\n      message: info ? info : error ? ERRORS[error](USERS.name) : ERRORS.onGet(USERS.name),\n      autoHideAfter: 3000,\n      onClose: () => {\n        setError(null);\n        setInfo(null);\n      }\n    })]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}