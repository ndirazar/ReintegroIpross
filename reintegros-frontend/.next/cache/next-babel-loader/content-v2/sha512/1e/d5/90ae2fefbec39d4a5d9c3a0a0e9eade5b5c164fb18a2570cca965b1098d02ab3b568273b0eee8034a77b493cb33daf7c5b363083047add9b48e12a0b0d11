{"ast":null,"code":"import _defineProperty from \"/reintegros/reintegros-frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/reintegros/reintegros-frontend/components/builder/FieldAutocomplete.tsx\",\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// Third-party imports\nimport React, { useState, useCallback } from 'react';\nimport { FormControl, FormHelperText, TextField, CircularProgress, makeStyles, Tooltip, Typography } from '@material-ui/core';\nimport { Controller } from 'react-hook-form';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { IconButton } from '@material-ui/core'; // App imports\n\nimport { Help } from '@material-ui/icons'; // Props & other types\n\nvar useStyles = makeStyles(function (theme) {\n  return {\n    selectInput: {\n      position: 'relative',\n      '& .MuiInputBase-root': {\n        border: '1px solid #565656',\n        borderRadius: '6px',\n        paddingLeft: '10px',\n        marginTop: '15px',\n        '& .MuiInputBase-input': {\n          border: 'none'\n        }\n      },\n      '& >.MuiInput-underline:after': {\n        border: 'none'\n      },\n      '& .MuiAutocomplete-endAdornment': {\n        top: '0'\n      },\n      '& .MuiInputLabel-formControl': {\n        width: '100%'\n      }\n    },\n    tipoHelp: {\n      position: 'absolute',\n      top: '0',\n      right: '0',\n      padding: '5px',\n      '& .MuiSvgIcon-root': {\n        width: '.6em',\n        height: '.6em',\n        fontSize: '1.2em'\n      }\n    }\n  };\n}); // Component\n\nexport default function FormBuilderAutocomplete(_ref) {\n  _s();\n\n  var _form$getValues$field,\n      _this = this;\n\n  var field = _ref.field,\n      error = _ref.error,\n      form = _ref.form;\n\n  var _useState = useState(''),\n      query = _useState[0],\n      setQuery = _useState[1];\n\n  var _useState2 = useState(false),\n      open = _useState2[0],\n      setOpen = _useState2[1];\n\n  var _useState3 = useState(false),\n      loading = _useState3[0],\n      setLoading = _useState3[1];\n\n  var classes = useStyles();\n\n  var _useState4 = useState(Array.isArray(field.options) ? field.options : []),\n      options = _useState4[0],\n      setOptions = _useState4[1];\n\n  var optionsFunction = Array.isArray(field.options) ? null : field.options;\n\n  var _useState5 = useState(((_form$getValues$field = form.getValues()[field.name]) === null || _form$getValues$field === void 0 ? void 0 : _form$getValues$field.label) || ''),\n      inputText = _useState5[0],\n      setInputText = _useState5[1];\n\n  var _useState6 = useState(form.getValues()[field.name]),\n      currentValue = _useState6[0],\n      setCurrentValue = _useState6[1];\n\n  var updateOptions = useCallback(function () {\n    if (optionsFunction) {\n      setLoading(true);\n      optionsFunction(form, query).then(function (newOptions) {\n        setOptions(newOptions || []); // This fixes the bug in Autocomplete, that does not refresh the label\n        // const currentValue = form.getValues()[field.name];\n\n        if (currentValue) {\n          if (field.multiple) {\n            form.setValue(field.name, field.multiple ? [] : null);\n          } else {\n            form.setValue(field.name, currentValue);\n          }\n        }\n      })[\"finally\"](function () {\n        return setLoading(false);\n      });\n    }\n  }, [optionsFunction, form, query, field.multiple, field.name]); // If it has a value, an the option in not loaded, then load options\n\n  var shouldLoad; // const currentValue = form.getValues()[field.name];\n\n  if (field.multiple) {\n    shouldLoad = optionsFunction && currentValue && currentValue.length && !options.filter(function (o) {\n      return currentValue.indexOf(o.value) >= 0;\n    }).length;\n  } else {\n    shouldLoad = optionsFunction && currentValue && !options.find(function (o) {\n      return o.value === currentValue;\n    });\n  }\n\n  var _useState7 = useState(false),\n      mounted = _useState7[0],\n      setMounted = _useState7[1]; // Load option it is has data\n\n\n  React.useEffect(function () {\n    // let mounted = true;\n    if (!mounted && shouldLoad) {\n      updateOptions();\n      setMounted(true);\n      setCurrentValue(form.getValues()[field.name]);\n    }\n  }, [shouldLoad, updateOptions]); // Load option it is has data\n\n  React.useEffect(function () {\n    var fieldVal = '';\n\n    if (typeof form.getValues()[field.name] === 'object') {\n      var _form$getValues$field2;\n\n      fieldVal = (_form$getValues$field2 = form.getValues()[field.name]) === null || _form$getValues$field2 === void 0 ? void 0 : _form$getValues$field2.label;\n    } else if (typeof form.getValues()[field.name] === 'string') {\n      fieldVal = form.getValues()[field.name];\n    } else {\n      fieldVal = '';\n    } // setCurrentValue(form.getValues()[field.name]);\n\n\n    setInputText(fieldVal); // console.log({field: field.name, fieldVal, currentValue, inputText})\n  }, [field, form, setCurrentValue]);\n\n  var getInputTextValue = function getInputTextValue(props) {\n    var _props$value;\n\n    return ((_props$value = props.value) === null || _props$value === void 0 ? void 0 : _props$value.label) || inputText || '';\n  };\n\n  var getFieldLabel = function getFieldLabel() {\n    var _field$rules;\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: field.label + (((_field$rules = field.rules) === null || _field$rules === void 0 ? void 0 : _field$rules.required) === true ? ' *' : '')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, _this), !!field.tooltip && /*#__PURE__*/_jsxDEV(Tooltip, {\n        title: /*#__PURE__*/_jsxDEV(Typography, {\n          children: field.tooltip\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 20\n        }, _this),\n        placement: \"top-start\",\n        arrow: true,\n        children: /*#__PURE__*/_jsxDEV(IconButton, {\n          \"aria-label\": \"Help\",\n          className: classes.tipoHelp,\n          children: /*#__PURE__*/_jsxDEV(Help, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 15\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 13\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 11\n      }, _this)]\n    }, void 0, true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(FormControl, {\n    component: \"fieldset\",\n    error: !!error,\n    fullWidth: true,\n    children: [/*#__PURE__*/_jsxDEV(Controller // label={getFieldLabel()}\n    , {\n      defaultValue: currentValue,\n      render: function render(props) {\n        return /*#__PURE__*/_jsxDEV(Autocomplete, {\n          freeSolo: true,\n          open: open,\n          onOpen: function onOpen() {\n            setOpen(true);\n            updateOptions();\n          },\n          onClose: function onClose() {\n            return setOpen(false);\n          },\n          options: options,\n          disabled: field.disabled,\n          loading: loading,\n          multiple: field.multiple,\n          getOptionDisabled: function getOptionDisabled() {\n            return loading;\n          },\n          getOptionSelected: function getOptionSelected(option, value) {\n            return option.value === (!value ? '' : typeof value === 'string' ? value : value === null || value === void 0 ? void 0 : value.value);\n          },\n          onChange: function onChange(event, newValue) {\n            var _options$find;\n\n            var aux = newValue === null ? '' : newValue;\n            form.setValue(field.name, typeof newValue === 'string' ? aux : aux === null || aux === void 0 ? void 0 : aux.value);\n            setInputText(((_options$find = options.find(function (o) {\n              return o.value === (typeof newValue === 'string' ? aux : newValue === null || newValue === void 0 ? void 0 : newValue.value);\n            })) === null || _options$find === void 0 ? void 0 : _options$find.label) || '');\n            setCurrentValue(newValue); // setInputText(aux.label ? aux?.label : aux);\n\n            setQuery(aux.label ? aux === null || aux === void 0 ? void 0 : aux.label : aux);\n            field.onChange && field.onChange(aux, form);\n          },\n          getOptionLabel: function getOptionLabel(option) {\n            var _options$find2;\n\n            return ((_options$find2 = options.find(function (o) {\n              return o.value === (typeof option === 'string' ? option : option.value);\n            })) === null || _options$find2 === void 0 ? void 0 : _options$find2.label) || '';\n          },\n          value: props.value,\n          inputValue: getInputTextValue(props),\n          renderInput: function renderInput(params) {\n            return /*#__PURE__*/_jsxDEV(TextField, _objectSpread(_objectSpread({}, params), {}, {\n              // value={props.value}\n              error: !!error,\n              label: getFieldLabel(),\n              className: classes.selectInput,\n              fullWidth: true,\n              placeholder: field.placeholder,\n              onChange: function onChange(event) {\n                setInputText(event.target.value);\n\n                if (field.onUpdate) {\n                  field.onUpdate(event.target.value, form);\n                }\n\n                setQuery(event.target.value);\n                updateOptions();\n              },\n              InputProps: _objectSpread(_objectSpread({}, params.InputProps), {}, {\n                endAdornment: /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [loading ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n                    color: \"inherit\",\n                    size: 20\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 230,\n                    columnNumber: 34\n                  }, _this) : null, params.InputProps.endAdornment]\n                }, void 0, true)\n              }),\n              helperText: field.help || ''\n            }), void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 15\n            }, _this);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 11\n        }, _this);\n      },\n      id: field.name,\n      name: field.name,\n      rules: field.rules,\n      noOptionsText: field.noOptionsText ? field.noOptionsText : 'No hay opciones',\n      control: form.control,\n      onChange: function onChange(args) {\n        var _field$onChange;\n\n        var value = !args[1] ? null : field.multiple ? args[1].map(function (v) {\n          return v.value || v;\n        }) : args[1].value;\n        (_field$onChange = field.onChange) === null || _field$onChange === void 0 ? void 0 : _field$onChange.call(field, value, form);\n        return value;\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(FormHelperText, {\n      className: 'Mui-error',\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 164,\n    columnNumber: 5\n  }, this);\n}\n\n_s(FormBuilderAutocomplete, \"aM58POpR9UCcGMP60URPbRhpO/Y=\", false, function () {\n  return [useStyles];\n});\n\n_c = FormBuilderAutocomplete;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormBuilderAutocomplete\");","map":{"version":3,"sources":["/reintegros/reintegros-frontend/components/builder/FieldAutocomplete.tsx"],"names":["React","useState","useCallback","FormControl","FormHelperText","TextField","CircularProgress","makeStyles","Tooltip","Typography","Controller","Autocomplete","IconButton","Help","useStyles","theme","selectInput","position","border","borderRadius","paddingLeft","marginTop","top","width","tipoHelp","right","padding","height","fontSize","FormBuilderAutocomplete","field","error","form","query","setQuery","open","setOpen","loading","setLoading","classes","Array","isArray","options","setOptions","optionsFunction","getValues","name","label","inputText","setInputText","currentValue","setCurrentValue","updateOptions","then","newOptions","multiple","setValue","shouldLoad","length","filter","o","indexOf","value","find","mounted","setMounted","useEffect","fieldVal","getInputTextValue","props","getFieldLabel","rules","required","tooltip","disabled","option","event","newValue","aux","onChange","params","placeholder","target","onUpdate","InputProps","endAdornment","help","noOptionsText","control","args","map","v"],"mappings":"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","sourcesContent":["// Third-party imports\nimport React, { useState, useCallback } from 'react';\nimport {\n  FormControl,\n  FormHelperText,\n  TextField,\n  CircularProgress,\n  makeStyles,\n  Tooltip,\n  Typography,\n} from '@material-ui/core';\nimport { Controller, FieldName, UseFormMethods } from 'react-hook-form';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { IconButton } from '@material-ui/core';\n\n// App imports\nimport { FormField, OptionsField } from '.';\nimport { Help } from '@material-ui/icons';\n\n// Props & other types\ntype Props<T> = {\n  field: FormField<T>;\n  error: string;\n  rules: any;\n  form: UseFormMethods<Partial<T>>;\n};\n\nconst useStyles = makeStyles((theme) => ({\n  selectInput: {\n    position: 'relative',\n    '& .MuiInputBase-root': {\n      border: '1px solid #565656',\n      borderRadius: '6px',\n      paddingLeft: '10px',\n      marginTop: '15px',\n      '& .MuiInputBase-input': {\n        border: 'none',\n      },\n    },\n    '& >.MuiInput-underline:after': {\n      border: 'none',\n    },\n    '& .MuiAutocomplete-endAdornment': {\n      top: '0',\n    },\n    '& .MuiInputLabel-formControl': {\n      width: '100%',\n    },\n  },\n  tipoHelp: {\n    position: 'absolute',\n    top: '0',\n    right: '0',\n    padding: '5px',\n    '& .MuiSvgIcon-root': {\n      width: '.6em',\n      height: '.6em',\n      fontSize: '1.2em',\n    },\n  },\n}));\n// Component\nexport default function FormBuilderAutocomplete<T>({ field, error, form }: Props<T>) {\n  const [query, setQuery] = useState('');\n  const [open, setOpen] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const classes = useStyles();\n  const [options, setOptions] = useState<OptionsField>(\n    Array.isArray(field.options) ? field.options : [],\n  );\n  const optionsFunction: (\n    form: UseFormMethods<Partial<T>>,\n    query: string,\n  ) => Promise<OptionsField> = Array.isArray(field.options) ? null : field.options;\n  const [inputText, setInputText] = useState(form.getValues()[field.name]?.label || '');\n  const [currentValue, setCurrentValue] = useState(form.getValues()[field.name]);\n\n  const updateOptions = useCallback(() => {\n    if (optionsFunction) {\n      setLoading(true);\n      optionsFunction(form, query)\n        .then((newOptions) => {\n          setOptions(newOptions || []);\n          // This fixes the bug in Autocomplete, that does not refresh the label\n          // const currentValue = form.getValues()[field.name];\n\n          if (currentValue) {\n            if (field.multiple) {\n              form.setValue(field.name as any, (field.multiple ? [] : null) as any);\n            } else {\n              form.setValue(field.name as any, currentValue);\n            }\n          }\n        })\n        .finally(() => setLoading(false));\n    }\n  }, [optionsFunction, form, query, field.multiple, field.name]);\n\n  // If it has a value, an the option in not loaded, then load options\n  let shouldLoad: boolean;\n  // const currentValue = form.getValues()[field.name];\n  if (field.multiple) {\n    shouldLoad =\n      optionsFunction &&\n      currentValue &&\n      currentValue.length &&\n      !options.filter((o) => currentValue.indexOf(o.value) >= 0).length;\n  } else {\n    shouldLoad = optionsFunction && currentValue && !options.find((o) => o.value === currentValue);\n  }\n\n  const [mounted, setMounted] = useState(false);\n  // Load option it is has data\n  React.useEffect(() => {\n    // let mounted = true;\n    if (!mounted && shouldLoad) {\n      updateOptions();\n      setMounted(true);\n      setCurrentValue(form.getValues()[field.name]);\n    }\n  }, [shouldLoad, updateOptions]);\n\n  // Load option it is has data\n  React.useEffect(() => {\n    let fieldVal = '';\n\n    if (typeof form.getValues()[field.name] === 'object') {\n      fieldVal = form.getValues()[field.name]?.label;\n    } else if (typeof form.getValues()[field.name] === 'string') {\n      fieldVal = form.getValues()[field.name];\n    } else {\n      fieldVal = '';\n    }\n\n    // setCurrentValue(form.getValues()[field.name]);\n    setInputText(fieldVal);\n    // console.log({field: field.name, fieldVal, currentValue, inputText})\n  }, [field, form, setCurrentValue]);\n\n  const getInputTextValue = (props) => {\n    return props.value?.label || inputText || '';\n  };\n\n  const getFieldLabel = () => {\n    return (\n      <>\n        <span>{field.label + (field.rules?.required === true ? ' *' : '')}</span>\n        {!!field.tooltip && (\n          <Tooltip\n            title={<Typography>{field.tooltip}</Typography>}\n            placement=\"top-start\"\n            arrow={true}\n          >\n            <IconButton aria-label=\"Help\" className={classes.tipoHelp}>\n              <Help />\n            </IconButton>\n          </Tooltip>\n        )}\n      </>\n    );\n  };\n\n  return (\n    <FormControl component=\"fieldset\" error={!!error} fullWidth>\n      <Controller\n        // label={getFieldLabel()}\n        defaultValue={currentValue}\n        render={(props) => (\n          <Autocomplete\n            freeSolo={true}\n            open={open}\n            onOpen={() => {\n              setOpen(true);\n              updateOptions();\n            }}\n            onClose={() => setOpen(false)}\n            options={options}\n            disabled={field.disabled}\n            loading={loading}\n            multiple={field.multiple}\n            getOptionDisabled={() => loading}\n            getOptionSelected={(option, value) =>\n              option.value ===\n              (!value ? '' : typeof value === 'string' ? (value as any) : value?.value)\n            }\n            onChange={(event, newValue) => {\n              const aux = newValue === null ? '' : (newValue as any);\n              form.setValue(\n                field.name as any,\n                typeof newValue === 'string' ? aux : (aux?.value as string),\n              );\n              setInputText(\n                options.find(\n                  (o) => o.value === (typeof newValue === 'string' ? aux : newValue?.value),\n                )?.label || '',\n              );\n              setCurrentValue(newValue);\n              // setInputText(aux.label ? aux?.label : aux);\n              setQuery(aux.label ? aux?.label : aux);\n              field.onChange && field.onChange(aux, form);\n            }}\n            getOptionLabel={(option) =>\n              options.find(\n                (o) => o.value === (typeof option === 'string' ? (option as string) : option.value),\n              )?.label || ''\n            }\n            value={props.value}\n            inputValue={getInputTextValue(props)}\n            renderInput={(params) => (\n              <TextField\n                {...params}\n                // value={props.value}\n                error={!!error}\n                label={getFieldLabel()}\n                className={classes.selectInput}\n                fullWidth\n                placeholder={field.placeholder}\n                onChange={(event) => {\n                  setInputText(event.target.value);\n                  if (field.onUpdate) {\n                    field.onUpdate(event.target.value, form);\n                  }\n                  setQuery(event.target.value);\n                  updateOptions();\n                }}\n                InputProps={{\n                  ...params.InputProps,\n                  endAdornment: (\n                    <>\n                      {loading ? <CircularProgress color=\"inherit\" size={20} /> : null}\n                      {params.InputProps.endAdornment}\n                    </>\n                  ),\n                }}\n                helperText={field.help || ''}\n              />\n            )}\n          />\n        )}\n        id={field.name}\n        name={field.name}\n        rules={field.rules}\n        noOptionsText={field.noOptionsText ? field.noOptionsText : 'No hay opciones'}\n        control={form.control}\n        onChange={(args) => {\n          const value = !args[1]\n            ? null\n            : field.multiple\n            ? args[1].map((v) => v.value || v)\n            : args[1].value;\n          field.onChange?.(value, form);\n          return value;\n        }}\n      />\n      {error && <FormHelperText className={'Mui-error'}>{error}</FormHelperText>}\n    </FormControl>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}