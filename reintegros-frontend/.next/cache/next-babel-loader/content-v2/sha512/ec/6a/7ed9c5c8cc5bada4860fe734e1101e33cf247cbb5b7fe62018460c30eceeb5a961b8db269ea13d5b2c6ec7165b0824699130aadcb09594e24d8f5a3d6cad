{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Box, Typography, Grid, makeStyles } from '@material-ui/core';\nimport React, { useState } from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport FieldRender from '../builder/FieldRender';\nimport configSolicitudes from './FormConfig';\nimport Cookies from 'universal-cookie';\nimport AfiliadosSearch from '../afiliados/AfiliadosSearch';\nimport { SOLICITUDES } from '../../labels';\nimport { FieldType } from '../builder/FormField';\nimport { send } from '../api-call/service';\nexport const FormSolicitud = ({\n  formContent,\n  step\n}) => {\n  const methods = useFormContext();\n  const {\n    0: afiliado,\n    1: setAfiliado\n  } = useState(null);\n  const cookies = new Cookies();\n  const user = cookies.get('user');\n  const {\n    0: dataCuenta,\n    1: setDataCuenta\n  } = useState(null);\n  const {\n    0: errorCuenta,\n    1: setErrorcuenta\n  } = useState(false);\n\n  const handleSelectAfiliado = af => {\n    methods.setValue('solicitud.afiliado', af);\n    setAfiliado(af);\n  };\n\n  const useStyles = makeStyles(theme => ({\n    afiliadoDetail: {\n      paddingTop: '15px',\n      '& h6': {\n        fontSize: '14px'\n      },\n      paddingLeft: '5px'\n    },\n    tipoCuenta: {\n      padding: '20px'\n    }\n  }));\n  const classes = useStyles();\n\n  const options = () => {\n    var options = [];\n\n    if (afiliado !== null && afiliado !== void 0 && afiliado.cbu) {\n      options.push({\n        label: 'Cuenta propia del afiliado',\n        value: 'cuentaAfiliado'\n      });\n    }\n\n    if (afiliado !== null && afiliado !== void 0 && afiliado.cuentajudicial) {\n      options.push({\n        label: 'Cuenta judicial',\n        value: 'cuentaJudicial'\n      });\n    }\n\n    if (afiliado !== null && afiliado !== void 0 && afiliado.cuentadeterceros && (afiliado === null || afiliado === void 0 ? void 0 : afiliado.estadoCuentaDeTerceros) == 'aprobada') {\n      options.push({\n        label: 'Cuenta de tercercos',\n        value: 'cuentaDeTerceros'\n      });\n    }\n\n    return options;\n  };\n\n  const tipoConfig = {\n    name: 'tipo',\n    type: FieldType.radio,\n    label: 'Judicializada?',\n    styling: {\n      columns: 3\n    },\n    rules: {\n      required: true\n    },\n    options: [{\n      value: 'judicial',\n      label: 'Si'\n    }, {\n      value: 'noJudicial',\n      label: 'No'\n    }],\n    onChange: (value, form) => {\n      console.log(value);\n    }\n  };\n  const cuentaConfig = {\n    name: 'cuenta',\n    type: FieldType.options,\n    label: SOLICITUDES.messages.tipoForm,\n    options: options(),\n    onChange: async (value, form) => {\n      if (value === 'cuentaAfiliado') {\n        setErrorcuenta(false);\n        setDataCuenta({\n          nombre: afiliado === null || afiliado === void 0 ? void 0 : afiliado.nombre,\n          apellido: afiliado === null || afiliado === void 0 ? void 0 : afiliado.apelido,\n          cbu: afiliado === null || afiliado === void 0 ? void 0 : afiliado.cbu,\n          cuitCuil: afiliado === null || afiliado === void 0 ? void 0 : afiliado.cuitCuil\n        });\n      }\n\n      if (value === 'cuentaJudicial') {\n        setErrorcuenta(false);\n\n        try {\n          const cuentaJudicial = await send({\n            url: `api/cuenta-judicial/${afiliado === null || afiliado === void 0 ? void 0 : afiliado.cuentajudicial}`,\n            method: 'GET',\n            headers: {\n              'Content-Type': 'application/json'\n            }\n          });\n          setDataCuenta({\n            nombre: cuentaJudicial === null || cuentaJudicial === void 0 ? void 0 : cuentaJudicial.data.nombre,\n            apellido: cuentaJudicial === null || cuentaJudicial === void 0 ? void 0 : cuentaJudicial.data.apellido,\n            cbu: cuentaJudicial === null || cuentaJudicial === void 0 ? void 0 : cuentaJudicial.data.cbu,\n            cuitCuil: cuentaJudicial === null || cuentaJudicial === void 0 ? void 0 : cuentaJudicial.data.cuitCuil\n          });\n        } catch (error) {\n          setErrorcuenta(true);\n        }\n      }\n\n      if (value === 'cuentaDeTerceros') {\n        setErrorcuenta(false);\n\n        try {\n          const cuentaDeTerceros = await send({\n            url: `api/cuenta-de-terceros/${afiliado === null || afiliado === void 0 ? void 0 : afiliado.cuentadeterceros}`,\n            method: 'GET',\n            headers: {\n              'Content-Type': 'application/json'\n            }\n          });\n          setDataCuenta({\n            nombre: cuentaDeTerceros === null || cuentaDeTerceros === void 0 ? void 0 : cuentaDeTerceros.data.nombre,\n            apellido: cuentaDeTerceros === null || cuentaDeTerceros === void 0 ? void 0 : cuentaDeTerceros.data.apellido,\n            cbu: cuentaDeTerceros === null || cuentaDeTerceros === void 0 ? void 0 : cuentaDeTerceros.data.cbu,\n            cuitCuil: cuentaDeTerceros === null || cuentaDeTerceros === void 0 ? void 0 : cuentaDeTerceros.data.cuitCuil\n          });\n        } catch (error) {\n          setErrorcuenta(true);\n        }\n      }\n    },\n    styling: {\n      columns: 3\n    },\n    rules: {\n      required: true\n    },\n    disable: true\n  };\n  const config = [tipoConfig, cuentaConfig, ...configSolicitudes];\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsxs(Box, {\n      children: [/*#__PURE__*/_jsx(Typography, {\n        variant: \"h5\",\n        gutterBottom: true,\n        children: step.title\n      }), /*#__PURE__*/_jsx(Typography, {\n        variant: \"subtitle1\",\n        gutterBottom: true,\n        children: step.description\n      })]\n    }), /*#__PURE__*/_jsx(\"form\", {\n      children: /*#__PURE__*/_jsxs(Grid, {\n        container: true,\n        spacing: 2,\n        children: [/*#__PURE__*/_jsx(AfiliadosSearch, {\n          form: methods,\n          formContent: formContent,\n          onSelect: handleSelectAfiliado\n        }), /*#__PURE__*/_jsxs(Grid, {\n          container: true,\n          item: true,\n          spacing: 2,\n          children: [/*#__PURE__*/_jsx(\"div\", {\n            className: classes.tipoCuenta,\n            children: /*#__PURE__*/_jsx(Grid, {\n              item: true,\n              md: 3,\n              children: /*#__PURE__*/_jsx(FieldRender, {\n                field: tipoConfig,\n                form: methods,\n                data: []\n              })\n            })\n          }), /*#__PURE__*/_jsx(Grid, {\n            item: true,\n            md: 3,\n            children: /*#__PURE__*/_jsx(FieldRender, {\n              field: cuentaConfig,\n              form: methods,\n              data: []\n            })\n          }), /*#__PURE__*/_jsx(Grid, {\n            children: errorCuenta ? /*#__PURE__*/_jsx(\"div\", {\n              className: classes.afiliadoDetail,\n              children: /*#__PURE__*/_jsx(Typography, {\n                component: \"h6\",\n                color: \"error\",\n                children: SOLICITUDES.messages.errorAlObtenerCuenta\n              })\n            }) : dataCuenta && /*#__PURE__*/_jsxs(\"div\", {\n              className: classes.afiliadoDetail,\n              children: [/*#__PURE__*/_jsxs(Typography, {\n                component: \"h6\",\n                children: [/*#__PURE__*/_jsx(\"strong\", {\n                  children: \"Nombre: \"\n                }), \" \", dataCuenta.nombre, \" \", dataCuenta.apellido]\n              }), /*#__PURE__*/_jsxs(Typography, {\n                component: \"h6\",\n                children: [/*#__PURE__*/_jsx(\"strong\", {\n                  children: \"Cbu: \"\n                }), \" \", dataCuenta.cbu]\n              }), /*#__PURE__*/_jsxs(Typography, {\n                component: \"h6\",\n                children: [/*#__PURE__*/_jsx(\"strong\", {\n                  children: \"Cuit/Cuil: \"\n                }), \" \", dataCuenta.cuitCuil]\n              })]\n            })\n          })]\n        }), configSolicitudes.map((field, index) => {\n          var _field$styling, _user$delegacionPrinc;\n\n          return /*#__PURE__*/_jsx(Grid, {\n            item: true,\n            md: ((_field$styling = field.styling) === null || _field$styling === void 0 ? void 0 : _field$styling.columns) || 12,\n            children: /*#__PURE__*/_jsx(FieldRender, {\n              field: field,\n              form: methods,\n              data: {\n                afiliado: afiliado,\n                estadoActual: 'sinPagos',\n                delegacion: (user === null || user === void 0 ? void 0 : (_user$delegacionPrinc = user.delegacionPrincipal) === null || _user$delegacionPrinc === void 0 ? void 0 : _user$delegacionPrinc.id) || null,\n                tipo: 'noJudicial',\n                fechaAlta: new Date().toISOString()\n              }\n            })\n          }, index);\n        })]\n      })\n    })]\n  });\n};","map":null,"metadata":{},"sourceType":"module"}