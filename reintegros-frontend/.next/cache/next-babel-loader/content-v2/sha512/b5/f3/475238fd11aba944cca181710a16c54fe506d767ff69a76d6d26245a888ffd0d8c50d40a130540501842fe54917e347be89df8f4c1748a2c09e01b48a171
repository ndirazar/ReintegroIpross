{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { Box } from '@material-ui/core';\nimport React, { useEffect, useState } from 'react';\nimport { NOMENCLADOR, PRESTACIONES } from '../../../labels';\nimport AttachMoneyOutlinedIcon from '@material-ui/icons/AttachMoneyOutlined';\nimport useStyles from '../Stepper.styles';\nimport Form, { FieldType } from '../../builder';\nimport { subDays } from 'date-fns';\nimport { get } from '../../api-call/service';\nexport const FormEditPrestaciones = ({\n  prestacion,\n  submit\n}) => {\n  const classes = useStyles();\n  const {\n    0: fechaDesde,\n    1: setFechaDesde\n  } = useState(new Date());\n  const {\n    0: prestaciones,\n    1: setPrestaciones\n  } = useState([]);\n  const {\n    0: nomenclador,\n    1: setNomenclador\n  } = useState([]);\n  const {\n    0: prestadores,\n    1: setPrestadores\n  } = useState([]);\n  const configPrestaciones = [{\n    name: 'capitulo',\n    type: FieldType.options,\n    label: PRESTACIONES.fields.capitulo,\n    options: async () => {\n      return (await get('api/capitulos/')).data.results.map(c => ({\n        value: c.capitulo,\n        label: `${c.capitulo} - ${c.descripcion}`\n      }));\n    },\n    styling: {\n      columns: 6\n    },\n    rules: {\n      required: true\n    },\n    onChange: (val, form) => {\n      form.setValue('nomenclador', '');\n      form.setValue('modalidad', '');\n      form.setValue('cobertura', '');\n      form.setValue('estadoActual', '');\n      form.setValue('prestador', '');\n      form.setValue('valorIprossNomenclador', '');\n      form.setValue('montoTotal', '');\n      form.setValue('valorPrestacion', '');\n      form.setValue('montoReintegrar', '');\n      form.setValue('cantidad', '');\n      form.setValue('unidad', '');\n      form.setValue('periodo', '');\n      form.setValue('fechaPractica', '');\n      form.setValue('fechaPracticaHasta', '');\n    }\n  }, {\n    name: 'nomenclador',\n    type: FieldType.options,\n    label: PRESTACIONES.fields.nomenclador,\n    options: async (form, query) => {\n      let cap = form.getValues()['capitulo'] || '';\n\n      if (!cap) {\n        return [];\n      } else if (typeof cap === 'object') {\n        cap = cap.value;\n      }\n\n      const nom = (await get('/api/nomenclador/?estado=activo&capitulo=' + cap)).data.results;\n      setNomenclador(nom);\n      return nom.map(n => {\n        var _n$capitulo, _n$capitulo2;\n\n        return {\n          value: n.id,\n          label: `${n.codigo}-${n.descripcion} (${(_n$capitulo = n.capitulo) === null || _n$capitulo === void 0 ? void 0 : _n$capitulo.capitulo}-${(_n$capitulo2 = n.capitulo) === null || _n$capitulo2 === void 0 ? void 0 : _n$capitulo2.descripcion})`\n        };\n      });\n    },\n    onChange: (value, form) => {\n      const item = nomenclador.find(elem => elem.id === parseInt(value === null || value === void 0 ? void 0 : value.value));\n\n      if (nomenclador.length && item) {\n        form.setValue('valorIprossNomenclador', item === null || item === void 0 ? void 0 : item.valorIpross);\n        const capitulo = form.getValues()['capitulo'];\n        let cobertura = 0;\n\n        if (capitulo === 40 || capitulo === 41 || capitulo === 43) {\n          cobertura = 90;\n        } else {\n          const isFullCobertura = prestaciones.find(p => p.capitulo === 40 || p.capitulo === 41 || p.capitulo === 43);\n\n          if (isFullCobertura) {\n            cobertura = 100;\n          } else {\n            cobertura = item.modalidadPrestacion === 'ambulatorio' ? 80 : 90;\n          }\n        }\n\n        const montoTotal = parseFloat(item === null || item === void 0 ? void 0 : item.valorIpross);\n        const montoReintegrar = (montoTotal - cobertura * montoTotal / 100).toFixed(2);\n        form.setValue('montoReintegrar', montoReintegrar, {\n          shouldValidate: true,\n          shouldDirty: true\n        });\n        form.setValue('modalidad', item.modalidadPrestacion, {\n          shouldValidate: true,\n          shouldDirty: true\n        });\n        form.setValue('cobertura', cobertura, {\n          shouldValidate: true,\n          shouldDirty: true\n        });\n        form.setValue('estadoActual', 'enCurso');\n        form.setValue('cantidad', 1);\n        form.setValue('unidad', (item === null || item === void 0 ? void 0 : item.unidad) || 'unidades');\n        form.setValue('montoTotal', montoTotal.toFixed(2));\n      }\n    },\n    styling: {\n      columns: 12\n    },\n    rules: {\n      required: true\n    }\n  }, {\n    name: 'modalidad',\n    type: FieldType.options,\n    label: PRESTACIONES.fields.modalidad,\n    options: NOMENCLADOR.optionsModalidadPresentacion,\n    styling: {\n      columns: 6\n    },\n    rules: {\n      required: true\n    },\n    disabled: true\n  }, {\n    name: 'cobertura',\n    type: FieldType.string,\n    label: PRESTACIONES.fields.cobertura,\n    styling: {\n      columns: 6\n    },\n    rules: {\n      required: true\n    },\n    disabled: true,\n    prefix: /*#__PURE__*/_jsx(_Fragment, {\n      children: \"%\"\n    })\n  }, {\n    name: 'estadoActual',\n    type: FieldType.options,\n    label: PRESTACIONES.fields['estadoActual'],\n    options: PRESTACIONES.optionsEstadoActual,\n    styling: {\n      columns: 6\n    },\n    rules: {\n      required: true\n    },\n    disabled: true\n  }, {\n    name: 'prestador',\n    type: FieldType.options,\n    label: PRESTACIONES.fields.prestador,\n    options: async () => {\n      return prestadores;\n    },\n    onUpdate: async (val, form) => {\n      if (val === '') {\n        setPrestadores([]);\n        return;\n      }\n\n      const pres = (await get(`api/prestadores/?profEstado=alta&matricula=${val}`)).data.results.map(p => ({\n        value: p.id,\n        label: `${p.matricula} - ${p.nombre} ${p.apellido}`\n      }));\n      setPrestadores(pres);\n    },\n    styling: {\n      columns: 6\n    },\n    rules: {\n      required: true\n    }\n  }, {\n    name: 'br',\n    type: FieldType.br,\n    label: ''\n  }, {\n    name: 'valorIprossNomenclador',\n    type: FieldType.string,\n    label: PRESTACIONES.fields.valorIprossNomenclador,\n    styling: {\n      columns: 3\n    },\n    rules: {\n      required: true\n    },\n    disabled: true,\n    prefix: /*#__PURE__*/_jsx(AttachMoneyOutlinedIcon, {})\n  }, {\n    name: 'montoTotal',\n    type: FieldType.string,\n    label: PRESTACIONES.fields.montoTotal,\n    styling: {\n      columns: 3\n    },\n    rules: {\n      min: 1,\n      required: true\n    },\n    disabled: true\n  }, {\n    name: 'valorPrestacion',\n    type: FieldType.float,\n    label: PRESTACIONES.fields.valorPrestacion,\n    styling: {\n      columns: 3\n    },\n    rules: {\n      required: true\n    },\n    prefix: /*#__PURE__*/_jsx(AttachMoneyOutlinedIcon, {})\n  }, {\n    name: 'montoReintegrar',\n    type: FieldType.string,\n    label: PRESTACIONES.fields.montoReintegrar,\n    styling: {\n      columns: 3\n    },\n    rules: {\n      required: true\n    },\n    disabled: true,\n    prefix: /*#__PURE__*/_jsx(AttachMoneyOutlinedIcon, {})\n  }, {\n    name: 'cantidad',\n    type: FieldType.int,\n    label: PRESTACIONES.fields.cantidad,\n    styling: {\n      columns: 6\n    },\n    rules: {\n      min: 1,\n      required: true\n    },\n    onChange: (val, form) => {\n      const valorIpross = form.getValues()['valorIprossNomenclador'];\n      const montoTotal = valorIpross * val;\n      form.setValue('montoTotal', montoTotal.toFixed(2));\n      const cobertura = form.getValues()['cobertura'];\n      const montoReintegrar = (montoTotal * parseFloat(cobertura) / 100).toFixed(2);\n      form.setValue('montoReintegrar', montoReintegrar);\n    }\n  }, {\n    name: 'unidad',\n    type: FieldType.string,\n    label: PRESTACIONES.fields.unidad,\n    styling: {\n      columns: 6\n    },\n    disabled: true\n  }, {\n    name: 'periodo',\n    type: FieldType.options,\n    options: NOMENCLADOR.optionsPeriodoTope,\n    label: PRESTACIONES.fields.periodo,\n    styling: {\n      columns: 6\n    },\n    rules: {\n      required: true\n    }\n  }];\n  const {\n    0: formConfig,\n    1: setFormConfig\n  } = useState(configPrestaciones);\n  const fechaField = {\n    name: 'fechaPractica',\n    type: FieldType.date,\n    label: PRESTACIONES.fields.fechaPractica,\n    styling: {\n      columns: 6\n    },\n    rules: {\n      required: true,\n      min: subDays(new Date(), 60).toString(),\n      max: new Date().toString()\n    },\n    onChange: (val, form) => {\n      setFechaDesde(val);\n    }\n  };\n  const fechaHastaField = {\n    name: 'fechaPracticaHasta',\n    type: FieldType.date,\n    label: PRESTACIONES.fields.fechaPracticaHasta,\n    styling: {\n      columns: 6\n    },\n    rules: {\n      required: true,\n      min: fechaDesde.toString() // max: addDays(fechaDesde, 60).toString(),\n\n    }\n  };\n  const dateSelect = {\n    name: 'isDateRange',\n    type: FieldType.options,\n    label: 'Fecha / Rango',\n    options: PRESTACIONES.optionsDate,\n    styling: {\n      columns: 6\n    },\n    onChange: (val, form) => {\n      let c = [...configPrestaciones, dateSelect, fechaField];\n\n      if (val === 'range') {\n        c.push(fechaHastaField);\n      }\n\n      setFormConfig(c);\n    }\n  };\n  useEffect(() => {\n    const conf = [...formConfig, dateSelect];\n    setFormConfig(conf);\n  }, [prestacion, setFormConfig]);\n  useEffect(() => {\n    let c = [...configPrestaciones, dateSelect, fechaField];\n\n    if (prestacion.isDateRange === 'range') {\n      c.push(fechaHastaField);\n    }\n\n    setFormConfig(c);\n  }, [fechaDesde]);\n\n  const handleAddPrestacion = (continuar = true) => {};\n\n  const handleCancelPrestacion = () => {\n    clearForm();\n  };\n\n  const clearForm = () => {\n    let newData = {};\n    formConfig.forEach(field => {\n      newData[field.name] = '';\n    });\n  };\n\n  const handleSubmitPrestacion = data => {\n    console.log(data);\n  };\n\n  return /*#__PURE__*/_jsx(Box, {\n    margin: 3,\n    children: /*#__PURE__*/_jsx(Form, {\n      config: configPrestaciones,\n      data: prestacion,\n      onSubmit: handleSubmitPrestacion,\n      onCancel: () => {\n        handleCancelPrestacion();\n      }\n    })\n  });\n};","map":null,"metadata":{},"sourceType":"module"}