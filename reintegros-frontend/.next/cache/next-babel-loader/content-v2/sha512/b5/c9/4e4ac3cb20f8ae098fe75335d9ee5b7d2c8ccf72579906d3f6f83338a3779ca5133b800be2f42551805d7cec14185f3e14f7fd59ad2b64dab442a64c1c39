{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/reintegros/reintegros-frontend/components/builder/FieldAutocomplete.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// Third-party imports\nimport React, { useState, useCallback } from 'react';\nimport { FormControl, FormHelperText, TextField, CircularProgress } from '@material-ui/core';\nimport { Controller } from 'react-hook-form';\nimport Autocomplete from '@material-ui/lab/Autocomplete'; // App imports\n\n// Component\nexport default function FormBuilderAutocomplete({\n  field,\n  error,\n  form\n}) {\n  const {\n    0: query,\n    1: setQuery\n  } = useState('');\n  const {\n    0: open,\n    1: setOpen\n  } = useState(false);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: options,\n    1: setOptions\n  } = useState(Array.isArray(field.options) ? field.options : []);\n  const optionsFunction = Array.isArray(field.options) ? null : field.options;\n  const updateOptions = useCallback(() => {\n    if (optionsFunction) {\n      setLoading(true);\n      optionsFunction(form, query).then(newOptions => {\n        setOptions(newOptions || []); // This fixes the bug in Autocomplete, that does not refresh the label\n\n        const currentValue = form.getValues()[field.name];\n\n        if (currentValue) {\n          form.setValue(field.name, field.multiple ? [] : null);\n          form.setValue(field.name, currentValue);\n        }\n      }).finally(() => setLoading(false));\n    }\n  }, [optionsFunction, form, query, field.multiple, field.name]); // If it has a value, an the option in not loaded, then load options\n\n  let shouldLoad;\n  const currentValue = form.getValues()[field.name];\n\n  if (field.multiple) {\n    shouldLoad = optionsFunction && currentValue && currentValue.length && !options.filter(o => currentValue.indexOf(o.value) >= 0).length;\n  } else {\n    shouldLoad = optionsFunction && currentValue && !options.find(o => o.value === currentValue);\n  } // Load option it is has data\n\n\n  React.useEffect(() => {\n    let mounted = true;\n\n    if (mounted && shouldLoad) {\n      updateOptions();\n    }\n\n    return () => mounted = false;\n  }, [shouldLoad, updateOptions]);\n  return /*#__PURE__*/_jsxDEV(FormControl, {\n    component: \"fieldset\",\n    error: !!error,\n    fullWidth: true,\n    children: [/*#__PURE__*/_jsxDEV(Controller, {\n      label: field.label,\n      render: props => /*#__PURE__*/_jsxDEV(Autocomplete, {\n        open: open,\n        onOpen: () => {\n          setOpen(true);\n          updateOptions();\n        },\n        onClose: () => setOpen(false),\n        options: options,\n        disabled: field.disabled,\n        loading: loading,\n        multiple: field.multiple,\n        getOptionDisabled: () => loading,\n        getOptionSelected: (option, value) => option.value === (!value ? '' : typeof value === 'string' ? value : value === null || value === void 0 ? void 0 : value.value),\n        onChange: (event, newValue) => {\n          var _field$onChange;\n\n          const aux = newValue;\n          form.setValue(field.name, typeof newValue === 'string' ? newValue : aux === null || aux === void 0 ? void 0 : aux.value);\n          (_field$onChange = field.onChange) === null || _field$onChange === void 0 ? void 0 : _field$onChange.call(field, aux, form);\n        },\n        getOptionLabel: option => {\n          var _options$find;\n\n          return ((_options$find = options.find(o => o.value === (typeof option === 'string' ? option : option.value))) === null || _options$find === void 0 ? void 0 : _options$find.label) || '';\n        },\n        renderInput: params => /*#__PURE__*/_jsxDEV(TextField, _objectSpread(_objectSpread({}, params), {}, {\n          error: !!error,\n          label: field.label,\n          variant: \"standard\",\n          fullWidth: true,\n          placeholder: field.placeholder,\n          onChange: event => {\n            setQuery(event.target.value);\n            updateOptions();\n          },\n          InputProps: _objectSpread(_objectSpread({}, params.InputProps), {}, {\n            endAdornment: /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [loading ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n                color: \"inherit\",\n                size: 20\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 120,\n                columnNumber: 34\n              }, this) : null, params.InputProps.endAdornment]\n            }, void 0, true)\n          })\n        }), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this),\n      id: field.name,\n      name: field.name,\n      rules: field.rules,\n      noOptionsText: field.noOptionsText ? field.noOptionsText : 'No hay opciones',\n      control: form.control,\n      defaultValue: currentValue || (field.multiple ? [] : ''),\n      onChange: args => {\n        var _field$onChange2;\n\n        const value = !args[1] ? null : field.multiple ? args[1].map(v => v.value || v) : args[1].value;\n        (_field$onChange2 = field.onChange) === null || _field$onChange2 === void 0 ? void 0 : _field$onChange2.call(field, value, form);\n        return value;\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(FormHelperText, {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/reintegros/reintegros-frontend/components/builder/FieldAutocomplete.tsx"],"names":["React","useState","useCallback","FormControl","FormHelperText","TextField","CircularProgress","Controller","Autocomplete","FormBuilderAutocomplete","field","error","form","query","setQuery","open","setOpen","loading","setLoading","options","setOptions","Array","isArray","optionsFunction","updateOptions","then","newOptions","currentValue","getValues","name","setValue","multiple","finally","shouldLoad","length","filter","o","indexOf","value","find","useEffect","mounted","label","props","disabled","option","event","newValue","aux","onChange","params","placeholder","target","InputProps","endAdornment","rules","noOptionsText","control","args","map","v"],"mappings":"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","sourcesContent":["// Third-party imports\nimport React, { useState, useCallback } from 'react';\nimport { FormControl, FormHelperText, TextField, CircularProgress } from '@material-ui/core';\nimport { Controller, FieldName, UseFormMethods } from 'react-hook-form';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\n\n// App imports\nimport { FormField, OptionsField } from '.';\n\n// Props & other types\ntype Props<T> = {\n  field: FormField<T>;\n  error: string;\n  rules: any;\n  form: UseFormMethods<Partial<T>>;\n};\n\n// Component\nexport default function FormBuilderAutocomplete<T>({ field, error, form }: Props<T>) {\n  const [query, setQuery] = useState('');\n  const [open, setOpen] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [options, setOptions] = useState<OptionsField>(\n    Array.isArray(field.options) ? field.options : [],\n  );\n  const optionsFunction: (\n    form: UseFormMethods<Partial<T>>,\n    query: string,\n  ) => Promise<OptionsField> = Array.isArray(field.options) ? null : field.options;\n\n  const updateOptions = useCallback(() => {\n    if (optionsFunction) {\n      setLoading(true);\n      optionsFunction(form, query)\n        .then((newOptions) => {\n          setOptions(newOptions || []);\n          // This fixes the bug in Autocomplete, that does not refresh the label\n          const currentValue = form.getValues()[field.name];\n\n          if (currentValue) {\n            form.setValue(field.name as any, (field.multiple ? [] : null) as any);\n            form.setValue(field.name as any, currentValue);\n          }\n        })\n        .finally(() => setLoading(false));\n    }\n  }, [optionsFunction, form, query, field.multiple, field.name]);\n\n  // If it has a value, an the option in not loaded, then load options\n  let shouldLoad: boolean;\n  const currentValue = form.getValues()[field.name];\n  if (field.multiple) {\n    shouldLoad =\n      optionsFunction &&\n      currentValue &&\n      currentValue.length &&\n      !options.filter((o) => currentValue.indexOf(o.value) >= 0).length;\n  } else {\n    shouldLoad = optionsFunction && currentValue && !options.find((o) => o.value === currentValue);\n  }\n  // Load option it is has data\n  React.useEffect(() => {\n    let mounted = true;\n    if (mounted && shouldLoad) {\n      updateOptions();\n    }\n    return () => (mounted = false);\n  }, [shouldLoad, updateOptions]);\n\n  return (\n    <FormControl component=\"fieldset\" error={!!error} fullWidth>\n      <Controller\n        label={field.label}\n        render={(props) => (\n          <Autocomplete\n            open={open}\n            onOpen={() => {\n              setOpen(true);\n              updateOptions();\n            }}\n            onClose={() => setOpen(false)}\n            options={options}\n            disabled={field.disabled}\n            loading={loading}\n            multiple={field.multiple}\n            getOptionDisabled={() => loading}\n            getOptionSelected={(option, value) =>\n              option.value ===\n              (!value ? '' : typeof value === 'string' ? (value as any) : value?.value)\n            }\n            onChange={(event, newValue) => {\n              const aux = newValue as any;\n              form.setValue(\n                field.name as any,\n                typeof newValue === 'string' ? (newValue as any) : aux?.value,\n              );\n              field.onChange?.(aux, form);\n            }}\n            getOptionLabel={(option) =>\n              options.find(\n                (o) => o.value === (typeof option === 'string' ? (option as string) : option.value),\n              )?.label || ''\n            }\n            renderInput={(params) => (\n              <TextField\n                {...params}\n                error={!!error}\n                label={field.label}\n                variant=\"standard\"\n                fullWidth\n                placeholder={field.placeholder}\n                onChange={(event) => {\n                  setQuery(event.target.value);\n                  updateOptions();\n                }}\n                InputProps={{\n                  ...params.InputProps,\n                  endAdornment: (\n                    <>\n                      {loading ? <CircularProgress color=\"inherit\" size={20} /> : null}\n                      {params.InputProps.endAdornment}\n                    </>\n                  ),\n                }}\n              />\n            )}\n          />\n        )}\n        id={field.name}\n        name={field.name}\n        rules={field.rules}\n        noOptionsText={field.noOptionsText ? field.noOptionsText : 'No hay opciones'}\n        control={form.control}\n        defaultValue={currentValue || (field.multiple ? [] : '')}\n        onChange={(args) => {\n          const value = !args[1]\n            ? null\n            : field.multiple\n            ? args[1].map((v) => v.value || v)\n            : args[1].value;\n          field.onChange?.(value, form);\n          return value;\n        }}\n      />\n      {error && <FormHelperText>{error}</FormHelperText>}\n    </FormControl>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}