{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/reintegros/reintegros-frontend/components/builder/FieldRender.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { TextField, Checkbox, FormControl, FormControlLabel, FormHelperText, InputLabel, Select, MenuItem, InputAdornment } from '@material-ui/core';\nimport { KeyboardDatePicker, KeyboardTimePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport React from 'react';\nimport { Controller } from 'react-hook-form';\nimport { FieldType } from './FormField';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { format, parseISO } from 'date-fns';\nimport { FORM_BUILDER } from '../../labels';\nimport FieldAutocomplete from './FieldAutocomplete';\nimport FileInput from '../common/FileInput'; // Needed for prevent passing 'value' and 'onChange' props\n\nconst DatePicker = KeyboardDatePicker;\nconst TimePicker = KeyboardTimePicker;\nexport const getError = (field, errors) => {\n  var _field$rules, _field$rules2, _field$rules3, _field$rules4;\n\n  if (errors && errors[field.name]) {\n    switch (errors[field.name].type) {\n      case 'required':\n        return FORM_BUILDER.required;\n\n      case 'min':\n        return `${FORM_BUILDER.min} ${(_field$rules = field.rules) === null || _field$rules === void 0 ? void 0 : _field$rules.min}`;\n\n      case 'minLength':\n        return `${FORM_BUILDER.minLength} ${(_field$rules2 = field.rules) === null || _field$rules2 === void 0 ? void 0 : _field$rules2.minLength}`;\n\n      case 'max':\n        return `${FORM_BUILDER.max} ${(_field$rules3 = field.rules) === null || _field$rules3 === void 0 ? void 0 : _field$rules3.max}`;\n\n      case 'maxLength':\n        return `${FORM_BUILDER.maxLength} ${(_field$rules4 = field.rules) === null || _field$rules4 === void 0 ? void 0 : _field$rules4.maxLength}`;\n\n      case 'pattern':\n        return errors[field.name].message || FORM_BUILDER.pattern;\n\n      case 'validate':\n        return errors[field.name].message;\n\n      default:\n        return FORM_BUILDER.default;\n    }\n  } else {\n    return null;\n  }\n};\nexport const getRules = (field, form) => {\n  const rules = field.rules || {};\n\n  if (rules.validate) {\n    const oldMethod = rules.validate;\n\n    rules.validate = () => oldMethod(form);\n  }\n\n  return rules;\n};\nexport default function FieldRender({\n  field,\n  form,\n  data\n}) {\n  var _ref, _ref2, _ref3, _ref4, _ref5;\n\n  const {\n    control,\n    errors\n  } = form;\n  const variant = 'standard';\n  const error = getError(field, errors);\n  const rules = getRules(field, form);\n\n  if (field.component === 'email') {\n    rules.pattern = /^[a-zA-Z0-9.!#$%&â€™*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;\n  } // Prefix & Suffix\n\n\n  const inputProps = {};\n\n  if (field.prefix) {\n    inputProps.startAdornment = /*#__PURE__*/_jsxDEV(InputAdornment, {\n      position: \"start\",\n      children: field.prefix\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 33\n    }, this);\n  }\n\n  if (field.suffix) {\n    inputProps.endAdornment = /*#__PURE__*/_jsxDEV(InputAdornment, {\n      position: \"end\",\n      children: field.suffix\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 31\n    }, this);\n  }\n\n  switch (field.type) {\n    case FieldType.date:\n      return /*#__PURE__*/_jsxDEV(MuiPickersUtilsProvider, {\n        utils: DateFnsUtils,\n        children: /*#__PURE__*/_jsxDEV(Controller, {\n          variant: variant,\n          name: field.name,\n          label: field.label,\n          control: control,\n          error: !!error,\n          rules: rules,\n          defaultValue: (_ref = data[field.name] && format(parseISO(data[field.name]), 'dd/MM/yyyy')) !== null && _ref !== void 0 ? _ref : null,\n          render: props => /*#__PURE__*/_jsxDEV(DatePicker, {\n            value: props.value,\n            onChange: props.onChange,\n            inputRef: props.ref,\n            autoOk: true,\n            disableToolbar: true,\n            variant: \"inline\",\n            format: \"dd/MM/yyyy\",\n            inputVariant: variant,\n            fullWidth: true,\n            label: field.label,\n            helperText: error,\n            disabled: field.disabled,\n            KeyboardButtonProps: {\n              'aria-label': 'change date'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this);\n      break;\n\n    case FieldType.time:\n      return /*#__PURE__*/_jsxDEV(MuiPickersUtilsProvider, {\n        utils: DateFnsUtils,\n        children: /*#__PURE__*/_jsxDEV(Controller, {\n          variant: variant,\n          error: !!error,\n          rules: rules,\n          render: props => /*#__PURE__*/_jsxDEV(TimePicker, {\n            value: props.value,\n            onChange: props.onChange,\n            inputRef: props.ref,\n            autoOk: true,\n            variant: \"inline\",\n            disableToolbar: true,\n            inputVariant: variant,\n            fullWidth: true,\n            label: field.label,\n            error: !!error,\n            helperText: error,\n            disabled: field.disabled,\n            format: \"HH:mm\",\n            KeyboardButtonProps: {\n              'aria-label': 'change time'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 15\n          }, this),\n          name: field.name,\n          placeholder: field.placeholder,\n          control: control\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this);\n      break;\n\n    case FieldType.int:\n      return /*#__PURE__*/_jsxDEV(Controller, {\n        render: props => {\n          var _parseInt;\n\n          return /*#__PURE__*/_jsxDEV(TextField, {\n            label: field.label,\n            value: (_parseInt = parseInt(props.value)) !== null && _parseInt !== void 0 ? _parseInt : 0,\n            name: field.name,\n            variant: variant,\n            fullWidth: true,\n            type: \"number\",\n            helperText: error,\n            inputRef: props.ref,\n            onChange: event => {\n              form.setValue(field.name, parseInt(event.target.value));\n              field.onChange(parseInt(event.target.value), form);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 13\n          }, this);\n        },\n        defaultValue: (_ref2 = data && data[field.name]) !== null && _ref2 !== void 0 ? _ref2 : 0,\n        type: \"number\",\n        name: field.name,\n        label: field.label,\n        control: control,\n        error: !!error,\n        rules: rules\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this);\n\n    case FieldType.float:\n      return /*#__PURE__*/_jsxDEV(Controller, {\n        render: props => /*#__PURE__*/_jsxDEV(TextField, {\n          label: field.label,\n          value: props.value,\n          name: field.name,\n          type: \"number\",\n          variant: variant,\n          fullWidth: true,\n          helperText: error,\n          inputRef: props.ref,\n          onChange: e => props.onChange(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 13\n        }, this),\n        defaultValue: (_ref3 = data && data[field.name]) !== null && _ref3 !== void 0 ? _ref3 : null,\n        name: field.name,\n        label: field.label,\n        control: control,\n        error: !!error,\n        rules: rules\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this);\n      break;\n\n    case FieldType.options:\n      if (!Array.isArray(field.options)) {\n        return /*#__PURE__*/_jsxDEV(FieldAutocomplete, {\n          field: field,\n          error: error,\n          rules: rules,\n          form: form\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 16\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(FormControl, {\n          variant: variant,\n          fullWidth: true,\n          children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n            children: field.label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Controller, {\n            control: control,\n            name: field.name,\n            id: field.name,\n            error: !!error,\n            disabled: field.disabled,\n            rules: rules,\n            render: props => /*#__PURE__*/_jsxDEV(Select, {\n              label: field.label,\n              value: props.value,\n              onChange: e => {\n                var _e$target$value, _e$target;\n\n                return props.onChange((_e$target$value = e === null || e === void 0 ? void 0 : (_e$target = e.target) === null || _e$target === void 0 ? void 0 : _e$target.value) !== null && _e$target$value !== void 0 ? _e$target$value : null);\n              },\n              disabled: field.disabled,\n              children: field.options.map((elem, index) => /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: elem.value,\n                children: elem.label\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 237,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 230,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 13\n          }, this), error && /*#__PURE__*/_jsxDEV(FormHelperText, {\n            children: error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 23\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 11\n        }, this);\n      }\n\n      break;\n\n    case FieldType.boolean:\n      return /*#__PURE__*/_jsxDEV(FormControlLabel, {\n        control: /*#__PURE__*/_jsxDEV(Controller, {\n          error: !!error,\n          rules: rules,\n          helperText: error,\n          variant: variant,\n          fullWidth: true,\n          label: field.label,\n          render: props => /*#__PURE__*/_jsxDEV(Checkbox, {\n            onChange: event => {\n              form.setValue(field.name, event.target.checked);\n              field.onChange(event.target.checked, form);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 17\n          }, this),\n          valueName: \"checked\",\n          name: field.name,\n          control: control,\n          color: \"primary\",\n          disabled: field.disabled,\n          defaultValue: data[field.name] || false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 13\n        }, this),\n        label: field.label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 9\n      }, this);\n      break;\n\n    case FieldType.file:\n      return /*#__PURE__*/_jsxDEV(Controller, {\n        render: props => /*#__PURE__*/_jsxDEV(FileInput, _objectSpread(_objectSpread({}, props), {}, {\n          multiple: field.multiple\n        }), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 30\n        }, this),\n        defaultValue: (_ref4 = data && data[field.name]) !== null && _ref4 !== void 0 ? _ref4 : null,\n        name: field.name,\n        label: field.label,\n        control: control,\n        error: !!error,\n        rules: rules\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 9\n      }, this);\n      break;\n\n    default:\n      return /*#__PURE__*/_jsxDEV(Controller, {\n        render: props => {\n          var _props$value;\n\n          return /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              htmlFor: field.name,\n              children: field.label\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 300,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TextField, {\n              defaultValue: (_props$value = props.value) !== null && _props$value !== void 0 ? _props$value : '',\n              name: field.name,\n              id: field.name,\n              variant: variant,\n              fullWidth: true,\n              helperText: error,\n              inputRef: props.ref,\n              onChange: e => props.onChange(e.target.value),\n              disabled: field.disabled,\n              InputProps: inputProps\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 301,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true);\n        },\n        defaultValue: (_ref5 = data && data[field.name]) !== null && _ref5 !== void 0 ? _ref5 : '',\n        name: field.name,\n        label: field.label,\n        control: control,\n        error: !!error,\n        rules: rules\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 9\n      }, this);\n      break;\n  }\n}","map":{"version":3,"sources":["/reintegros/reintegros-frontend/components/builder/FieldRender.tsx"],"names":["TextField","Checkbox","FormControl","FormControlLabel","FormHelperText","InputLabel","Select","MenuItem","InputAdornment","KeyboardDatePicker","KeyboardTimePicker","MuiPickersUtilsProvider","React","Controller","FieldType","DateFnsUtils","format","parseISO","FORM_BUILDER","FieldAutocomplete","FileInput","DatePicker","TimePicker","getError","field","errors","name","type","required","min","rules","minLength","max","maxLength","message","pattern","default","getRules","form","validate","oldMethod","FieldRender","data","control","variant","error","component","inputProps","prefix","startAdornment","suffix","endAdornment","date","label","props","value","onChange","ref","disabled","time","placeholder","int","parseInt","event","setValue","target","float","e","options","Array","isArray","map","elem","index","boolean","checked","file","multiple"],"mappings":"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","sourcesContent":["import {\n  TextField,\n  Checkbox,\n  RadioGroup,\n  FormControl,\n  FormControlLabel,\n  Radio,\n  FormHelperText,\n  FormLabel,\n  InputLabel,\n  Select,\n  MenuItem,\n  OutlinedInputProps,\n  InputAdornment,\n} from '@material-ui/core';\nimport {\n  KeyboardDatePicker,\n  KeyboardTimePicker,\n  MuiPickersUtilsProvider,\n} from '@material-ui/pickers';\nimport React from 'react';\nimport { Controller } from 'react-hook-form';\nimport { FieldType, FormField } from './FormField';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { format, parseISO } from 'date-fns';\nimport { FORM_BUILDER } from '../../labels';\nimport FieldAutocomplete from './FieldAutocomplete';\nimport FileInput from '../common/FileInput';\n\n// Needed for prevent passing 'value' and 'onChange' props\nconst DatePicker: any = KeyboardDatePicker;\nconst TimePicker: any = KeyboardTimePicker;\ntype Props = {\n  field: any;\n  form: any;\n  data: any;\n};\n\nexport const getError = (field: any, errors: any) => {\n  if (errors && errors[field.name]) {\n    switch (errors[field.name].type) {\n      case 'required':\n        return FORM_BUILDER.required;\n      case 'min':\n        return `${FORM_BUILDER.min} ${field.rules?.min}`;\n      case 'minLength':\n        return `${FORM_BUILDER.minLength} ${field.rules?.minLength}`;\n      case 'max':\n        return `${FORM_BUILDER.max} ${field.rules?.max}`;\n      case 'maxLength':\n        return `${FORM_BUILDER.maxLength} ${field.rules?.maxLength}`;\n      case 'pattern':\n        return errors[field.name].message || FORM_BUILDER.pattern;\n      case 'validate':\n        return errors[field.name].message;\n      default:\n        return FORM_BUILDER.default;\n    }\n  } else {\n    return null;\n  }\n};\n\nexport const getRules = (field, form) => {\n  const rules = field.rules || {};\n  if (rules.validate) {\n    const oldMethod = rules.validate;\n    rules.validate = () => oldMethod(form);\n  }\n  return rules;\n};\nexport default function FieldRender({ field, form, data }: Props) {\n  const { control, errors } = form;\n  const variant = 'standard';\n\n  const error = getError(field, errors);\n  const rules = getRules(field, form);\n  if (field.component === 'email') {\n    rules.pattern = /^[a-zA-Z0-9.!#$%&â€™*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;\n  }\n  // Prefix & Suffix\n  const inputProps: Partial<OutlinedInputProps> = {};\n  if (field.prefix) {\n    inputProps.startAdornment = <InputAdornment position=\"start\">{field.prefix}</InputAdornment>;\n  }\n  if (field.suffix) {\n    inputProps.endAdornment = <InputAdornment position=\"end\">{field.suffix}</InputAdornment>;\n  }\n  switch (field.type) {\n    case FieldType.date:\n      return (\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\n          <Controller\n            variant={variant}\n            name={field.name}\n            label={field.label}\n            control={control}\n            error={!!error}\n            rules={rules}\n            defaultValue={\n              (data[field.name] && format(parseISO(data[field.name]), 'dd/MM/yyyy')) ?? null\n            }\n            render={(props) => (\n              <DatePicker\n                value={props.value}\n                onChange={props.onChange}\n                inputRef={props.ref}\n                autoOk\n                disableToolbar\n                variant=\"inline\"\n                format=\"dd/MM/yyyy\"\n                inputVariant={variant}\n                fullWidth={true}\n                label={field.label}\n                helperText={error}\n                disabled={field.disabled}\n                KeyboardButtonProps={{\n                  'aria-label': 'change date',\n                }}\n              />\n            )}\n          />\n        </MuiPickersUtilsProvider>\n      );\n      break;\n\n    case FieldType.time:\n      return (\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\n          <Controller\n            variant={variant}\n            error={!!error}\n            rules={rules}\n            render={(props) => (\n              <TimePicker\n                value={props.value}\n                onChange={props.onChange}\n                inputRef={props.ref}\n                autoOk\n                variant=\"inline\"\n                disableToolbar\n                inputVariant={variant}\n                fullWidth={true}\n                label={field.label}\n                error={!!error}\n                helperText={error}\n                disabled={field.disabled}\n                format=\"HH:mm\"\n                KeyboardButtonProps={{\n                  'aria-label': 'change time',\n                }}\n              />\n            )}\n            name={field.name}\n            placeholder={field.placeholder}\n            control={control}\n          />\n        </MuiPickersUtilsProvider>\n      );\n      break;\n    case FieldType.int:\n      return (\n        <Controller\n          render={(props) => (\n            <TextField\n              label={field.label}\n              value={parseInt(props.value) ?? 0}\n              name={field.name}\n              variant={variant}\n              fullWidth={true}\n              type=\"number\"\n              helperText={error}\n              inputRef={props.ref}\n              onChange={(event) => {\n                form.setValue(field.name, parseInt(event.target.value));\n                field.onChange(parseInt(event.target.value), form);\n              }}\n            />\n          )}\n          defaultValue={(data && data[field.name]) ?? 0}\n          type=\"number\"\n          name={field.name}\n          label={field.label}\n          control={control}\n          error={!!error}\n          rules={rules}\n        />\n      );\n    case FieldType.float:\n      return (\n        <Controller\n          render={(props) => (\n            <TextField\n              label={field.label}\n              value={props.value}\n              name={field.name}\n              type=\"number\"\n              variant={variant}\n              fullWidth={true}\n              helperText={error}\n              inputRef={props.ref}\n              onChange={(e) => props.onChange(e.target.value)}\n            />\n          )}\n          defaultValue={(data && data[field.name]) ?? null}\n          name={field.name}\n          label={field.label}\n          control={control}\n          error={!!error}\n          rules={rules}\n        />\n      );\n      break;\n\n    case FieldType.options:\n      if (!Array.isArray(field.options)) {\n        return <FieldAutocomplete field={field} error={error} rules={rules} form={form} />;\n      } else {\n        return (\n          <FormControl variant={variant} fullWidth={true}>\n            <InputLabel>{field.label}</InputLabel>\n            <Controller\n              control={control}\n              name={field.name}\n              id={field.name}\n              error={!!error}\n              disabled={field.disabled}\n              rules={rules}\n              render={(props) => (\n                <Select\n                  label={field.label}\n                  value={props.value}\n                  onChange={(e) => props.onChange(e?.target?.value ?? null)}\n                  disabled={field.disabled}\n                >\n                  {field.options.map((elem, index) => (\n                    <MenuItem key={index} value={elem.value}>\n                      {elem.label}\n                    </MenuItem>\n                  ))}\n                </Select>\n              )}\n            />\n            {error && <FormHelperText>{error}</FormHelperText>}\n          </FormControl>\n        );\n      }\n      break;\n\n    case FieldType.boolean:\n      return (\n        <FormControlLabel\n          control={\n            <Controller\n              error={!!error}\n              rules={rules}\n              helperText={error}\n              variant={variant}\n              fullWidth={true}\n              label={field.label}\n              render={(props) => (\n                <Checkbox\n                  onChange={(event) => {\n                    form.setValue(field.name, event.target.checked);\n                    field.onChange(event.target.checked, form);\n                  }}\n                />\n              )}\n              valueName=\"checked\"\n              name={field.name}\n              control={control}\n              color=\"primary\"\n              disabled={field.disabled}\n              defaultValue={data[field.name] || false}\n            />\n          }\n          label={field.label}\n        />\n      );\n      break;\n\n    case FieldType.file:\n      return (\n        <Controller\n          render={(props) => <FileInput {...props} multiple={field.multiple} />}\n          defaultValue={(data && data[field.name]) ?? null}\n          name={field.name}\n          label={field.label}\n          control={control}\n          error={!!error}\n          rules={rules}\n        />\n      );\n      break;\n    default:\n      return (\n        <Controller\n          render={(props) => (\n            <>\n              <InputLabel htmlFor={field.name}>{field.label}</InputLabel>\n              <TextField\n                defaultValue={props.value ?? ''}\n                name={field.name}\n                id={field.name}\n                variant={variant}\n                fullWidth={true}\n                helperText={error}\n                inputRef={props.ref}\n                onChange={(e) => props.onChange(e.target.value)}\n                disabled={field.disabled}\n                InputProps={inputProps}\n              />\n            </>\n          )}\n          defaultValue={(data && data[field.name]) ?? ''}\n          name={field.name}\n          label={field.label}\n          control={control}\n          error={!!error}\n          rules={rules}\n        />\n      );\n      break;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}