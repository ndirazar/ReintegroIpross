{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Box, List, ListItem, ListItemText, Typography, makeStyles, Checkbox, Grid } from '@material-ui/core';\nimport React, { useEffect, useState } from 'react';\nimport useSWR from 'swr';\nimport AuditoriasForm from './AuditoriasForm';\nimport AuditoriasList from './AuditoriasList';\nimport { post, remove, send } from '../api-call/service';\nimport Loading from '../common/Loading';\nimport { ERRORS, LOADING, AUDITORIAS, PRESTACIONES } from '../../labels';\nimport Alert from '../common/Alert';\nimport Modal from '../common/Modal';\nimport Link from '@material-ui/core/Link';\nimport TableFilters from '../common/TableFilters';\nimport filterConfig from './FiltersConfig';\nimport { formatDate, objToQueryString, getUser, isUserAuditoriaMedica, isUserAuditoriaCentral, isUserAdmin, getFileName } from '../common/helpers';\nconst useStyles = makeStyles(theme => ({\n  docTitle: {\n    '& span': {\n      fontSize: '12px',\n      fontWeight: 700,\n      paddingBottom: 0\n    }\n  },\n  fileLink: {\n    fontSize: '12px'\n  },\n  nested: {\n    paddingLeft: '65px',\n    paddingTop: 0,\n    paddingBottom: 0,\n    listStyle: 'none',\n    '& span': {\n      fontSize: '12px'\n    }\n  },\n  root: {\n    width: '100%',\n    backgroundColor: theme.palette.background.paper\n  },\n  reminderList: {},\n  formContainer: {\n    '& form': {\n      boxShadow: 'none',\n      padding: 0\n    }\n  }\n}));\nexport default function Auditorias() {\n  var _currentData$solicitu, _currentData$solicitu2, _currentData$solicitu3, _currentData$solicitu4, _currentData$adjuntos;\n\n  const INITIAL_FILTER = {\n    page: 1,\n    size: 20,\n    auditorActual: '',\n    estadoActual: '',\n    nomenclador: '',\n    fecha_alta__gt: '',\n    fecha_alta__lt: '',\n    prestador: ''\n  };\n  const {\n    0: filters,\n    1: setFilters\n  } = useState(INITIAL_FILTER);\n  const {\n    0: filterQueryStr,\n    1: setFilterQueryStr\n  } = useState(objToQueryString(filters));\n  const {\n    data,\n    error: errorOnGet,\n    mutate\n  } = useSWR(`${PRESTACIONES.route}/?` + filterQueryStr);\n  const {\n    0: openForm,\n    1: setOpenForm\n  } = useState(false);\n  const {\n    0: error,\n    1: setError\n  } = useState(null);\n  const {\n    0: currentData,\n    1: setCurrentData\n  } = useState(null);\n  const classes = useStyles();\n  const filesUrl = process.env.NEXT_PUBLIC_API.substring(0, process.env.NEXT_PUBLIC_API.length - 1);\n  const {\n    0: showFilters,\n    1: setShowFilters\n  } = useState(false);\n  const {\n    0: documentacion,\n    1: setDocumentacion\n  } = useState([{\n    titulo: 'Documentación:',\n    checked: false,\n    items: ['Factura / Recibo', 'Prescripción médica', 'Historia clínica (según tipo de prestación)', 'Estudios complementarios (según tipo de prestación)', 'Presupuesto (según tipo de prestación)', 'Derivación (según tipo de prestación)', 'Certificado de defunción', 'Troqueles / Stickers', 'Protocolo quirúrgico', 'Certificado de implante', 'Radiografía post operatoria']\n  }, {\n    titulo: 'Prestación realizada según diagnóstico y prescripción',\n    checked: false,\n    items: []\n  }, {\n    titulo: 'Fechas de Facturación y Comprobantes',\n    checked: false,\n    items: []\n  }]);\n\n  const resetDoc = () => {\n    setDocumentacion(documentacion.map(d => {\n      d.checked = false;\n      return d;\n    }));\n  };\n\n  const handleSubmit = async data => {\n    setError(null);\n    let completedDoc = true;\n    documentacion.forEach(d => {\n      if (!d.checked) {\n        completedDoc = false;\n      }\n    });\n\n    if (!completedDoc) {\n      setError('Verifique la documentacion requerida y cobertura definida');\n      return false;\n    }\n\n    const user = getUser();\n\n    try {\n      await post(AUDITORIAS.route, {\n        prestacion: currentData === null || currentData === void 0 ? void 0 : currentData.id,\n        auditorAsignado: user === null || user === void 0 ? void 0 : user.id,\n        actualizadoPor: user === null || user === void 0 ? void 0 : user.id,\n        motivoDeRechazo: data.motivoDeRechazo,\n        porcentajeDeCobertura: parseInt(data.cobertura),\n        montoAReintegrar: parseFloat(data.montoReintegrar),\n        estadoActual: data.estadoActual\n      }); // Intento crear la autorizacion\n\n      await send({\n        url: `api/cupon/`,\n        data: {\n          solicitudes: [currentData.solicitud.id]\n        },\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      resetDoc();\n      setCurrentData(null);\n      setOpenForm(false);\n      mutate();\n    } catch (error) {\n      var _error$response, _error$response$data;\n\n      //TODO handle error\n      setError(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'onAudit');\n    }\n  };\n\n  const handleCancel = async () => {\n    resetDoc();\n    setCurrentData(null);\n    setOpenForm(false);\n    setError(null);\n  };\n\n  const handleDelete = async id => {\n    try {\n      await remove(`api/${AUDITORIAS.route}`, id);\n      setError(null);\n    } catch (error) {\n      setError('onDelete');\n    }\n\n    mutate();\n  };\n\n  const onAudit = async data => {\n    var _data$auditoria, _data$solicitud, _data$solicitud$afili;\n\n    // Calculate montoAReintegrar\n    if (data.auditoria) {\n      setError('La prestación ya tiene una auditoría asignada');\n      return false;\n    }\n\n    const user = getUser();\n    setError(null);\n    const isMedica = data.nomenclador.requiereAuditoriaMedica;\n    const capitulo = data.nomenclador.capitulo;\n\n    if (isMedica && !isUserAuditoriaMedica() && !isUserAuditoriaCentral() && !isUserAdmin()) {\n      setError('El usuario no tiene permisos para editar la auditoría');\n      return false;\n    }\n\n    if (!user.capitulos.find(c => c.capitulo === capitulo.capitulo) && !isUserAdmin()) {\n      setError('El usuario no tiene el capitulo correspondiente asignado');\n      return false;\n    }\n\n    resetDoc();\n    data.estadoActual = (_data$auditoria = data.auditoria) === null || _data$auditoria === void 0 ? void 0 : _data$auditoria.estadoActual;\n    data.montoReintegrar = (parseFloat(data.valorIprossNomenclador) * (data.cobertura / 100)).toFixed(2);\n\n    if ((_data$solicitud = data.solicitud) !== null && _data$solicitud !== void 0 && (_data$solicitud$afili = _data$solicitud.afiliado) !== null && _data$solicitud$afili !== void 0 && _data$solicitud$afili.cud) {\n      data.cobertura = 100;\n      data.cud = data.solicitud.afiliado.cud;\n    }\n\n    setCurrentData(data);\n    setOpenForm(true);\n  };\n\n  const handleChangePagination = pagination => {\n    setFilters(_objectSpread(_objectSpread({}, INITIAL_FILTER), {}, {\n      page: pagination.page,\n      size: pagination.pageSize\n    }));\n  };\n\n  const handleFilter = newFilters => {\n    if (newFilters.fecha_alta__gt) {\n      newFilters.fecha_alta__gt = formatDate(newFilters.fecha_alta__gt);\n    } else {\n      delete newFilters.fecha_alta__gt;\n    }\n\n    if (newFilters.fecha_alta__lt) {\n      newFilters.fecha_alta__lt = formatDate(newFilters.fecha_alta__lt);\n    } else {\n      delete newFilters.fecha_alta__lt;\n    }\n\n    setFilters(_objectSpread(_objectSpread({}, INITIAL_FILTER), newFilters));\n    setShowFilters(false);\n  };\n\n  useEffect(() => {\n    setFilterQueryStr(objToQueryString(filters));\n  }, [filters]);\n\n  const handleCancelFilter = () => {\n    setFilters(_objectSpread({}, INITIAL_FILTER));\n    setShowFilters(false);\n  };\n\n  const toggleCheckItem = item => {\n    let doc = [...documentacion];\n    doc.map(d => {\n      if (item.titulo === d.titulo) {\n        item.checked = !item.checked;\n      }\n\n      return d;\n    });\n    setDocumentacion(doc);\n  };\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsxs(Box, {\n      p: 2,\n      m: 1,\n      style: {\n        position: 'relative'\n      },\n      children: [openForm && /*#__PURE__*/_jsxs(Modal, {\n        customClasses: {},\n        open: true,\n        onClose: () => setOpenForm(false),\n        title: 'Auditar prestación',\n        breadcrumbs: '',\n        subTitle: false,\n        actions: false,\n        onAcept: null,\n        onCancel: null,\n        maxWidth: 'sm',\n        children: [/*#__PURE__*/_jsx(List, {\n          subheader: /*#__PURE__*/_jsx(Typography, {\n            children: \"Verifica la documentaci\\xF3n requerida y cobertura definida:\"\n          }),\n          className: classes.root,\n          children: documentacion.map((item, index) => {\n            return /*#__PURE__*/_jsxs(Box, {\n              children: [/*#__PURE__*/_jsxs(ListItem, {\n                children: [/*#__PURE__*/_jsx(Checkbox, {\n                  onChange: event => {\n                    toggleCheckItem(item);\n                  },\n                  checked: item.checked\n                }), /*#__PURE__*/_jsx(ListItemText, {\n                  primary: item.titulo,\n                  className: classes.docTitle\n                })]\n              }), item !== null && item !== void 0 && item.items.length ? /*#__PURE__*/_jsx(List, {\n                style: {\n                  paddingTop: 0\n                },\n                children: item.items.map((item, i) => {\n                  return /*#__PURE__*/_jsx(ListItem, {\n                    className: classes.nested,\n                    children: /*#__PURE__*/_jsx(ListItemText, {\n                      primary: item\n                    })\n                  }, i);\n                })\n              }) : '']\n            }, index);\n          })\n        }), (currentData === null || currentData === void 0 ? void 0 : (_currentData$solicitu = currentData.solicitud) === null || _currentData$solicitu === void 0 ? void 0 : _currentData$solicitu.factura) && /*#__PURE__*/_jsx(List, {\n          subheader: /*#__PURE__*/_jsx(Typography, {\n            children: \"Factura:\"\n          }),\n          children: /*#__PURE__*/_jsx(ListItem, {\n            children: /*#__PURE__*/_jsx(Typography, {\n              children: /*#__PURE__*/_jsx(Link, {\n                href: `${filesUrl}${currentData === null || currentData === void 0 ? void 0 : (_currentData$solicitu2 = currentData.solicitud) === null || _currentData$solicitu2 === void 0 ? void 0 : _currentData$solicitu2.factura.archivo}`,\n                target: \"_blank\",\n                className: classes.fileLink,\n                children: getFileName(currentData === null || currentData === void 0 ? void 0 : (_currentData$solicitu3 = currentData.solicitud) === null || _currentData$solicitu3 === void 0 ? void 0 : (_currentData$solicitu4 = _currentData$solicitu3.factura) === null || _currentData$solicitu4 === void 0 ? void 0 : _currentData$solicitu4.archivo)\n              })\n            })\n          })\n        }), (currentData === null || currentData === void 0 ? void 0 : currentData.adjuntos) && (currentData === null || currentData === void 0 ? void 0 : currentData.adjuntos.length) > 0 && /*#__PURE__*/_jsx(List, {\n          subheader: /*#__PURE__*/_jsx(Typography, {\n            children: \"Archivos adjuntos:\"\n          }),\n          children: currentData === null || currentData === void 0 ? void 0 : (_currentData$adjuntos = currentData.adjuntos) === null || _currentData$adjuntos === void 0 ? void 0 : _currentData$adjuntos.map((value, i) => {\n            return /*#__PURE__*/_jsx(ListItem, {\n              children: /*#__PURE__*/_jsx(Typography, {\n                children: /*#__PURE__*/_jsx(Link, {\n                  href: `${filesUrl}${value.archivo}`,\n                  target: \"_blak\",\n                  className: classes.fileLink,\n                  children: getFileName(value === null || value === void 0 ? void 0 : value.archivo)\n                })\n              })\n            }, i);\n          })\n        }), /*#__PURE__*/_jsx(Grid, {\n          className: classes.formContainer,\n          children: /*#__PURE__*/_jsx(AuditoriasForm, {\n            data: currentData,\n            handleSubmit: handleSubmit,\n            handleCancel: handleCancel\n          })\n        })]\n      }), /*#__PURE__*/_jsx(AuditoriasList, {\n        data: data,\n        handleDelete: handleDelete,\n        onAudit: onAudit,\n        onPaginationChange: handleChangePagination,\n        onFilter: () => {\n          setShowFilters(!showFilters);\n        }\n      }), /*#__PURE__*/_jsx(TableFilters, {\n        config: filterConfig,\n        data: filters,\n        onSubmit: handleFilter,\n        onCancel: handleCancelFilter,\n        show: showFilters\n      })]\n    }), /*#__PURE__*/_jsx(Loading, {\n      loading: !data,\n      message: LOADING(AUDITORIAS.name)\n    }), /*#__PURE__*/_jsx(Alert, {\n      open: errorOnGet || error ? true : false,\n      severity: \"error\",\n      message: error ? ERRORS[error] ? ERRORS[error](AUDITORIAS.name) : error : ERRORS.onGet(AUDITORIAS.name)\n    })]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}