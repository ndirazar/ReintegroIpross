{"ast":null,"code":"export let FieldType;\n\n(function (FieldType) {\n  FieldType[\"string\"] = \"string\";\n  FieldType[\"int\"] = \"int\";\n  FieldType[\"float\"] = \"float\";\n  FieldType[\"boolean\"] = \"boolean\";\n  FieldType[\"date\"] = \"date\";\n  FieldType[\"time\"] = \"time\";\n  FieldType[\"options\"] = \"options\";\n  FieldType[\"br\"] = \"br\";\n  FieldType[\"custom\"] = \"custom\";\n  FieldType[\"file\"] = \"file\";\n  FieldType[\"radio\"] = \"radio\";\n})(FieldType || (FieldType = {}));","map":{"version":3,"sources":["/reintegros/reintegros-frontend/components/builder/FormField.tsx"],"names":["FieldType"],"mappings":"AAIA,WAAYA,SAAZ;;WAAYA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;GAAAA,S,KAAAA,S","sourcesContent":["import { ReactNode } from 'react';\nimport { UseFormMethods, ValidateResult } from 'react-hook-form';\nimport { OptionsField } from './OptionsField';\n\nexport enum FieldType {\n  string = 'string',\n  int = 'int',\n  float = 'float',\n  boolean = 'boolean',\n  date = 'date',\n  time = 'time',\n  options = 'options',\n  br = 'br',\n  custom = 'custom',\n  file = 'file',\n  radio = 'radio',\n}\n\nexport type FormField<T> = {\n  name: string;\n  type: FieldType;\n  component?: 'textarea' | 'password' | 'email' | 'checkbox' | 'radio' | React.ReactElement;\n  label: string;\n  placeholder?: string;\n  disabled?: boolean;\n  accept?: string;\n  multiple?: boolean;\n  prefix?: ReactNode;\n  suffix?: ReactNode;\n  help?: string;\n  tooltip?: string;\n  options?:\n    | OptionsField\n    | ((form: UseFormMethods<Partial<T>>, query: string) => Promise<OptionsField>);\n  styling?: Partial<{\n    columns?: number;\n  }>;\n  onChange?: (value: any, form: UseFormMethods<Partial<T>>) => void;\n  onUpdate?: (value: any, form: UseFormMethods<Partial<T>>) => void;\n  onBlur?: (value: any, form: UseFormMethods<Partial<T>>) => void;\n  onRemove?: (value: any) => void;\n  rules?: Partial<{\n    required:\n      | string\n      | boolean\n      | {\n          value: boolean;\n          message: string;\n        };\n    min:\n      | string\n      | number\n      | {\n          value: React.ReactText;\n          message: string;\n        };\n    max:\n      | string\n      | number\n      | {\n          value: React.ReactText;\n          message: string;\n        };\n    maxLength:\n      | string\n      | number\n      | {\n          value: React.ReactText;\n          message: string;\n        };\n    minLength:\n      | string\n      | number\n      | {\n          value: React.ReactText;\n          message: string;\n        };\n    pattern:\n      | RegExp\n      | {\n          value: RegExp;\n          message: string;\n        };\n    validate: (form: UseFormMethods<Partial<T>>) => ValidateResult | Promise<ValidateResult>;\n  }>;\n  noOptionsText?: string;\n};\n"]},"metadata":{},"sourceType":"module"}