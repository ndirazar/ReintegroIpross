{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport AttachMoneyOutlinedIcon from '@material-ui/icons/AttachMoneyOutlined';\nimport React from 'react';\nimport { PRESTACIONES, NOMENCLADOR } from '../../../labels';\nimport { get } from '../../api-call/service';\nimport { FieldType } from '../../builder/FormField';\nlet nomenclador = [];\nlet prestadores = [];\nconst configPrestaciones = [{\n  name: 'categoria',\n  type: FieldType.options,\n  label: PRESTACIONES.fields.categoria,\n  options: async () => {\n    return (await get('api/categorias/')).data.results.map(c => ({\n      value: c.id,\n      label: c.nombre\n    }));\n  },\n  styling: {\n    columns: 6\n  },\n  rules: {\n    required: true\n  }\n}, {\n  name: 'nomenclador',\n  type: FieldType.options,\n  label: PRESTACIONES.fields.nomenclador,\n  options: async (form, query) => {\n    const cat = form.getValues()['categoria'];\n    console.log({\n      cat\n    });\n    nomenclador = (await get('/api/nomenclador/?estado=activo')).data.results;\n    return nomenclador.filter(n => {\n      console.log({\n        n\n      });\n      return cat === 1 && n.capitulo.capitulo <= 8 || cat !== 1 && n.capitulo.capitulo === 9;\n    }).map(n => {\n      var _n$capitulo, _n$capitulo2;\n\n      return {\n        value: n.id,\n        label: `${n.codigo}-${n.descripcion} (${(_n$capitulo = n.capitulo) === null || _n$capitulo === void 0 ? void 0 : _n$capitulo.capitulo}-${(_n$capitulo2 = n.capitulo) === null || _n$capitulo2 === void 0 ? void 0 : _n$capitulo2.descripcion})`\n      };\n    });\n  },\n  onChange: (value, form) => {\n    const item = nomenclador.find(elem => elem.id === parseInt(value === null || value === void 0 ? void 0 : value.value));\n\n    if (nomenclador.length && item) {\n      var _item$capitulo, _item$capitulo2;\n\n      form.setValue('valorIprossNomenclador', item === null || item === void 0 ? void 0 : item.valorIpross);\n      const montoReintegrar = (parseFloat(item === null || item === void 0 ? void 0 : item.valorIpross) - parseFloat(item === null || item === void 0 ? void 0 : item.valorIpross) * (parseFloat(item === null || item === void 0 ? void 0 : (_item$capitulo = item.capitulo) === null || _item$capitulo === void 0 ? void 0 : _item$capitulo.coseguro) / 100)).toFixed(2);\n      form.setValue('montoReintegrar', montoReintegrar, {\n        shouldValidate: true,\n        shouldDirty: true\n      });\n      form.setValue('cobertura', 100 - parseInt(item === null || item === void 0 ? void 0 : (_item$capitulo2 = item.capitulo) === null || _item$capitulo2 === void 0 ? void 0 : _item$capitulo2.coseguro), {\n        shouldValidate: true,\n        shouldDirty: true\n      });\n      form.setValue('modalidad', item.modalidadPrestacion, {\n        shouldValidate: true,\n        shouldDirty: true\n      });\n      form.setValue('estadoActual', 'enCurso');\n      form.setValue('cantidad', 1);\n      form.setValue('montoTotal', item === null || item === void 0 ? void 0 : item.valorIpross);\n    }\n  },\n  styling: {\n    columns: 12\n  },\n  rules: {\n    required: true\n  }\n}, {\n  name: 'modalidad',\n  type: FieldType.options,\n  label: PRESTACIONES.fields.modalidad,\n  options: NOMENCLADOR.optionsModalidadPresentacion,\n  styling: {\n    columns: 6\n  },\n  rules: {\n    required: true\n  },\n  disabled: true\n}, {\n  name: 'cobertura',\n  type: FieldType.string,\n  label: PRESTACIONES.fields.cobertura,\n  styling: {\n    columns: 6\n  },\n  rules: {\n    required: true\n  },\n  disabled: true,\n  prefix: /*#__PURE__*/_jsx(_Fragment, {\n    children: \"%\"\n  })\n}, {\n  name: 'estadoActual',\n  type: FieldType.options,\n  label: PRESTACIONES.fields['estadoActual'],\n  options: PRESTACIONES.optionsEstadoActual,\n  styling: {\n    columns: 6\n  },\n  rules: {\n    required: true\n  },\n  disabled: true\n}, {\n  name: 'prestador',\n  type: FieldType.options,\n  label: PRESTACIONES.fields.prestador,\n  options: async () => {\n    return prestadores;\n  },\n  onUpdate: async (val, form) => {\n    if (val === '') {\n      prestadores = [];\n      return;\n    }\n\n    prestadores = (await get(`api/prestadores/?profEstado=alta&matricula=${val}`)).data.results.map(p => ({\n      value: p.id,\n      label: `${p.matricula} - ${p.nombre} ${p.apellido}`\n    }));\n  },\n  styling: {\n    columns: 6\n  },\n  rules: {\n    required: true\n  }\n}, {\n  name: 'br',\n  type: FieldType.br,\n  label: ''\n}, {\n  name: 'valorIprossNomenclador',\n  type: FieldType.string,\n  label: PRESTACIONES.fields.valorIprossNomenclador,\n  styling: {\n    columns: 2\n  },\n  rules: {\n    required: true\n  },\n  disabled: true,\n  prefix: /*#__PURE__*/_jsx(AttachMoneyOutlinedIcon, {})\n}, {\n  name: 'cantidad',\n  type: FieldType.int,\n  label: PRESTACIONES.fields.cantidad,\n  styling: {\n    columns: 2\n  },\n  rules: {\n    min: 1,\n    required: true\n  },\n  onChange: (val, form) => {\n    const valorIpross = form.getValues()['valorIprossNomenclador'];\n    const montoTotal = valorIpross * val;\n    form.setValue('montoTotal', montoTotal);\n    const cobertura = form.getValues()['cobertura'];\n    const montoReintegrar = (montoTotal * parseFloat(cobertura) / 100).toFixed(2);\n    form.setValue('montoReintegrar', montoReintegrar);\n  }\n}, {\n  name: 'montoTotal',\n  type: FieldType.string,\n  label: PRESTACIONES.fields.montoTotal,\n  styling: {\n    columns: 2\n  },\n  rules: {\n    min: 1,\n    required: true\n  },\n  disabled: true\n}, {\n  name: 'valorPrestacion',\n  type: FieldType.int,\n  label: PRESTACIONES.fields.valorPrestacion,\n  styling: {\n    columns: 2\n  },\n  rules: {\n    required: true\n  },\n  prefix: /*#__PURE__*/_jsx(AttachMoneyOutlinedIcon, {})\n}, {\n  name: 'montoReintegrar',\n  type: FieldType.string,\n  label: PRESTACIONES.fields.montoReintegrar,\n  styling: {\n    columns: 2\n  },\n  rules: {\n    required: true\n  },\n  disabled: true,\n  prefix: /*#__PURE__*/_jsx(AttachMoneyOutlinedIcon, {})\n}, {\n  name: 'periodo',\n  type: FieldType.options,\n  options: NOMENCLADOR.optionsPeriodoTope,\n  label: PRESTACIONES.fields.periodo,\n  styling: {\n    columns: 6\n  },\n  rules: {\n    required: true\n  }\n}, {\n  name: 'fechaPractica',\n  type: FieldType.date,\n  label: PRESTACIONES.fields.fechaPractica,\n  styling: {\n    columns: 6\n  },\n  rules: {\n    required: true\n  }\n}];\nexport default configPrestaciones;","map":null,"metadata":{},"sourceType":"module"}