{"ast":null,"code":"import _regeneratorRuntime from \"/reintegros/reintegros-frontend/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/reintegros/reintegros-frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport axios from 'axios';\nimport Cookies from 'universal-cookie';\naxios.defaults.baseURL = process.env.NEXT_PUBLIC_API;\nvar client = axios.create({\n  baseURL: process.env.NEXT_PUBLIC_API\n}); //Send token in all requests\n\nclient.interceptors.request.use( /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(config) {\n    var cookies, access;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            cookies = new Cookies();\n            access = cookies.get('access');\n\n            if (access) {\n              config.headers = {\n                Authorization: \"Bearer \".concat(access)\n              };\n            }\n\n            return _context.abrupt(\"return\", config);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}(), function (error) {\n  Promise.reject(error);\n}); //Refresh token and retry on 401 error\n\nclient.interceptors.response.use(function (response) {\n  return response;\n}, /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(error) {\n    var _error$response;\n\n    var cookies, originalRequest, refresh, res, access;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            cookies = new Cookies();\n            originalRequest = error.config;\n            refresh = cookies.get('refresh'); //If token is expired and exist refresh is saved on cookies i can try renew access\n\n            if (!(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401 && !originalRequest._retry && refresh)) {\n              _context2.next = 11;\n              break;\n            }\n\n            originalRequest._retry = true;\n            _context2.next = 7;\n            return axios.post('api/token/refresh/', {\n              refresh: refresh\n            });\n\n          case 7:\n            res = _context2.sent;\n            access = res.data.access;\n\n            if (access) {\n              cookies.set('access', access, {\n                path: '/'\n              });\n            } else {\n              //Refresh is invalid. TODO redirect login\n              cookies.remove('access');\n              cookies.remove('refresh');\n            }\n\n            return _context2.abrupt(\"return\", client(originalRequest));\n\n          case 11:\n            return _context2.abrupt(\"return\", Promise.reject(error));\n\n          case 12:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function (_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}());\n\nvar handleError = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(error) {\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            return _context3.abrupt(\"return\", Promise.reject(error));\n\n          case 1:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function handleError(_x3) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nvar handleSuccess = function handleSuccess(response) {\n  return response;\n};\n\nvar request = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(options) {\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            return _context4.abrupt(\"return\", client(options).then(handleSuccess)[\"catch\"](handleError));\n\n          case 1:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n\n  return function request(_x4) {\n    return _ref4.apply(this, arguments);\n  };\n}();\n\nvar post = /*#__PURE__*/function () {\n  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(url, data) {\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            return _context5.abrupt(\"return\", request({\n              url: \"\".concat(url),\n              data: data,\n              method: 'POST'\n            }));\n\n          case 1:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n\n  return function post(_x5, _x6) {\n    return _ref5.apply(this, arguments);\n  };\n}();\n\nvar get = /*#__PURE__*/function () {\n  var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(url) {\n    return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            return _context6.abrupt(\"return\", request({\n              url: url,\n              method: 'GET'\n            }));\n\n          case 1:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6);\n  }));\n\n  return function get(_x7) {\n    return _ref6.apply(this, arguments);\n  };\n}();\n\nvar remove = /*#__PURE__*/function () {\n  var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(url, id) {\n    return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            return _context7.abrupt(\"return\", request({\n              url: \"\".concat(url, \"/\").concat(id, \"/\"),\n              method: 'DELETE'\n            }));\n\n          case 1:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, _callee7);\n  }));\n\n  return function remove(_x8, _x9) {\n    return _ref7.apply(this, arguments);\n  };\n}();\n\nvar put = /*#__PURE__*/function () {\n  var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(url, data, id) {\n    return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            return _context8.abrupt(\"return\", request({\n              url: \"\".concat(url, \"/\").concat(id, \"/\"),\n              data: data,\n              method: 'PUT'\n            }));\n\n          case 1:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, _callee8);\n  }));\n\n  return function put(_x10, _x11, _x12) {\n    return _ref8.apply(this, arguments);\n  };\n}();\n\nvar patch = /*#__PURE__*/function () {\n  var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(url, data, id) {\n    return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            return _context9.abrupt(\"return\", request({\n              url: \"\".concat(url, \"/\").concat(id, \"/\"),\n              data: data,\n              method: 'PATCH'\n            }));\n\n          case 1:\n          case \"end\":\n            return _context9.stop();\n        }\n      }\n    }, _callee9);\n  }));\n\n  return function patch(_x13, _x14, _x15) {\n    return _ref9.apply(this, arguments);\n  };\n}();\n\nexport { post, request as send, client, get, put, remove, patch };","map":null,"metadata":{},"sourceType":"module"}