{"ast":null,"code":"import _toConsumableArray from \"/reintegros/reintegros-frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport _regeneratorRuntime from \"/reintegros/reintegros-frontend/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/reintegros/reintegros-frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"/reintegros/reintegros-frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { Box } from '@material-ui/core';\nimport React, { useEffect, useState } from 'react';\nimport { NOMENCLADOR, PRESTACIONES } from '../../../labels';\nimport AttachMoneyOutlinedIcon from '@material-ui/icons/AttachMoneyOutlined';\nimport Form, { FieldType } from '../../builder';\nimport { subDays } from 'date-fns';\nimport { get } from '../../api-call/service';\nexport var FormEditPrestaciones = function FormEditPrestaciones(_ref) {\n  var prestacion = _ref.prestacion,\n      submit = _ref.submit;\n\n  var _useState = useState(new Date()),\n      fechaDesde = _useState[0],\n      setFechaDesde = _useState[1];\n\n  var _useState2 = useState(''),\n      prestadorFilter = _useState2[0],\n      setPrestadorFilter = _useState2[1];\n\n  var _useState3 = useState(_objectSpread({}, prestacion)),\n      prestacionData = _useState3[0],\n      setPrestacionData = _useState3[1];\n\n  var _useState4 = useState({\n    prestaciones: []\n  }),\n      solicitud = _useState4[0],\n      setSolicitud = _useState4[1]; // let capitulo = prestacion?.capitulo?.value;\n  // const { data: prestadores, error: errorOnGetPrestadores } = useSWR(\n  //   `api/prestadores/?profEstado=alta&matricula=${prestadorFilter}`,\n  // );\n  // const { data: nomenclador, error: errorOnGetNomenclador } = useSWR(\n  //   `/api/nomenclador/?estado=activo&capitulo=${capitulo}`,\n  // );\n\n\n  var _useState5 = useState(false),\n      loaded = _useState5[0],\n      setLoaded = _useState5[1];\n\n  var updateCapitulo = function updateCapitulo(val, form) {\n    form.setValue('nomenclador', '');\n    form.setValue('modalidad', '');\n    form.setValue('cobertura', ''); // form.setValue('estadoActual', '');\n\n    form.setValue('prestador', '');\n    form.setValue('valorIprossNomenclador', '');\n    form.setValue('montoTotal', '');\n    form.setValue('valorPrestacion', '');\n    form.setValue('montoReintegrar', ''); // form.setValue('cantidad', '');\n\n    form.setValue('unidad', ''); // form.setValue('periodo', '');\n    // form.setValue('fechaPractica', '');\n    // form.setValue('fechaPracticaHasta', '');\n    // setPrestacionData({\n    //   capitulo: val,\n    //   nomenclador: '',\n    //   modalidad: '',\n    //   cobertura: '',\n    //   estadoActual: '',\n    //   prestador: '',\n    //   valorIprossNomenclador: '',\n    //   montoTotal: '',\n    //   valorPrestacion: '',\n    //   montoReintegrar: '',\n    //   cantidad: '',\n    //   unidad: '',\n    //   periodo: '',\n    //   fechaPractica: '',\n    //   fechaPracticaHasta: '',\n    // });\n  };\n\n  var prestadores = [];\n  var nomenclador = [];\n  var configPrestaciones = [{\n    name: 'capitulo',\n    type: FieldType.options,\n    label: PRESTACIONES.fields.capitulo,\n    options: function () {\n      var _options = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return get('api/capitulos/');\n\n              case 2:\n                return _context.abrupt(\"return\", _context.sent.data.results.map(function (c) {\n                  return {\n                    value: c.capitulo,\n                    label: \"\".concat(c.capitulo, \" - \").concat(c.descripcion)\n                  };\n                }));\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function options() {\n        return _options.apply(this, arguments);\n      }\n\n      return options;\n    }(),\n    styling: {\n      columns: 6\n    },\n    rules: {\n      required: true\n    },\n    onChange: updateCapitulo\n  }, {\n    name: 'nomenclador',\n    type: FieldType.options,\n    label: PRESTACIONES.fields.nomenclador,\n    options: function () {\n      var _options2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(form, query) {\n        var cap;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                cap = form.getValues()['capitulo'];\n\n                if (cap) {\n                  _context2.next = 5;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", []);\n\n              case 5:\n                if (typeof cap === 'object') {\n                  cap = cap.value;\n                }\n\n              case 6:\n                _context2.next = 8;\n                return get('/api/nomenclador/?estado=activo&capitulo=' + cap);\n\n              case 8:\n                nomenclador = _context2.sent.data.results;\n                return _context2.abrupt(\"return\", nomenclador.map(function (n) {\n                  var _n$capitulo, _n$capitulo2;\n\n                  return {\n                    value: n.id,\n                    label: \"\".concat(n.codigo, \"-\").concat(n.descripcion, \" (\").concat((_n$capitulo = n.capitulo) === null || _n$capitulo === void 0 ? void 0 : _n$capitulo.capitulo, \"-\").concat((_n$capitulo2 = n.capitulo) === null || _n$capitulo2 === void 0 ? void 0 : _n$capitulo2.descripcion, \")\")\n                  };\n                }));\n\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function options(_x, _x2) {\n        return _options2.apply(this, arguments);\n      }\n\n      return options;\n    }(),\n    onChange: function onChange(value, form) {\n      var item = nomenclador.find(function (elem) {\n        return elem.id === parseInt(value === null || value === void 0 ? void 0 : value.value);\n      });\n\n      if (nomenclador.length && item) {\n        var capitulo = form.getValues()['capitulo'];\n        var cobertura = 0;\n\n        if (capitulo === 40 || capitulo === 41 || capitulo === 43) {\n          cobertura = 90;\n        } else {\n          var _solicitud$prestacion;\n\n          var isFullCobertura = solicitud === null || solicitud === void 0 ? void 0 : (_solicitud$prestacion = solicitud.prestaciones) === null || _solicitud$prestacion === void 0 ? void 0 : _solicitud$prestacion.find(function (p) {\n            return p.capitulo === 40 || p.capitulo === 41 || p.capitulo === 43;\n          });\n\n          if (isFullCobertura) {\n            cobertura = 100;\n          } else {\n            cobertura = item.modalidadPrestacion === 'ambulatorio' ? 80 : 90;\n          }\n        }\n\n        var montototal = parseFloat(item === null || item === void 0 ? void 0 : item.valorIpross);\n        var montoReintegrar = (montototal - cobertura * montototal / 100).toFixed(2);\n        form.setValue('valorIprossNomenclador', item === null || item === void 0 ? void 0 : item.valorIpross);\n        form.setValue('montoReintegrar', montoReintegrar);\n        form.setValue('modalidad', item.modalidadPrestacion);\n        form.setValue('cobertura', cobertura);\n        form.setValue('estadoActual', 'enCurso');\n        form.setValue('cantidad', 1);\n        form.setValue('unidad', (item === null || item === void 0 ? void 0 : item.unidad) || 'unidades');\n        form.setValue('montoTotal', montototal);\n      } else {\n        form.setValue('valorIprossNomenclador', '');\n        form.setValue('montoReintegrar', '');\n        form.setValue('modalidad', '');\n        form.setValue('cobertura', '');\n        form.setValue('estadoActual', 'enCurso');\n        form.setValue('cantidad', '');\n        form.setValue('unidad', '');\n        form.setValue('montoTotal', '');\n      }\n    },\n    styling: {\n      columns: 12\n    },\n    rules: {\n      required: true\n    }\n  }, {\n    name: 'modalidad',\n    type: FieldType.options,\n    label: PRESTACIONES.fields.modalidad,\n    options: NOMENCLADOR.optionsModalidadPresentacion,\n    styling: {\n      columns: 6\n    },\n    rules: {\n      required: true\n    },\n    disabled: true\n  }, {\n    name: 'cobertura',\n    type: FieldType.string,\n    label: PRESTACIONES.fields.cobertura,\n    styling: {\n      columns: 6\n    },\n    rules: {\n      required: true\n    },\n    disabled: true,\n    prefix: /*#__PURE__*/_jsx(_Fragment, {\n      children: \"%\"\n    })\n  }, {\n    name: 'estadoActual',\n    type: FieldType.options,\n    label: PRESTACIONES.fields['estadoActual'],\n    options: PRESTACIONES.optionsEstadoActual,\n    styling: {\n      columns: 6\n    },\n    rules: {\n      required: true\n    },\n    disabled: true\n  }, {\n    name: 'prestador',\n    type: FieldType.options,\n    label: PRESTACIONES.fields.prestador,\n    options: function () {\n      var _options3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                return _context3.abrupt(\"return\", prestadores);\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function options() {\n        return _options3.apply(this, arguments);\n      }\n\n      return options;\n    }(),\n    onUpdate: function () {\n      var _onUpdate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(val, form) {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (!(val === '')) {\n                  _context4.next = 3;\n                  break;\n                }\n\n                prestadores = [];\n                return _context4.abrupt(\"return\");\n\n              case 3:\n                _context4.next = 5;\n                return get(\"api/prestadores/?profEstado=alta&matricula=\".concat(val));\n\n              case 5:\n                prestadores = _context4.sent.data.results.map(function (p) {\n                  return {\n                    value: p.id,\n                    label: \"\".concat(p.matricula, \" - \").concat(p.nombre, \" \").concat(p.apellido)\n                  };\n                });\n\n              case 6:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      function onUpdate(_x3, _x4) {\n        return _onUpdate.apply(this, arguments);\n      }\n\n      return onUpdate;\n    }(),\n    styling: {\n      columns: 6\n    },\n    rules: {\n      required: true\n    }\n  }, {\n    name: 'br',\n    type: FieldType.br,\n    label: ''\n  }, {\n    name: 'valorIprossNomenclador',\n    type: FieldType.string,\n    label: PRESTACIONES.fields.valorIprossNomenclador,\n    styling: {\n      columns: 3\n    },\n    rules: {\n      required: true\n    },\n    disabled: true,\n    prefix: /*#__PURE__*/_jsx(AttachMoneyOutlinedIcon, {})\n  }, {\n    name: 'montoTotal',\n    type: FieldType.string,\n    label: PRESTACIONES.fields.montoTotal,\n    styling: {\n      columns: 3\n    },\n    rules: {\n      min: 1,\n      required: true\n    },\n    disabled: true\n  }, {\n    name: 'valorPrestacion',\n    type: FieldType[\"float\"],\n    label: PRESTACIONES.fields.valorPrestacion,\n    styling: {\n      columns: 3\n    },\n    rules: {\n      required: true\n    },\n    prefix: /*#__PURE__*/_jsx(AttachMoneyOutlinedIcon, {})\n  }, {\n    name: 'montoReintegrar',\n    type: FieldType.string,\n    label: PRESTACIONES.fields.montoReintegrar,\n    styling: {\n      columns: 3\n    },\n    rules: {\n      required: true\n    },\n    disabled: true,\n    prefix: /*#__PURE__*/_jsx(AttachMoneyOutlinedIcon, {})\n  }, {\n    name: 'cantidad',\n    type: FieldType[\"int\"],\n    label: PRESTACIONES.fields.cantidad,\n    styling: {\n      columns: 6\n    },\n    rules: {\n      min: 1,\n      required: true\n    },\n    onChange: function onChange(val, form) {\n      var valorIpross = form.getValues()['valorIprossNomenclador'];\n      var montoTotal = valorIpross * val;\n      form.setValue('montoTotal', montoTotal.toFixed(2));\n      var cobertura = form.getValues()['cobertura'];\n      var montoReintegrar = (montoTotal * parseFloat(cobertura) / 100).toFixed(2);\n      form.setValue('montoReintegrar', montoReintegrar);\n    }\n  }, {\n    name: 'unidad',\n    type: FieldType.string,\n    label: PRESTACIONES.fields.unidad,\n    styling: {\n      columns: 6\n    },\n    disabled: true\n  }, {\n    name: 'periodo',\n    type: FieldType.options,\n    options: NOMENCLADOR.optionsPeriodoTope,\n    label: PRESTACIONES.fields.periodo,\n    styling: {\n      columns: 6\n    },\n    rules: {\n      required: true\n    }\n  }];\n\n  var _useState6 = useState(configPrestaciones),\n      formConfig = _useState6[0],\n      setFormConfig = _useState6[1];\n\n  var fechaField = {\n    name: 'fechaPractica',\n    type: FieldType.date,\n    label: PRESTACIONES.fields.fechaPractica,\n    styling: {\n      columns: 6\n    },\n    rules: {\n      required: true,\n      min: subDays(new Date(), 60).toString(),\n      max: new Date().toString()\n    },\n    onChange: function onChange(val, form) {\n      setFechaDesde(val);\n    }\n  };\n  var fechaHastaField = {\n    name: 'fechaPracticaHasta',\n    type: FieldType.date,\n    label: PRESTACIONES.fields.fechaPracticaHasta,\n    styling: {\n      columns: 6\n    },\n    rules: {\n      required: true,\n      min: fechaDesde.toString() // max: addDays(fechaDesde, 60).toString(),\n\n    }\n  };\n  var isDateRange = false;\n  var dateSelect = {\n    name: 'isDateRange',\n    type: FieldType.options,\n    label: 'Fecha / Rango',\n    options: PRESTACIONES.optionsDate,\n    styling: {\n      columns: 6\n    },\n    onChange: function onChange(val, form) {\n      var c = [].concat(configPrestaciones, [dateSelect, fechaField]);\n\n      if (val === 'range') {\n        c.push(fechaHastaField);\n        isDateRange = true;\n      } else {\n        isDateRange = false;\n      }\n\n      setFormConfig(c);\n    }\n  };\n  useEffect(function () {\n    if (!loaded) {\n      var conf = [].concat(_toConsumableArray(formConfig), [dateSelect, fechaField]);\n\n      if (prestacion.fechaPracticaHasta) {\n        conf.push(fechaHastaField);\n      }\n\n      setFormConfig(conf);\n      get(\"api/solicitudes/\".concat(prestacion.solicitud.id)).then(function (response) {\n        setSolicitud(response.data);\n      });\n      setLoaded(true);\n    }\n  }, [prestacion, setFormConfig]);\n\n  var handleCancelPrestacion = function handleCancelPrestacion() {\n    clearForm();\n  };\n\n  var clearForm = function clearForm() {\n    var newData = {};\n    formConfig.forEach(function (field) {\n      newData[field.name] = '';\n    });\n  };\n\n  var handleSubmitPrestacion = function handleSubmitPrestacion(data) {\n    submit(_objectSpread({\n      id: prestacion.id\n    }, data));\n  };\n\n  return /*#__PURE__*/_jsx(Box, {\n    margin: 3,\n    children: /*#__PURE__*/_jsx(Form, {\n      config: formConfig,\n      data: prestacion,\n      onSubmit: handleSubmitPrestacion,\n      onCancel: function onCancel() {\n        handleCancelPrestacion();\n      }\n    })\n  });\n};","map":null,"metadata":{},"sourceType":"module"}