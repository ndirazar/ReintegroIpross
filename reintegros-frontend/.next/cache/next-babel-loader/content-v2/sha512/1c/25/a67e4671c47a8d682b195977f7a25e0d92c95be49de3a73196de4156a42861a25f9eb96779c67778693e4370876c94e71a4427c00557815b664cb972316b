{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useEffect, useState } from 'react';\nimport { FieldType } from '../builder/FormField';\nimport { SOLICITUDES } from '../../labels';\nimport { Grid, Typography, makeStyles } from '@material-ui/core';\nimport FieldRender from '../builder/FieldRender';\nimport { send } from '../api-call/service';\nimport { IconButton } from '@material-ui/core';\nimport { Edit } from '@material-ui/icons';\nconst useStyles = makeStyles(theme => ({\n  afiliadoField: {\n    display: 'None'\n  },\n  afiliadoSearch: {\n    paddingLeft: '10px'\n  },\n  afiliadoDetail: {\n    '& h6': {\n      fontSize: '14px'\n    }\n  },\n  cudEditBtn: {\n    padding: '8px'\n  },\n  cudEditIcon: {\n    fontSize: '.8em'\n  },\n  cudError: {\n    fontSize: '14px'\n  }\n}));\nexport default function Afiliados({\n  form,\n  onSelect,\n  formContent\n}) {\n  var _formContent$solicitu;\n\n  const {\n    0: afiliadoError,\n    1: setAfiliadoError\n  } = useState('');\n  const {\n    0: afiliado,\n    1: setAfiliado\n  } = useState((formContent === null || formContent === void 0 ? void 0 : (_formContent$solicitu = formContent.solicitud) === null || _formContent$solicitu === void 0 ? void 0 : _formContent$solicitu.afiliado) || null);\n  const classes = useStyles();\n  const {\n    0: cudError,\n    1: setCudError\n  } = useState(null);\n  const {\n    0: cudDisabled,\n    1: setCudDisabled\n  } = useState(false);\n  const searchConfig = {\n    name: 'numeroAfiliado',\n    type: FieldType.string,\n    label: SOLICITUDES.fields['numeroAfiliado'],\n    onChange: async (value, f) => {\n      var _afiliadoTemp;\n\n      const regex = /^[0-9]{2}-[0-9]{8}\\/[0-9]{2}$/;\n      const isValid = value.match(regex);\n      let afiliadoTemp = null;\n      setAfiliadoError('');\n\n      if (isValid) {\n        try {\n          const val = await send({\n            url: `api/verificar/afiliado`,\n            data: {\n              afiliado: value\n            },\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            }\n          });\n\n          if (val.data.afiliado) {\n            afiliadoTemp = val.data.afiliado;\n          } else {\n            afiliadoTemp = null;\n            setAfiliadoError('Un error');\n          }\n        } catch (error) {\n          var _error$response, _error$response$data;\n\n          afiliadoTemp = null;\n\n          if ((_error$response = error.response) !== null && _error$response !== void 0 && (_error$response$data = _error$response.data) !== null && _error$response$data !== void 0 && _error$response$data.message) {\n            setAfiliadoError(error.response.data.message);\n          } else {\n            setAfiliadoError('Error consultando afiliado');\n          }\n        }\n      }\n\n      setAfiliado(afiliadoTemp);\n      form.setValue('afiliado', afiliadoTemp);\n      form.setValue('cud', ((_afiliadoTemp = afiliadoTemp) === null || _afiliadoTemp === void 0 ? void 0 : _afiliadoTemp.cud) || '');\n      onSelect(afiliadoTemp);\n    },\n    styling: {\n      columns: 3\n    },\n    rules: {\n      required: true\n    }\n  };\n  const afiliadoField = {\n    name: 'afiliado',\n    type: FieldType.string,\n    label: SOLICITUDES.fields['afiliado'],\n    styling: {\n      columns: 3\n    },\n    rules: {\n      required: true\n    },\n    disable: true\n  };\n  const cudField = {\n    name: 'cud',\n    type: FieldType.int,\n    label: SOLICITUDES.fields['cud'],\n    styling: {\n      columns: 3\n    },\n    rules: {\n      required: false,\n      max: 9999999999\n    },\n    disabled: cudDisabled,\n    onBlur: async (value, form) => {\n      setCudError(false);\n\n      if (!value) {\n        return false;\n      }\n\n      if (parseInt(value) > cudField.rules.max) {\n        setCudError('El valor no ser mayor a ' + cudField.rules.max);\n        return false;\n      }\n\n      updateCud(value);\n    },\n    suffix: /*#__PURE__*/_jsx(_Fragment, {\n      children: cudDisabled && /*#__PURE__*/_jsx(IconButton, {\n        onClick: () => {\n          setCudDisabled(false);\n        },\n        color: \"default\",\n        className: classes.cudEditBtn,\n        children: /*#__PURE__*/_jsx(Edit, {\n          className: classes.cudEditIcon\n        })\n      })\n    })\n  };\n  useEffect(() => {\n    setCudDisabled(afiliado && afiliado.cud ? true : false);\n  }, [afiliado, setCudDisabled]);\n\n  const updateCud = async cud => {\n    setCudError(null);\n\n    try {\n      const val = await send({\n        url: `api/verificar/cud`,\n        data: {\n          afiliado: afiliado === null || afiliado === void 0 ? void 0 : afiliado.id,\n          cud: cud\n        },\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      setCudDisabled(true);\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n\n      const errorMsg = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Error validando CUD';\n      setCudError(errorMsg);\n    }\n  };\n\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: /*#__PURE__*/_jsxs(Grid, {\n      container: true,\n      spacing: 2,\n      children: [/*#__PURE__*/_jsx(Grid, {\n        item: true,\n        md: 3,\n        children: /*#__PURE__*/_jsx(\"div\", {\n          className: classes.afiliadoSearch,\n          children: /*#__PURE__*/_jsx(FieldRender, {\n            field: searchConfig,\n            form: form,\n            data: {\n              numeroAfiliado: afiliado === null || afiliado === void 0 ? void 0 : afiliado.numeroAfiliado\n            }\n          })\n        })\n      }), /*#__PURE__*/_jsxs(Grid, {\n        item: true,\n        md: 3,\n        children: [/*#__PURE__*/_jsx(\"div\", {\n          className: classes.afiliadoField,\n          children: /*#__PURE__*/_jsx(FieldRender, {\n            field: afiliadoField,\n            form: form,\n            data: []\n          })\n        }), /*#__PURE__*/_jsxs(\"div\", {\n          className: classes.afiliadoDetail,\n          children: [afiliado && /*#__PURE__*/_jsx(FieldRender, {\n            form: form,\n            field: {\n              name: 'afiliadoNombre',\n              type: FieldType.string,\n              label: 'Afiliado',\n              disabled: true\n            },\n            data: {\n              afiliadoNombre: afiliado && `${afiliado === null || afiliado === void 0 ? void 0 : afiliado.nombre} ${afiliado === null || afiliado === void 0 ? void 0 : afiliado.apellido}`\n            }\n          }), afiliadoError && /*#__PURE__*/_jsx(Typography, {\n            component: \"h6\",\n            color: \"error\",\n            children: afiliadoError\n          })]\n        })]\n      }), /*#__PURE__*/_jsxs(Grid, {\n        item: true,\n        md: 3,\n        children: [/*#__PURE__*/_jsx(\"div\", {\n          children: /*#__PURE__*/_jsx(FieldRender, {\n            field: cudField,\n            form: form,\n            data: {\n              cud: afiliado === null || afiliado === void 0 ? void 0 : afiliado.cud\n            }\n          })\n        }), cudError && /*#__PURE__*/_jsx(Typography, {\n          component: \"h6\",\n          color: \"error\",\n          className: classes.cudError,\n          children: cudError\n        })]\n      })]\n    })\n  });\n}","map":null,"metadata":{},"sourceType":"module"}