{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n// Third-party imports\nimport { IconButton, InputLabel, Link, makeStyles, Typography } from '@material-ui/core';\nimport { Cancel } from '@material-ui/icons';\nimport React, { useEffect, useState } from 'react';\nimport { getFileName } from '../common/helpers';\nconst useStyles = makeStyles(theme => ({\n  helpText: {\n    fontSize: '12px'\n  },\n  fileLink: {\n    fontSize: '16px'\n  }\n})); // Component\n\nexport default function FileInput(props) {\n  const {\n    0: clear,\n    1: setClear\n  } = useState(false); // const [fileName, setFileName] = useState('');\n  // const [fileContent, setFileContent] = useState<File | string | File[] | string[]>(null);\n\n  const {\n    0: fileList,\n    1: setFileList\n  } = useState(props.value || []);\n  const {\n    0: showInput,\n    1: setShowInput\n  } = useState(true);\n  const classes = useStyles(); // const { reset, register, watch, setError, setValue, clearErrors } = methods;\n\n  const changeHandler = event => {\n    const target = event.target;\n    setClear(false);\n\n    try {\n      if (!props.multiple) {\n        var _props$methods;\n\n        const reader = new FileReader();\n        const file = target.files[0]; // setFileName(file.name);\n\n        reader.onload = () => {\n          props.onReadData && props.onReadData({\n            result: reader.result.toString(),\n            file\n          });\n        }; // setFileContent(file);\n\n\n        reader.readAsText(file);\n        setFileList([file.name]);\n        (_props$methods = props.methods) === null || _props$methods === void 0 ? void 0 : _props$methods.setValue(props.name, [file]);\n        props.onChange && props.onChange(file);\n      } else {\n        var _props$methods2;\n\n        const faux = [];\n        const list = [];\n        Array.from(target.files).forEach(file => {\n          const reader = new FileReader();\n\n          reader.onload = () => {\n            props.onReadData && props.onReadData({\n              result: reader.result.toString(),\n              file\n            });\n          };\n\n          reader.readAsText(file);\n          faux.push(file);\n          list.push(file.name);\n        }); // setFileContent(faux);\n\n        setFileList([...fileList, ...list]);\n        (_props$methods2 = props.methods) === null || _props$methods2 === void 0 ? void 0 : _props$methods2.setValue(props.name, faux);\n        props.onChange && props.onChange(faux);\n      }\n    } catch (e) {//TODO some thing\n    }\n  };\n\n  const removeFile = file => {\n    if (typeof fileList === 'string') {\n      setFileList([]);\n    } else {\n      const files = fileList.filter(f => f !== file);\n      setFileList(files);\n    } // setFileName(null);\n    // setFileContent(null);\n    // setClear(true);\n\n\n    props.onRemove && props.onRemove(file);\n  };\n\n  const getFileListItem = file => {\n    return /*#__PURE__*/_jsxs(Typography, {\n      className: classes.fileLink,\n      children: [/*#__PURE__*/_jsx(Link, {\n        href: file,\n        target: \"_blank\",\n        children: getFileName(file)\n      }), /*#__PURE__*/_jsx(IconButton, {\n        onClick: () => {\n          removeFile(file);\n        },\n        color: \"default\",\n        children: /*#__PURE__*/_jsx(Cancel, {})\n      })]\n    });\n  };\n\n  const getFileList = () => {\n    if (typeof fileList === 'string') {\n      return /*#__PURE__*/_jsx(\"span\", {\n        children: getFileListItem(fileList)\n      });\n    }\n\n    return fileList.map((file, i) => {\n      return /*#__PURE__*/_jsx(\"span\", {\n        children: getFileListItem(file)\n      }, i);\n    });\n  }; // useEffect(() => {\n  //   if () {\n  //     let files = props.value || [];\n  //     if (props.value && typeof props.value === 'string') {\n  //       files = [files];\n  //     }\n  //     setFileList(files);\n  //   }\n  // }, [props, fileList, setFileList]);\n\n\n  useEffect(() => {\n    setShowInput(!props.multiple && fileList.length <= 0 || props.multiple && props.max && fileList.length < props.max);\n  }, [props, fileList, setShowInput]);\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [props.label && /*#__PURE__*/_jsx(InputLabel, {\n      htmlFor: 'file-input',\n      children: props.label\n    }), showInput && /*#__PURE__*/_jsx(\"input\", {\n      accept: props.accept,\n      id: \"file-input\",\n      multiple: props.multiple,\n      type: \"file\",\n      onChange: changeHandler\n    }), props.accept && /*#__PURE__*/_jsxs(Typography, {\n      className: classes.helpText,\n      color: \"textPrimary\",\n      variant: \"caption\",\n      display: \"block\",\n      gutterBottom: true,\n      children: [\"Archivos aceptados: \", props.accept]\n    }), props.error && /*#__PURE__*/_jsx(Typography, {\n      component: \"p\",\n      color: \"error\",\n      children: props.error\n    }), getFileList()]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}