{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport _regeneratorRuntime from \"/reintegros/reintegros-frontend/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/reintegros/reintegros-frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport AttachMoneyOutlinedIcon from '@material-ui/icons/AttachMoneyOutlined';\nimport React from 'react';\nimport { PRESTACIONES, NOMENCLADOR } from '../../../labels';\nimport { get } from '../../api-call/service';\nimport { FieldType } from '../../builder/FormField';\nvar nomenclador = [];\nvar prestadores = [];\nvar configPrestaciones = [{\n  name: 'categoria',\n  type: FieldType.options,\n  label: PRESTACIONES.fields.categoria,\n  options: function () {\n    var _options = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return get('api/categorias/');\n\n            case 2:\n              return _context.abrupt(\"return\", _context.sent.data.results.map(function (c) {\n                return {\n                  value: c.id,\n                  label: c.nombre\n                };\n              }));\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function options() {\n      return _options.apply(this, arguments);\n    }\n\n    return options;\n  }(),\n  styling: {\n    columns: 6\n  },\n  rules: {\n    required: true\n  }\n}, {\n  name: 'nomenclador',\n  type: FieldType.options,\n  label: PRESTACIONES.fields.nomenclador,\n  options: function () {\n    var _options2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return get('/api/nomenclador/');\n\n            case 2:\n              nomenclador = _context2.sent.data.results;\n              return _context2.abrupt(\"return\", nomenclador.map(function (n) {\n                var _n$capitulo, _n$capitulo2;\n\n                return {\n                  value: n.id,\n                  label: \"\".concat(n.codigo, \"-\").concat(n.descripcion, \" (\").concat((_n$capitulo = n.capitulo) === null || _n$capitulo === void 0 ? void 0 : _n$capitulo.capitulo, \"-\").concat((_n$capitulo2 = n.capitulo) === null || _n$capitulo2 === void 0 ? void 0 : _n$capitulo2.descripcion, \")\")\n                };\n              }));\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    function options() {\n      return _options2.apply(this, arguments);\n    }\n\n    return options;\n  }(),\n  onChange: function onChange(value, form) {\n    var item = nomenclador.find(function (elem) {\n      return elem.id === parseInt(value === null || value === void 0 ? void 0 : value.value);\n    });\n\n    if (nomenclador.length && item) {\n      var _item$capitulo, _item$capitulo2;\n\n      form.setValue('valorIprossNomenclador', item === null || item === void 0 ? void 0 : item.valorIpross);\n      var montoReintegrar = (parseFloat(item === null || item === void 0 ? void 0 : item.valorIpross) - parseFloat(item === null || item === void 0 ? void 0 : item.valorIpross) * (parseFloat(item === null || item === void 0 ? void 0 : (_item$capitulo = item.capitulo) === null || _item$capitulo === void 0 ? void 0 : _item$capitulo.coseguro) / 100)).toFixed(2);\n      form.setValue('montoReintegrar', montoReintegrar, {\n        shouldValidate: true,\n        shouldDirty: true\n      });\n      form.setValue('cobertura', \"\".concat(100 - parseInt(item === null || item === void 0 ? void 0 : (_item$capitulo2 = item.capitulo) === null || _item$capitulo2 === void 0 ? void 0 : _item$capitulo2.coseguro), \"%\"), {\n        shouldValidate: true,\n        shouldDirty: true\n      });\n      form.setValue('modalidad', item.modalidadPrestacion, {\n        shouldValidate: true,\n        shouldDirty: true\n      });\n      form.setValue('estadoActual', 'enCurso');\n      form.setValue('cantidad', 1);\n      form.setValue('montoTotal', item === null || item === void 0 ? void 0 : item.valorIpross);\n    }\n  },\n  styling: {\n    columns: 12\n  },\n  rules: {\n    required: true\n  }\n}, {\n  name: 'modalidad',\n  type: FieldType.options,\n  label: PRESTACIONES.fields.modalidad,\n  options: NOMENCLADOR.optionsModalidadPresentacion,\n  styling: {\n    columns: 6\n  },\n  rules: {\n    required: true\n  },\n  disabled: true\n}, {\n  name: 'cobertura',\n  type: FieldType.string,\n  label: PRESTACIONES.fields.cobertura,\n  styling: {\n    columns: 6\n  },\n  rules: {\n    required: true\n  },\n  disabled: true\n}, {\n  name: 'estadoActual',\n  type: FieldType.options,\n  label: PRESTACIONES.fields['estadoActual'],\n  options: PRESTACIONES.optionsEstadoActual,\n  styling: {\n    columns: 6\n  },\n  rules: {\n    required: true\n  },\n  disabled: true\n}, {\n  name: 'prestador',\n  type: FieldType.options,\n  label: PRESTACIONES.fields.prestador,\n  options: function () {\n    var _options3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              return _context3.abrupt(\"return\", prestadores);\n\n            case 1:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    function options() {\n      return _options3.apply(this, arguments);\n    }\n\n    return options;\n  }(),\n  onUpdate: function () {\n    var _onUpdate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(val, form) {\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              if (!(val === '')) {\n                _context4.next = 3;\n                break;\n              }\n\n              prestadores = [];\n              return _context4.abrupt(\"return\");\n\n            case 3:\n              _context4.next = 5;\n              return get(\"api/prestadores/?profEstado=alta&matricula=\".concat(val));\n\n            case 5:\n              prestadores = _context4.sent.data.results.map(function (p) {\n                return {\n                  value: p.id,\n                  label: \"\".concat(p.matricula, \" - \").concat(p.nombre, \" \").concat(p.apellido)\n                };\n              });\n\n            case 6:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    function onUpdate(_x, _x2) {\n      return _onUpdate.apply(this, arguments);\n    }\n\n    return onUpdate;\n  }(),\n  styling: {\n    columns: 6\n  },\n  rules: {\n    required: true\n  }\n}, {\n  name: 'br',\n  type: FieldType.br,\n  label: ''\n}, {\n  name: 'valorIprossNomenclador',\n  type: FieldType.string,\n  label: PRESTACIONES.fields.valorIprossNomenclador,\n  styling: {\n    columns: 2\n  },\n  rules: {\n    required: true\n  },\n  disabled: true,\n  prefix: /*#__PURE__*/_jsx(AttachMoneyOutlinedIcon, {})\n}, {\n  name: 'cantidad',\n  type: FieldType[\"int\"],\n  label: PRESTACIONES.fields.cantidad,\n  styling: {\n    columns: 2\n  },\n  rules: {\n    min: 1,\n    required: true\n  },\n  onChange: function onChange(val, form) {\n    var valorIpross = form.getValues()['valorIprossNomenclador'];\n    var montoTotal = valorIpross * val;\n    form.setValue('montoTotal', montoTotal);\n    var cobertura = form.getValues()['cobertura'];\n    var montoReintegrar = (montoTotal * parseFloat(cobertura) / 100).toFixed(2);\n    form.setValue('montoReintegrar', montoReintegrar);\n  }\n}, {\n  name: 'montoTotal',\n  type: FieldType.string,\n  label: PRESTACIONES.fields.montoTotal,\n  styling: {\n    columns: 2\n  },\n  rules: {\n    min: 1,\n    required: true\n  },\n  disabled: true\n}, {\n  name: 'valorPrestacion',\n  type: FieldType[\"int\"],\n  label: PRESTACIONES.fields.valorPrestacion,\n  styling: {\n    columns: 2\n  },\n  rules: {\n    required: true\n  },\n  prefix: /*#__PURE__*/_jsx(AttachMoneyOutlinedIcon, {})\n}, {\n  name: 'montoReintegrar',\n  type: FieldType.string,\n  label: PRESTACIONES.fields.montoReintegrar,\n  styling: {\n    columns: 2\n  },\n  rules: {\n    required: true\n  },\n  disabled: true,\n  prefix: /*#__PURE__*/_jsx(AttachMoneyOutlinedIcon, {})\n}, {\n  name: 'periodo',\n  type: FieldType.options,\n  options: NOMENCLADOR.optionsPeriodoTope,\n  label: PRESTACIONES.fields.periodo,\n  styling: {\n    columns: 6\n  },\n  rules: {\n    required: true\n  }\n}, {\n  name: 'fechaPractica',\n  type: FieldType.date,\n  label: PRESTACIONES.fields.fechaPractica,\n  styling: {\n    columns: 6\n  },\n  rules: {\n    required: true\n  }\n}];\nexport default configPrestaciones;","map":null,"metadata":{},"sourceType":"module"}