{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useState, useEffect } from 'react';\nimport { AppBar, Box, Button, Toolbar, Container, Typography, Grid, Badge, List, ListItem, ListItemText, Divider, Drawer, IconButton } from '@material-ui/core';\nimport { useRouter } from 'next/router';\nimport { APP_NAME, LOGIN, MAIN_ENTITIES, ADMIN_ENTITIES, ACCOUNTS_ENTITIES, NAVBAR } from '../../../labels';\nimport Cookies from 'universal-cookie';\nimport HomeIcon from '@material-ui/icons/Home';\nimport PeopleRoundedIcon from '@material-ui/icons/PeopleRounded';\nimport { Apartment, Contacts, FindInPage, Receipt } from '@material-ui/icons';\nimport AccountBalance from '@material-ui/icons/AccountBalance';\nimport Gavel from '@material-ui/icons/Gavel';\nimport PeopleOutline from '@material-ui/icons/PeopleOutline';\nimport PeopleAlt from '@material-ui/icons/PeopleAlt';\nimport Dns from '@material-ui/icons/Dns';\nimport Notifications from '@material-ui/icons/Notifications';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ViewList from '@material-ui/icons/ViewList';\nimport StarIcon from '@material-ui/icons/Star';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport useStyles from './NavbarStyle';\nimport Notificaciones from '../../notificaciones/Notificaciones';\nimport { send } from '../../api-call/service';\nimport { getUser } from '../helpers';\nexport default function NavBar() {\n  const {\n    0: user,\n    1: setUser\n  } = useState(getUser());\n  const router = useRouter();\n  const cookies = new Cookies();\n  const classes = useStyles();\n  const {\n    0: activeSections,\n    1: setActiveSections\n  } = useState([]);\n  const {\n    0: active,\n    1: setActive\n  } = useState(user ? 'solicitudes' : 'login');\n  const {\n    0: userName,\n    1: setUserName\n  } = useState('');\n  const {\n    0: delegaciones,\n    1: setDelegaciones\n  } = useState([]);\n  const {\n    0: delegacion,\n    1: setDelegacion\n  } = useState('');\n  const {\n    0: displayNotifications,\n    1: setDisplayNotifications\n  } = useState(false);\n  const {\n    0: notifications,\n    1: setNotifications\n  } = useState(null);\n  const {\n    0: openDrawer,\n    1: setOpenDrawer\n  } = useState(false);\n  const {\n    0: mobileView,\n    1: setMobileView\n  } = useState(false);\n  const NAV_BUTTONS = [{\n    label: NAVBAR.home,\n    action: () => {\n      router.push('solicitudes');\n    },\n    permissions: ['Administrador', 'AuditoriaAdministrativa', 'AuditoriaCentral', 'AuditoriaMedica', 'Contaduria', 'Delegado', 'Presidencia', 'Reintegro', 'SoloLectura', 'Tesoreria']\n  }, {\n    label: NAVBAR.accounts,\n    action: () => {\n      router.push('cuentas_terceros');\n    },\n    permissions: ['Administrador', 'Reintegro', 'Delegado']\n  }, {\n    label: NAVBAR.config,\n    action: () => {\n      router.push('nomenclador');\n    },\n    permissions: ['Administrador', 'Presidencia']\n  }];\n  const {\n    0: navButtons,\n    1: setNavButtons\n  } = useState([]);\n\n  const changeDelegacion = async event => {\n    const user_response = await send({\n      url: `api/usuarios/${user === null || user === void 0 ? void 0 : user.id}/actualizar-delegacion-principal/`,\n      data: {\n        delegacionPrincipal: event.target.value\n      },\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    setDelegacion(event.target.value);\n    localStorage.setItem('user', JSON.stringify(user_response.data));\n  };\n\n  const getNotifications = async () => {\n    const preview = await send({\n      url: `api/usuarios/${user.id}/notificaciones`,\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    setNotifications(preview.data.notifications);\n  };\n  /**\n   * Funcion que se encarga de actualizar las notificaciones del usuario y de abrir y cerrar\n   * el listado no notificaciones\n   */\n\n\n  const showNotifications = async () => {\n    getNotifications();\n    setDisplayNotifications(!displayNotifications);\n  };\n\n  useEffect(() => {\n    localStorage.setItem('notifications', JSON.stringify(notifications));\n  }, [notifications]);\n  const sectionIcons = [{\n    section: 'solicitudes',\n    icon: /*#__PURE__*/_jsx(PeopleRoundedIcon, {\n      className: classes.sectionIcon\n    })\n  }, {\n    section: 'auditorias',\n    icon: /*#__PURE__*/_jsx(FindInPage, {\n      className: classes.sectionIcon\n    })\n  }, {\n    section: 'lotes',\n    icon: /*#__PURE__*/_jsx(ViewList, {\n      className: classes.sectionIcon\n    })\n  }, {\n    section: 'cuentas_terceros',\n    icon: /*#__PURE__*/_jsx(AccountBalance, {\n      className: classes.sectionIcon\n    })\n  }, {\n    section: 'cuentas_judiciales',\n    icon: /*#__PURE__*/_jsx(Gavel, {\n      className: classes.sectionIcon\n    })\n  }, {\n    section: 'usuarios',\n    icon: /*#__PURE__*/_jsx(PeopleAlt, {\n      className: classes.sectionIcon\n    })\n  }, {\n    section: 'afiliados',\n    icon: /*#__PURE__*/_jsx(PeopleOutline, {\n      className: classes.sectionIcon\n    })\n  }, {\n    section: 'nomenclador',\n    icon: /*#__PURE__*/_jsx(Dns, {\n      className: classes.sectionIcon\n    })\n  }, {\n    section: 'cupones',\n    icon: /*#__PURE__*/_jsx(Receipt, {\n      className: classes.sectionIcon\n    })\n  }, {\n    section: 'delegaciones',\n    icon: /*#__PURE__*/_jsx(Apartment, {\n      className: classes.sectionIcon\n    })\n  }, {\n    section: 'prestadores',\n    icon: /*#__PURE__*/_jsx(Contacts, {\n      className: classes.sectionIcon\n    })\n  }];\n\n  const getButtonIcon = section => {\n    const icon = sectionIcons.find(s => s.section === section);\n    return icon ? icon.icon : /*#__PURE__*/_jsx(_Fragment, {});\n  };\n\n  useEffect(() => {\n    // Active tabs\n    const currentRoute = router.route.replace('/', '');\n    const isAdminRoute = ADMIN_ENTITIES.find(e => e.page === currentRoute);\n    const isAccountRoute = ACCOUNTS_ENTITIES.find(e => e.page === currentRoute);\n    setActive(currentRoute);\n\n    if (isAdminRoute) {\n      setActiveSections(ADMIN_ENTITIES);\n    } else if (isAccountRoute) {\n      setActiveSections(ACCOUNTS_ENTITIES);\n    } else {\n      setActiveSections(MAIN_ENTITIES);\n    }\n\n    if (cookies.get('username')) {\n      setUserName(cookies.get('username'));\n    }\n\n    if (localStorage.getItem('notifications')) {\n      setNotifications(JSON.parse(localStorage.getItem('notifications')));\n    }\n\n    getNotifications();\n  }, [router.route]);\n  useEffect(() => {\n    if (user) {\n      var _user$delegaciones, _user$delegacionPrinc, _delegaciones$;\n\n      const dels = (_user$delegaciones = user.delegaciones) === null || _user$delegaciones === void 0 ? void 0 : _user$delegaciones.map(d => {\n        return {\n          value: d.id,\n          label: d.nombre\n        };\n      });\n      setDelegaciones(dels);\n      setDelegacion((user === null || user === void 0 ? void 0 : (_user$delegacionPrinc = user.delegacionPrincipal) === null || _user$delegacionPrinc === void 0 ? void 0 : _user$delegacionPrinc.id) || ((_delegaciones$ = delegaciones[0]) === null || _delegaciones$ === void 0 ? void 0 : _delegaciones$.value) || '');\n      let NAV_BUTTONS = [{\n        label: NAVBAR.home,\n        action: () => {\n          router.push('solicitudes');\n        },\n        permissions: ['Administrador', 'AuditoriaAdministrativa', 'AuditoriaCentral', 'AuditoriaMedica', 'Contaduria', 'Delegado', 'Presidencia', 'Reintegro', 'SoloLectura', 'Tesoreria']\n      }, {\n        label: NAVBAR.accounts,\n        action: () => {\n          router.push('cuentas_terceros');\n        },\n        permissions: ['Administrador', 'Reintegro', 'Delegado']\n      }, {\n        label: NAVBAR.config,\n        action: () => {\n          router.push('nomenclador');\n        },\n        permissions: ['Administrador', 'Presidencia']\n      }];\n      setNavButtons(NAV_BUTTONS.filter(btn => hasUserPermissions(btn.permissions)));\n    }\n  }, [user]);\n\n  const logout = () => {\n    cookies.remove('access');\n    cookies.remove('refresh');\n    cookies.remove('username');\n    localStorage.removeItem('user');\n    localStorage.removeItem('notifications'); // router.push('login');\n\n    window.location.href = '/login';\n  };\n\n  const hasUserPermissions = sectionPermissions => {\n    var _user$groups;\n\n    var hasPermissions = false;\n    user === null || user === void 0 ? void 0 : (_user$groups = user.groups) === null || _user$groups === void 0 ? void 0 : _user$groups.forEach(group => {\n      if (sectionPermissions !== null && sectionPermissions !== void 0 && sectionPermissions.includes(group.name)) {\n        hasPermissions = true;\n      }\n    });\n    return hasPermissions;\n  };\n  /**\n   * Funcion que se encarga de verificar si hay al menos una notificacion sin leer.\n   */\n\n\n  const checkForMoreThanOneUnreadNotification = () => {\n    var unreadNotifications = true;\n    notifications === null || notifications === void 0 ? void 0 : notifications.forEach(notification => {\n      if (notification.visto == false) {\n        unreadNotifications = false;\n      }\n    });\n    return unreadNotifications;\n  };\n  /**\n   * Funcion que se encarga de actualizar las notitificaciones cuando\n   * el usuario las marca como vistas\n   */\n\n\n  const updateNotificaciones = notificaciones => {\n    setNotifications(notificaciones);\n  };\n  /**\n   * Funcion que se encargar de verificar segun la seccion del sistema si tiene notificaciones\n   * sin leer, esto sirve para activar el badge del boton de la seccion.\n   */\n\n\n  const checkForBadgeVisibility = section => {\n    switch (section.name) {\n      case 'Solicitudes':\n        const notificacionesSolicitudes = notifications === null || notifications === void 0 ? void 0 : notifications.filter(notificacion => {\n          return notificacion.tipo === 'solicitud' && notificacion.visto == false;\n        });\n\n        if ((notificacionesSolicitudes === null || notificacionesSolicitudes === void 0 ? void 0 : notificacionesSolicitudes.length) > 0) {\n          return false;\n        } else {\n          return true;\n        }\n\n      case 'Solicitudes Autorizadas':\n        const notificacionesAutorizaciones = notifications === null || notifications === void 0 ? void 0 : notifications.filter(notificacion => {\n          return notificacion.tipo === 'autorizacion' && notificacion.visto == false;\n        });\n\n        if ((notificacionesAutorizaciones === null || notificacionesAutorizaciones === void 0 ? void 0 : notificacionesAutorizaciones.length) > 0) {\n          return false;\n        } else {\n          return true;\n        }\n\n      default:\n        return true;\n    }\n  };\n\n  const toggleDrawer = open => event => {\n    setOpenDrawer(open);\n  };\n\n  const list = () => /*#__PURE__*/_jsxs(\"div\", {\n    className: classes.mobileMenu,\n    role: \"presentation\",\n    onClick: toggleDrawer(false),\n    onKeyDown: toggleDrawer(false),\n    children: [/*#__PURE__*/_jsx(List, {\n      children: /*#__PURE__*/_jsx(ListItem, {\n        children: /*#__PURE__*/_jsx(ListItemText, {\n          primary: `${user === null || user === void 0 ? void 0 : user.first_name} ${user === null || user === void 0 ? void 0 : user.last_name}`\n        })\n      })\n    }), /*#__PURE__*/_jsx(Divider, {}), /*#__PURE__*/_jsx(List, {\n      children: /*#__PURE__*/_jsx(ListItem, {\n        children: showDelegacionSelect()\n      })\n    }), /*#__PURE__*/_jsx(Divider, {}), /*#__PURE__*/_jsx(List, {\n      children: NAV_BUTTONS.map((btn, i) => {\n        if (hasUserPermissions(btn.permissions)) {\n          return /*#__PURE__*/_jsx(ListItem, {\n            button: true,\n            children: /*#__PURE__*/_jsx(ListItemText, {\n              primary: btn.label\n            })\n          }, i);\n        }\n      })\n    }), /*#__PURE__*/_jsx(Divider, {}), /*#__PURE__*/_jsx(List, {\n      children: /*#__PURE__*/_jsx(ListItem, {\n        button: true,\n        onClick: logout,\n        children: /*#__PURE__*/_jsx(ListItemText, {\n          primary: LOGIN.logout\n        })\n      })\n    })]\n  });\n\n  useEffect(() => {\n    const setResponsiveness = () => {\n      return window.innerWidth < 900 ? setMobileView(true) : setMobileView(false);\n    };\n\n    setResponsiveness();\n    window.addEventListener('resize', () => setResponsiveness());\n    return () => {\n      window.removeEventListener('resize', () => setResponsiveness());\n    };\n  }, []);\n\n  const showDelegacionSelect = () => {\n    return user !== null && user !== void 0 && user.casaCentral ? /*#__PURE__*/_jsxs(Box, {\n      display: \"flex\",\n      children: [/*#__PURE__*/_jsx(HomeIcon, {\n        className: classes.delegacionPrincipalIcon\n      }), /*#__PURE__*/_jsx(Typography, {\n        className: classes.delegacionPrincipal,\n        children: \"Casa Central\"\n      })]\n    }) : /*#__PURE__*/_jsx(FormControl, {\n      children: /*#__PURE__*/_jsx(Select, {\n        id: \"delegacion-select\",\n        className: classes.delegacionSelect,\n        value: delegacion,\n        onChange: changeDelegacion,\n        title: \"Delegaci\\xF3n\",\n        children: delegaciones.map((del, i) => {\n          return /*#__PURE__*/_jsx(MenuItem, {\n            className: classes.delegacionSelectItem,\n            value: del.value,\n            children: del.value == delegacion ? /*#__PURE__*/_jsxs(Box, {\n              display: \"flex\",\n              children: [/*#__PURE__*/_jsx(StarIcon, {}), /*#__PURE__*/_jsx(Typography, {\n                children: del.label\n              })]\n            }) : del.label\n          }, i);\n        })\n      })\n    });\n  };\n\n  return /*#__PURE__*/_jsxs(Grid, {\n    children: [/*#__PURE__*/_jsx(AppBar, {\n      className: classes.appMenu,\n      children: /*#__PURE__*/_jsxs(Toolbar, {\n        children: [/*#__PURE__*/_jsx(\"img\", {\n          src: \"/images/logo-ipross.png\",\n          alt: APP_NAME,\n          width: 143,\n          height: 63,\n          className: classes.appLogo\n        }), /*#__PURE__*/_jsx(Box, {\n          display: \"flex\",\n          flexGrow: 1\n        }), !mobileView && /*#__PURE__*/_jsxs(_Fragment, {\n          children: [NAV_BUTTONS.map((btn, i) => {\n            if (hasUserPermissions(btn.permissions)) {\n              return /*#__PURE__*/_jsx(Button, {\n                className: classes.menuBtn,\n                onClick: btn.action,\n                children: btn.label\n              }, i);\n            }\n          }), showDelegacionSelect()]\n        }), /*#__PURE__*/_jsxs(Box, {\n          style: {\n            position: 'relative'\n          },\n          children: [/*#__PURE__*/_jsx(Button, {\n            className: classes.menuBtn,\n            onClick: showNotifications,\n            children: /*#__PURE__*/_jsx(Badge, {\n              color: \"primary\",\n              variant: \"dot\",\n              invisible: checkForMoreThanOneUnreadNotification(),\n              children: /*#__PURE__*/_jsx(Notifications, {})\n            })\n          }), /*#__PURE__*/_jsx(Box, {\n            style: {\n              position: 'absolute',\n              top: '35px',\n              right: '-85px',\n              visibility: displayNotifications ? 'visible' : 'hidden'\n            },\n            children: /*#__PURE__*/_jsx(Notificaciones, {\n              notificaciones: notifications,\n              onUpdateNotificaciones: updateNotificaciones\n            })\n          })]\n        }), !mobileView && /*#__PURE__*/_jsxs(Button, {\n          className: classes.menuBtn,\n          onClick: logout,\n          children: [LOGIN.logout, \" (\", userName, \")\"]\n        }), mobileView && /*#__PURE__*/_jsx(IconButton, {\n          edge: \"start\",\n          className: classes.menuButton,\n          color: \"inherit\",\n          \"aria-label\": \"menu\",\n          onClick: () => {\n            setOpenDrawer(!openDrawer);\n          },\n          children: /*#__PURE__*/_jsx(MenuIcon, {})\n        })]\n      })\n    }), mobileView && /*#__PURE__*/_jsx(Drawer, {\n      anchor: \"left\",\n      open: openDrawer,\n      onClose: toggleDrawer(false),\n      children: list()\n    }), /*#__PURE__*/_jsx(Container, {\n      children: /*#__PURE__*/_jsx(Box, {\n        className: classes.sectionsMenu,\n        children: activeSections.map((me, i) => {\n          if (hasUserPermissions(me.tabPermissions)) {\n            return /*#__PURE__*/_jsx(Button, {\n              className: `${classes.sectionBtn} ${me.page === active ? 'active' : ''}`,\n              color: \"inherit\",\n              onClick: () => router.push(me.page),\n              style: {\n                width: 1200 / activeSections.length - 34,\n                maxWidth: '100%'\n              },\n              children: /*#__PURE__*/_jsx(Badge, {\n                color: \"primary\",\n                variant: \"dot\",\n                invisible: checkForBadgeVisibility(me),\n                className: classes.notificationBadge,\n                style: {\n                  width: '100%'\n                },\n                children: /*#__PURE__*/_jsxs(Box, {\n                  children: [/*#__PURE__*/_jsx(\"span\", {\n                    className: classes.sectionIconWrapper,\n                    children: getButtonIcon(me.page)\n                  }), /*#__PURE__*/_jsx(\"span\", {\n                    className: classes.sectionName,\n                    children: me.name\n                  })]\n                })\n              })\n            }, i);\n          }\n        })\n      })\n    })]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}