{"ast":null,"code":"import { format, parseISO } from 'date-fns';\nvar APP_NAME = 'Reintegros';\nvar DATE_FORMAT = 'dd/MM/yyyy';\nvar FORM_BUILDER = {\n  required: 'Campo requerido ',\n  min: 'El valor debe ser superior a ',\n  minLength: 'Longitud debe ser de al menos ',\n  max: 'El valor debe ser inferior a ',\n  maxLength: 'Longitud debe ser a lo sumo de ',\n  pattern: 'El formato no es válido',\n  \"default\": 'Error desconocido'\n};\nvar USERS = {\n  name: 'Usuarios',\n  route: 'api/usuarios',\n  page: 'usuarios',\n  fields: {\n    username: 'Nombre de usuario',\n    email: 'Mail',\n    first_name: 'Nombre',\n    last_name: 'Apellido',\n    is_active: 'Activo',\n    groups: 'Roles',\n    delegaciones: 'Delegaciones',\n    delegacionPrincipal: 'Delegacion Pr.'\n  },\n  filters: {\n    groups: 'Roles',\n    estado: 'Estado',\n    delegacion: 'Delegación'\n  },\n  optionsEstado: [{\n    label: 'Todos',\n    value: ''\n  }, {\n    label: 'Activo',\n    value: 'true'\n  }, {\n    label: 'No activo',\n    value: 'false'\n  }],\n  renders: {\n    is_active: function is_active(rowData) {\n      return rowData ? 'Si' : 'No';\n    },\n    groups: function groups(rowData) {\n      return rowData.groups.map(function (elem) {\n        return elem.name;\n      }).join(', ');\n    },\n    delegaciones: function delegaciones(rowData) {\n      return rowData.delegaciones.map(function (elem) {\n        return elem.nombre;\n      }).join(', ');\n    },\n    delegacionPrincipal: function delegacionPrincipal(rowData) {\n      var _rowData$delegacionPr;\n\n      return (_rowData$delegacionPr = rowData.delegacionPrincipal) === null || _rowData$delegacionPr === void 0 ? void 0 : _rowData$delegacionPr.nombre;\n    }\n  },\n  customActions: {\n    sync: 'Sincronizar Usuarios'\n  }\n};\nvar PRESTACIONES = {\n  name: 'Prestaciones',\n  route: 'api/prestaciones',\n  page: 'prestaciones',\n  fields: {\n    auditor: 'Auditor',\n    cantidad: 'Cantidad',\n    categoria: 'Categoria',\n    prestador: 'Prestador',\n    nomenclador: 'Prestación',\n    coseguroNomenclador: 'Coseguro',\n    valorIprossNomenclador: 'Valor IPROSS',\n    valorPrestacion: 'Monto pagado',\n    montoReintegrar: 'Monto a reintegrar',\n    estadoActual: 'Estado actual',\n    factura: 'Factura',\n    cobertura: 'Cobertura',\n    fechaPractica: 'Fecha de práctica',\n    periodo: 'Periodo',\n    adjuntos: 'Adjuntos',\n    modalidad: 'Modalidad'\n  },\n  optionsEstadoActual: [{\n    label: 'En curso',\n    value: 'enCurso'\n  }, {\n    label: 'Aceptado',\n    value: 'aceptado'\n  }, {\n    label: 'Rechazado',\n    value: 'rechazado'\n  }],\n  renders: {\n    auditor: function auditor(rowData) {\n      var _rowData$auditoria;\n\n      if ((_rowData$auditoria = rowData.auditoria) !== null && _rowData$auditoria !== void 0 && _rowData$auditoria.auditorActual) {\n        return rowData.auditoria.auditorActual.first_name + ' ' + rowData.auditoria.auditorActual.last_name;\n      }\n    },\n    categoria: function categoria(rowData) {\n      var _rowData$categoria, _rowData$nomenclador;\n\n      if ((_rowData$categoria = rowData.categoria) !== null && _rowData$categoria !== void 0 && _rowData$categoria.nombre) {\n        var _rowData$categoria2;\n\n        return (_rowData$categoria2 = rowData.categoria) === null || _rowData$categoria2 === void 0 ? void 0 : _rowData$categoria2.nombre;\n      }\n\n      if ((_rowData$nomenclador = rowData.nomenclador) !== null && _rowData$nomenclador !== void 0 && _rowData$nomenclador.categoria) {\n        var _rowData$nomenclador2;\n\n        return (_rowData$nomenclador2 = rowData.nomenclador) === null || _rowData$nomenclador2 === void 0 ? void 0 : _rowData$nomenclador2.categoria.nombre;\n      }\n\n      return '';\n    },\n    coseguroNomenclador: function coseguroNomenclador(rowData) {\n      var _rowData$nomenclador3, _rowData$nomenclador4;\n\n      return (_rowData$nomenclador3 = rowData.nomenclador) === null || _rowData$nomenclador3 === void 0 ? void 0 : (_rowData$nomenclador4 = _rowData$nomenclador3.capitulo) === null || _rowData$nomenclador4 === void 0 ? void 0 : _rowData$nomenclador4.coseguro;\n    },\n    modalidad: function modalidad(rowData) {\n      var _rowData$nomenclador5, _rowData$item;\n\n      var modalidad = ((_rowData$nomenclador5 = rowData.nomenclador) === null || _rowData$nomenclador5 === void 0 ? void 0 : _rowData$nomenclador5.modalidadPrestacion) || ((_rowData$item = rowData.item) === null || _rowData$item === void 0 ? void 0 : _rowData$item.modalidadPrestacion);\n      var nom = NOMENCLADOR.optionsModalidadPresentacion.find(function (n) {\n        return n.value === modalidad;\n      });\n      return nom === null || nom === void 0 ? void 0 : nom.label;\n    },\n    prestador: function prestador(rowData) {\n      var _rowData$prestador;\n\n      return (_rowData$prestador = rowData.prestador) === null || _rowData$prestador === void 0 ? void 0 : _rowData$prestador.matricula;\n    },\n    nomenclador: function nomenclador(rowData) {\n      var _rowData$nomenclador6, _rowData$item2;\n\n      return ((_rowData$nomenclador6 = rowData.nomenclador) === null || _rowData$nomenclador6 === void 0 ? void 0 : _rowData$nomenclador6.descripcion) || ((_rowData$item2 = rowData.item) === null || _rowData$item2 === void 0 ? void 0 : _rowData$item2.descripcion);\n    },\n    factura: function factura(rowData) {\n      var _rowData$factura;\n\n      return (_rowData$factura = rowData.factura) === null || _rowData$factura === void 0 ? void 0 : _rowData$factura.archivo;\n    },\n    estadoActual: function estadoActual(rowData) {\n      var _rowData$auditoria2, _PRESTACIONES$options;\n\n      var estado = ((_rowData$auditoria2 = rowData.auditoria) === null || _rowData$auditoria2 === void 0 ? void 0 : _rowData$auditoria2.estadoActual) || rowData.estadoActual;\n      return (_PRESTACIONES$options = PRESTACIONES.optionsEstadoActual.find(function (elem) {\n        return elem.value === estado;\n      })) === null || _PRESTACIONES$options === void 0 ? void 0 : _PRESTACIONES$options.label;\n    },\n    fechaPractica: function fechaPractica(rowData) {\n      return format(parseISO(rowData.fechaPractica), DATE_FORMAT);\n    },\n    adjuntos: function adjuntos(rowData) {\n      if (rowData.adjuntos) {\n        var adArr = rowData.adjuntos.map(function (a) {\n          return a.archivo;\n        });\n        return adArr.join(', ');\n      }\n\n      return '';\n    },\n    montoReintegrar: function montoReintegrar(rowData) {\n      var _rowData$nomenclador7;\n\n      if (rowData.item) {\n        return rowData.montoReintegrar;\n      }\n\n      var valorIpross = (_rowData$nomenclador7 = rowData.nomenclador) === null || _rowData$nomenclador7 === void 0 ? void 0 : _rowData$nomenclador7.valorIpross;\n      var coseguro = rowData === null || rowData === void 0 ? void 0 : rowData.nomenclador.capitulo.coseguro;\n      return (parseFloat(valorIpross) - parseFloat(valorIpross) * (parseFloat(coseguro) / 100)).toFixed(2);\n    }\n  }\n};\nvar NOMENCLADOR = {\n  name: 'Nomenclador',\n  route: 'api/nomenclador',\n  page: 'nomenclador',\n  modalImportNomenclador: 'Vista previa',\n  addPrestacion: 'Agregar prestación',\n  importPrestaciones: 'Importar prestaciones',\n  fields: {\n    capitulo: 'Capítulo',\n    codigo: 'Código',\n    descripcion: 'Descripción',\n    complejidadPractica: 'Nivel de complejidad',\n    numeroNormaRespaldatoria: 'Nº Norma respaldatoria',\n    fechaNorma: 'Fecha de la norma',\n    topesCoberturaPeriodo: 'Topes de cobertura por período',\n    periodoTope: 'Periodo del tope',\n    modalidadPresentacion: 'Modalidad de Prestación ',\n    valorIpross: 'Valor IPROSS',\n    categoria: 'Categoria' // montoFijoMensual: 'Monto Fijo Mensual ',\n    // programaSanitario: 'Programa sanitario',\n\n  },\n  cols: {\n    codigo: 'Código',\n    categoria: 'Categoria',\n    capitulo: 'Capítulo',\n    modalidadPresentacion: 'Modalidad',\n    valorIpross: 'Valor IPROSS',\n    descripcion: 'Descripción',\n    complejidadPractica: 'Complejidad',\n    numeroNormaRespaldatoria: 'Nº Norma',\n    fechaNorma: 'Fecha',\n    topesCoberturaPeriodo: 'Topes',\n    periodoTope: 'Periodo'\n  },\n  filters: {\n    categoria: 'Categoría',\n    modalidad: 'Modalidad',\n    capitulo: 'Capítulo'\n  },\n  optionsModalidadPresentacion: [{\n    label: 'Ambulatoria',\n    value: 'ambulatoria'\n  }, {\n    label: 'Internación',\n    value: 'internacion'\n  }],\n  optionsPeriodoTope: [{\n    label: 'Día',\n    value: 'dia'\n  }, {\n    label: 'Mes',\n    value: 'mes'\n  }, {\n    label: 'Trimestre',\n    value: 'trimestre'\n  }, {\n    label: 'Año',\n    value: 'anio'\n  }],\n  renders: {\n    capitulo: function capitulo(rowData) {\n      return \"\".concat(rowData.capitulo.capitulo, \"-\").concat(rowData.capitulo.descripcion);\n    },\n    fechaNorma: function fechaNorma(rowData) {\n      return format(parseISO(rowData.fechaNorma), DATE_FORMAT);\n    },\n    modalidadPresentacion: function modalidadPresentacion(rowData) {\n      var _NOMENCLADOR$optionsM;\n\n      return (_NOMENCLADOR$optionsM = NOMENCLADOR.optionsModalidadPresentacion.find(function (elem) {\n        return elem.value === rowData.modalidadPrestacion;\n      })) === null || _NOMENCLADOR$optionsM === void 0 ? void 0 : _NOMENCLADOR$optionsM.label;\n    },\n    periodoTope: function periodoTope(rowData) {\n      var _NOMENCLADOR$optionsP;\n\n      return (_NOMENCLADOR$optionsP = NOMENCLADOR.optionsPeriodoTope.find(function (elem) {\n        return elem.value === rowData.periodoTope;\n      })) === null || _NOMENCLADOR$optionsP === void 0 ? void 0 : _NOMENCLADOR$optionsP.label;\n    },\n    categoria: function categoria(rowData) {\n      var _rowData$categoria3;\n\n      return (_rowData$categoria3 = rowData.categoria) === null || _rowData$categoria3 === void 0 ? void 0 : _rowData$categoria3.nombre;\n    }\n  },\n  messages: {\n    processingFileMessage: 'Procesando archivo de nomenclador',\n    successfulImportNomenclador: 'Importacion exitosa'\n  }\n};\nvar CUENTAS_TERCEROS = {\n  name: 'Cuentas de terceros',\n  route: 'api/cuenta-de-terceros',\n  page: 'cuentas_terceros',\n  fields: {\n    afiliado: 'Afiliado',\n    nombre: 'Nombre',\n    apellido: 'Apellido',\n    cuitCuil: 'CUIT / CUIL',\n    cbu: 'CBU',\n    responsableDeCarga: 'Responsable de carga',\n    delegacion: 'Delegación',\n    adjuntos: 'Archivos adjuntos'\n  },\n  filters: {\n    delegacion: 'Delegación'\n  },\n  renders: {\n    responsableDeCarga: function responsableDeCarga(rowData) {\n      return rowData.responsableDeCarga.first_name + ' ' + rowData.responsableDeCarga.last_name;\n    },\n    delegacion: function delegacion(rowData) {\n      return rowData.delegacion.nombre;\n    },\n    adjuntos: function adjuntos(rowData) {\n      return rowData.adjuntos.archivo;\n    },\n    afiliado: function afiliado(rowData) {\n      var _rowData$afiliado, _rowData$afiliado2, _rowData$afiliado3;\n\n      return ((_rowData$afiliado = rowData.afiliado) === null || _rowData$afiliado === void 0 ? void 0 : _rowData$afiliado.numeroAfiliado) + ' ' + ((_rowData$afiliado2 = rowData.afiliado) === null || _rowData$afiliado2 === void 0 ? void 0 : _rowData$afiliado2.nombre) + ' ' + ((_rowData$afiliado3 = rowData.afiliado) === null || _rowData$afiliado3 === void 0 ? void 0 : _rowData$afiliado3.apellido);\n    }\n  }\n};\nvar CUENTAS_JUDICIALES = {\n  name: 'Cuentas judiciales',\n  route: 'api/cuenta-judicial',\n  page: 'cuentas_judiciales',\n  fields: {\n    afiliado: 'Afiliado',\n    responsableDeCarga: 'Responsable de carga',\n    delegacion: 'Delegacion',\n    informacionAdicional: 'Informacion adicional',\n    oficioJudicial: 'Oficio judicial'\n  },\n  filters: {\n    delegacion: 'Delegación'\n  },\n  renders: {\n    responsableDeCarga: function responsableDeCarga(rowData) {\n      return rowData.responsableDeCarga.first_name + ' ' + rowData.responsableDeCarga.last_name;\n    },\n    delegacion: function delegacion(rowData) {\n      return rowData.delegacion.nombre;\n    },\n    afiliado: function afiliado(rowData) {\n      var _rowData$afiliado4, _rowData$afiliado5;\n\n      return ((_rowData$afiliado4 = rowData.afiliado) === null || _rowData$afiliado4 === void 0 ? void 0 : _rowData$afiliado4.nombre) + ' ' + ((_rowData$afiliado5 = rowData.afiliado) === null || _rowData$afiliado5 === void 0 ? void 0 : _rowData$afiliado5.apellido);\n    }\n  }\n};\nvar CAPITULO = {\n  name: 'Capitulo',\n  route: 'capitulo',\n  page: 'capitulo',\n  fields: {\n    coseguro: 'Coseguro',\n    capitulo: 'Capítulo',\n    descripción: 'Descripción'\n  },\n  renders: {}\n}; //Used by generator, dont remove this line #entitiesobject\n\nvar CUPONES = {\n  name: 'Solicitudes Autorizadas',\n  page: 'cupones',\n  route: 'api/cupon',\n  fields: {\n    id: 'id',\n    'solicitud.id': 'Solcitud',\n    'solicitud.afiliado.numeroAfiliado': 'Afiliado',\n    fechaDeAlta: 'Fecha de alta',\n    'solicitud.delegacion.nombre': 'Delegacion',\n    plazo: 'Plazo',\n    montoDeReintegro: 'Monto de reintegro',\n    lotes: 'Lote',\n    estado: 'Estado',\n    categorias: 'Categorias prestaciones',\n    numeroDePago: 'Número de Pago',\n    motivoDeRechazo: 'Motivo de Rechazo'\n  },\n  filters: {\n    fechaDesde: 'Fecha desde',\n    fechaHasta: 'Fecha hasta',\n    categoria: 'Categoría',\n    nroLote: 'N° Lote',\n    delegacion: 'Delegación',\n    estado: 'Estado'\n  },\n  optionsCategorias: [{\n    label: 'NO IMPLEMENTADO',\n    value: 'xxx'\n  }],\n  optionsEstado: [{\n    label: 'Todos',\n    value: ''\n  }, {\n    label: 'Abierto',\n    value: 'abierto'\n  }, {\n    label: 'En Proceso',\n    value: 'enProceso'\n  }, {\n    label: 'Pago Realizado',\n    value: 'pagoRealizado'\n  }, {\n    label: 'Pago Rechazado',\n    value: 'pagoRechazado'\n  }, {\n    label: 'Rechazo Parcial',\n    value: 'rechazoParcial'\n  }, {\n    label: 'Cerrado',\n    value: 'cerrado'\n  }],\n  renders: {\n    fechaDeAlta: function fechaDeAlta(rowData) {\n      return format(parseISO(rowData.fechaDeAlta), DATE_FORMAT);\n    },\n    montoDeReintegro: function montoDeReintegro(rowData) {\n      return \"$ \".concat(rowData.montoDeReintegro);\n    },\n    categorias: function categorias(rowData) {\n      return rowData.categorias;\n    },\n    // lotes: (rowData) => rowData.lotes[0]?.id\n    lotes: function lotes(rowData) {\n      var ids = [];\n      rowData.lotes.forEach(function (lote) {\n        ids.push(lote.id);\n        ids.push('-');\n      });\n      ids.pop();\n      return ids;\n    }\n  },\n  modalCreateLote: {\n    mainTitle: 'Vista previa de creacion de lotes',\n    subTitle: 'Resultado del análisis de los cupones',\n    subTitle2: 'Solo se crearan el o los lotes si todos los cupones seleccionados son correctos.'\n  },\n  messages: {\n    successCreateCupones: 'Proceso finalizado con exito',\n    loading: 'Procesando los cupones'\n  }\n};\nvar LOTES = {\n  name: 'Lotes',\n  page: 'lotes',\n  route: 'api/lote',\n  fields: {\n    id: 'id',\n    fechaDeAlta: 'Fecha de alta',\n    tipo: 'Tipo',\n    montoTotal: 'Monto Total',\n    estado: 'Estado',\n    procesadoPor: 'Procesado por'\n  },\n  filters: {\n    fechaDesde: 'Fecha desde',\n    fechaHasta: 'Fecha hasta',\n    tipo: 'Tipo',\n    estado: 'Estado',\n    delegacion: 'Delegación'\n  },\n  optionsTipos: [{\n    label: 'No judicial',\n    value: 'noJudicial'\n  }, {\n    label: 'Judicial',\n    value: 'judicial'\n  }],\n  optionsEstados: [{\n    label: 'NO IMPLEMENTADO',\n    value: 'xxx'\n  }],\n  renders: {\n    fechaDeAlta: function fechaDeAlta(rowData) {\n      return format(parseISO(rowData.fechaDeAlta), DATE_FORMAT);\n    },\n    tipo: function tipo(rowData) {\n      return rowData.tipo === 'noJudicial' ? 'No judicial' : 'Judicial';\n    },\n    montoTotal: function montoTotal(rowData) {\n      return \"$ \".concat(rowData.montoTotal);\n    },\n    procesadoPor: function procesadoPor(rowData) {\n      return \"\".concat(rowData.procesadoPor);\n    }\n  },\n  modalResultQnQoFiles: {\n    subTitle: 'Resultado del análisis de los archivos',\n    subtitle2Error: 'No se pueden procesar los cupones. Se deben corregir los errores y volver a cargar los archivos para el lote.',\n    subtitle2Success: 'Se procesaron exitosamente los archivos'\n  }\n};\nvar DELEGACIONES = {\n  name: 'Delegaciones',\n  page: 'delegaciones',\n  route: 'api/delegaciones',\n  fields: {\n    id: 'id',\n    nombre: 'Nombre'\n  },\n  renders: {\n    is_active: function is_active(rowData) {\n      return rowData ? 'Si' : 'No';\n    }\n  }\n};\nvar AFILIADOS = {\n  name: 'Afiliados',\n  page: 'afiliados',\n  route: 'api/afiliados',\n  fields: {\n    numeroAfiliado: 'Numero de afiliado',\n    nombre: 'Nombre',\n    apellido: 'Apellido',\n    cuitCuil: 'Cuil',\n    cbu: 'CBU',\n    activo: 'Activo',\n    fechaBaja: 'Fecha de baja',\n    cuentaDeTerceros: 'Cuenta de terceros',\n    cuentaJudicial: 'Cuenta judicial'\n  },\n  renders: {\n    activo: function activo(rowData) {\n      return rowData.activo ? 'Si' : 'No';\n    }\n  }\n};\nvar AUDITORIAS = {\n  name: 'Auditorias',\n  page: 'auditorias',\n  route: 'api/auditorias',\n  fields: {\n    'solicitud.id': 'Solicitud',\n    practica: 'Practica',\n    fechaPractica: 'Fecha de práctica',\n    prestador: 'Prestador'\n  },\n  renders: {\n    'solicitud.id': function solicitudId(rowData) {\n      var _rowData$solicitud$id, _rowData$solicitud$id2;\n\n      return \"\".concat('0'.repeat(7 - ((_rowData$solicitud$id = rowData.solicitud.id) === null || _rowData$solicitud$id === void 0 ? void 0 : _rowData$solicitud$id.toString().length))).concat((_rowData$solicitud$id2 = rowData.solicitud.id) === null || _rowData$solicitud$id2 === void 0 ? void 0 : _rowData$solicitud$id2.toString());\n    },\n    fechaPractica: function fechaPractica(rowData) {\n      return format(parseISO(rowData.fechaPractica), DATE_FORMAT);\n    },\n    prestador: function prestador(rowData) {\n      return rowData.prestador.matricula;\n    },\n    practica: function practica(rowData) {\n      return \"\".concat(rowData.nomenclador.codigo, \" - \").concat(rowData.nomenclador.descripcion, \" - \").concat(rowData.nomenclador.capitulo.descripcion);\n    }\n  }\n};\nvar TABLE = {\n  labelRowsSelect: 'filas',\n  labelDisplayedRows: '{from}-{to} de {count}',\n  labelRowsPerPage: 'Filas por página',\n  firstAriaLabel: 'Primera página',\n  firstTooltip: 'Primera página',\n  previousAriaLabel: 'Anterior',\n  previousTooltip: 'Anterior',\n  nextAriaLabel: 'Siguiente',\n  nextTooltip: 'Siguiente',\n  lastAriaLabel: 'Última página',\n  lastTooltip: 'Última página',\n  actions: 'Acciones'\n};\nvar LOGIN = {\n  passwordRecoveryMessage: 'Contacte al administrador de LDAP: adminldap@dominio.com',\n  passwordRecoveryButton: 'Olvide mi contraseña',\n  signIn: 'Entrar',\n  logout: 'Salir'\n};\nvar SOLICITUDES = {\n  name: 'Solicitudes',\n  route: 'api/solicitudes',\n  page: 'solicitudes',\n  fields: {\n    id: 'id',\n    estadoActual: 'Estado actual',\n    fechaAlta: 'Fecha de alta',\n    'delegacion.nombre': 'Delegación',\n    afiliado: 'Afiliado',\n    tipo: 'Tipo'\n  },\n  filters: {\n    afiliado: 'Afiliado',\n    delegacion: 'Delegación',\n    estadoActual: 'Estado actual',\n    fechaDesde: 'Fecha desde',\n    fechaHasta: 'Fecha hasta',\n    judicial: 'Judicial',\n    source: 'Origen'\n  },\n  renders: {\n    estadoActual: function estadoActual(rowData) {\n      var _SOLICITUDES$optionsE;\n\n      return (_SOLICITUDES$optionsE = SOLICITUDES.optionsEstadoActual.find(function (elem) {\n        return elem.value === rowData.estadoActual;\n      })) === null || _SOLICITUDES$optionsE === void 0 ? void 0 : _SOLICITUDES$optionsE.label;\n    },\n    fechaAlta: function fechaAlta(rowData) {\n      return format(parseISO(rowData.fechaAlta), DATE_FORMAT);\n    },\n    afiliado: function afiliado(rowData) {\n      return \"\".concat(rowData.afiliado.nombre, \", \").concat(rowData.afiliado.apellido, \" | \").concat(rowData.afiliado.numeroAfiliado);\n    },\n    tipo: function tipo(rowData) {\n      return rowData.tipo === 'noJudicial' ? 'No judicial' : 'judicial';\n    }\n  },\n  optionsEstadoActual: [{\n    label: 'Sin pagos realizados',\n    value: 'sinPagos'\n  }, {\n    label: 'Pago parcial',\n    value: 'pagoParcial'\n  }, {\n    label: 'Pago total',\n    value: 'pagoTotal'\n  }],\n  optionsType: [{\n    label: 'No judicial',\n    value: 'noJudicial'\n  }, {\n    label: 'Judicial',\n    value: 'judicial'\n  }],\n  sources: [{\n    label: 'Interna',\n    value: 'interna'\n  }, {\n    label: 'VEM',\n    value: 'vem'\n  }, {\n    label: 'Bajo Presupuesto',\n    value: 'bajoPresupuesto'\n  }],\n  customActions: {\n    addPresentacion: 'Agregar prestacion'\n  },\n  modalCreateCupones: {\n    mainTitle: 'Vista previa de creacion de cupones',\n    subTitle: 'Resultado del análisis de las solicitudes',\n    subTitle2: function subTitle2(data) {\n      return \"Se crearan \".concat(data, \" cupones. Las siguientes solicitudes no cumplen con las condiciones para que se puedan crear los cupones:\");\n    }\n  },\n  messages: {\n    errorCreateCupones: \"No se cre\\xF3 ning\\xFAn cup\\xF3n\",\n    successCreateCupones: function successCreateCupones(data) {\n      return \"Se crearon exitosamente \".concat(data, \" cupones\");\n    },\n    loading: 'Procesando las solicitudes',\n    tipoForm: 'Tipos de cuentas disponibles'\n  }\n};\nvar PRESTADORES = {\n  name: 'Prestadores',\n  route: 'api/prestadores',\n  page: 'prestadores'\n};\nvar MAIN_ENTITIES = [SOLICITUDES, AUDITORIAS, CUPONES, LOTES, CUENTAS_TERCEROS, CUENTAS_JUDICIALES];\nvar ADMIN_ENTITIES = [NOMENCLADOR, DELEGACIONES, USERS, AFILIADOS // PRESTADORES\n];\n\nvar LOADING = function LOADING(entity) {\n  return \"Cargando \".concat(entity);\n};\n\nvar ERRORS = {\n  unknown: 'Error desconocido',\n  onGet: function onGet(entity) {\n    return \"Error al obtener \".concat(entity);\n  },\n  onCreate: function onCreate(entity) {\n    return \"Error al crear \".concat(entity);\n  },\n  onDelete: function onDelete(entity) {\n    return \"Error al eliminar \".concat(entity);\n  },\n  onUpdate: function onUpdate(entity) {\n    return \"Error al actualizar \".concat(entity);\n  },\n  onSync: function onSync(entity) {\n    return \"Error al sincronizar \".concat(entity);\n  },\n  onDeactivate: function onDeactivate(entity) {\n    return \"Error al desactivar \".concat(entity);\n  },\n  onSetGroups: function onSetGroups(entity) {\n    return \"Error al modificar los roles del usuario\";\n  },\n  onSetDelegaciones: function onSetDelegaciones(entity) {\n    return 'Error al modificar las delegaciones del usuario';\n  },\n  onSetDelegacionPrincipal: function onSetDelegacionPrincipal(entity) {\n    return 'Error al modificar la delegacion principal del usuario';\n  },\n  inactiveUser: 'Tu cuenta está inactiva. Contactar al administrador: admin@dominio.com',\n  invalidLdap: 'Usuario o contraseña incorrecta. Contacte al administrador de LDAP: adminldap@dominio.com',\n  onAudit: function onAudit(error) {\n    return 'Error al actualizar auditoría';\n  },\n  onUpload: 'Error subiendo archivos'\n};\nvar INFO = {\n  onSync: function onSync(entity, count) {\n    return count === 0 ? 'Todos los usuarios ya estan sincronizados' : \"Se sincronizaron \".concat(count, \" \").concat(entity);\n  },\n  setGroups: \"Se actualizo correctamente el usuario\",\n  setDelegaciones: \"Se actualizo correctamente el usuario\",\n  setDelegacionPrincipal: \"Se actualizo correctamente el usuario\",\n  //Spinner message\n  working: 'Por favor espere...'\n};\nvar ACTIONS = {\n  crete: function crete(entity) {\n    return \"Crear \".concat(entity);\n  },\n  \"delete\": function _delete(entity) {\n    return \"Eliminar \".concat(entity);\n  },\n  update: function update(entity) {\n    return \"Actualizar \".concat(entity);\n  },\n  \"import\": function _import(entity) {\n    return \"Importar \".concat(entity);\n  }\n};\nvar STEPPER_SOLICITUDES = {\n  add: 'Agregar solicitud',\n  end: 'Solicitud cargada, presione cerrar para terminar',\n  steps: [{\n    title: 'Crear solicitud',\n    description: 'Complete los siguientes campos con la información de la solicitud:'\n  }, {\n    title: 'Agregar prestaciones',\n    description: 'Sube la factura para agregar la prestación. Una vez subida, completa el formulario'\n  }, {\n    title: 'Guardar',\n    description: 'Confirma los datos para guardar la solicitud'\n  }, {\n    title: 'Agregar adjuntos(opcional)',\n    description: 'Agrega archivos adjuntos a las prestaciones de la lista'\n  }],\n  back: 'Atras',\n  next: 'Siguiente',\n  finish: 'Finalizar',\n  cancel: 'Cancelar',\n  close: 'Cerrar',\n  save: 'Guardar y terminar',\n  saveAndContinue: 'Guardar y agregar otra',\n  onSubmitSolicitud: {\n    title: 'Solicitud creada!',\n    message: 'Se creo nueva solicitud',\n    severity: 'success'\n  },\n  onSubmitFactura: {\n    title: 'Factura guardada!',\n    message: 'Se guardo la factura, completa los datos de la prestacion para continuar. Luego elige siguiente para terminar o guardar y agregar para seguir cargando prestaciones',\n    severity: 'success'\n  },\n  onSubmitPrestacion: function onSubmitPrestacion(count) {\n    return {\n      title: \"\".concat(count, \"\\xBA Prestacion creada\"),\n      message: \"Se creo la \".concat(count, \"\\xBA prestaci\\xF3n\"),\n      severity: 'success'\n    };\n  },\n  onNewPrestacion: function onNewPrestacion(count) {\n    return {\n      title: 'Detalles prestación',\n      message: \"Complete formulario con los detalles de la \".concat(count, \"\\xBA prestaci\\xF3n asociada a la solicitud\"),\n      severity: 'info'\n    };\n  },\n  onNewFactura: function onNewFactura(count) {\n    return {\n      title: 'Cargar factura',\n      message: \"Suba el archivo de la factura correspondiente a la \".concat(count, \"\\xBA prestaci\\xF3n asociada a la solicitud\"),\n      severity: 'info'\n    };\n  },\n  onFinish: {\n    title: 'Proceso finalizado',\n    message: 'Solicitud completa, puede ver un resumen de los datos ingresados a continuación',\n    severity: 'info'\n  }\n};\nexport { STEPPER_SOLICITUDES, FORM_BUILDER, USERS, TABLE, NOMENCLADOR, MAIN_ENTITIES, ADMIN_ENTITIES, APP_NAME, DATE_FORMAT, LOADING, ERRORS, ACTIONS, SOLICITUDES, LOGIN, INFO, PRESTACIONES, CAPITULO, CUENTAS_TERCEROS, CUENTAS_JUDICIALES, AUDITORIAS //Used by generator, dont remove this line #exportconsts\n, CUPONES, LOTES, DELEGACIONES, AFILIADOS };","map":null,"metadata":{},"sourceType":"module"}