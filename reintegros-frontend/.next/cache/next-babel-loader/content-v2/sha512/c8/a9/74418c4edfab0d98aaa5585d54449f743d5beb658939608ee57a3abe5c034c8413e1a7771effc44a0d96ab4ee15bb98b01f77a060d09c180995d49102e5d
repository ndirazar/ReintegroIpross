{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/reintegros/reintegros-frontend/components/builder/FieldAutocomplete.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// Third-party imports\nimport React, { useState, useCallback } from 'react';\nimport { FormControl, FormHelperText, TextField, CircularProgress, makeStyles, Tooltip, Typography } from '@material-ui/core';\nimport { Controller } from 'react-hook-form';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { IconButton } from '@material-ui/core'; // App imports\n\nimport { Help } from '@material-ui/icons'; // Props & other types\n\nconst useStyles = makeStyles(theme => ({\n  selectInput: {\n    position: 'relative',\n    '& .MuiInputBase-root': {\n      border: '1px solid #565656',\n      borderRadius: '6px',\n      paddingLeft: '10px',\n      marginTop: '15px',\n      '& .MuiInputBase-input': {\n        border: 'none'\n      }\n    },\n    '& >.MuiInput-underline:after': {\n      border: 'none'\n    },\n    '& .MuiAutocomplete-endAdornment': {\n      top: '0'\n    },\n    '& .MuiInputLabel-formControl': {\n      width: '100%'\n    }\n  },\n  tipoHelp: {\n    position: 'absolute',\n    top: '0',\n    right: '0',\n    padding: '5px',\n    '& .MuiSvgIcon-root': {\n      width: '.6em',\n      height: '.6em',\n      fontSize: '1.2em'\n    }\n  }\n})); // Component\n\nexport default function FormBuilderAutocomplete({\n  field,\n  error,\n  form\n}) {\n  var _form$getValues$field;\n\n  const {\n    0: query,\n    1: setQuery\n  } = useState('');\n  const {\n    0: open,\n    1: setOpen\n  } = useState(false);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const classes = useStyles();\n  const {\n    0: options,\n    1: setOptions\n  } = useState(Array.isArray(field.options) ? field.options : []);\n  const optionsFunction = Array.isArray(field.options) ? null : field.options;\n  const {\n    0: inputText,\n    1: setInputText\n  } = useState(((_form$getValues$field = form.getValues()[field.name]) === null || _form$getValues$field === void 0 ? void 0 : _form$getValues$field.label) || '');\n  const {\n    0: currentValue,\n    1: setCurrentValue\n  } = useState(form.getValues()[field.name]);\n  const updateOptions = useCallback(() => {\n    if (optionsFunction) {\n      setLoading(true);\n      optionsFunction(form, query).then(newOptions => {\n        setOptions(newOptions || []); // This fixes the bug in Autocomplete, that does not refresh the label\n        // const currentValue = form.getValues()[field.name];\n\n        if (currentValue) {\n          if (field.multiple) {\n            form.setValue(field.name, field.multiple ? [] : null);\n          } else {\n            form.setValue(field.name, currentValue);\n          }\n        }\n      }).finally(() => setLoading(false));\n    }\n  }, [optionsFunction, form, query, field.multiple, field.name]); // If it has a value, an the option in not loaded, then load options\n\n  let shouldLoad; // const currentValue = form.getValues()[field.name];\n\n  if (field.multiple) {\n    shouldLoad = optionsFunction && currentValue && currentValue.length && !options.filter(o => currentValue.indexOf(o.value) >= 0).length;\n  } else {\n    shouldLoad = optionsFunction && currentValue && !options.find(o => o.value === currentValue);\n  }\n\n  const {\n    0: mounted,\n    1: setMounted\n  } = useState(false); // Load option it is has data\n\n  React.useEffect(() => {\n    // let mounted = true;\n    if (!mounted && shouldLoad) {\n      updateOptions();\n      setMounted(true);\n      setCurrentValue(form.getValues()[field.name]);\n    }\n  }, [shouldLoad, updateOptions]); // Load option it is has data\n\n  React.useEffect(() => {\n    let fieldVal = '';\n\n    if (typeof form.getValues()[field.name] === 'object') {\n      var _form$getValues$field2;\n\n      fieldVal = (_form$getValues$field2 = form.getValues()[field.name]) === null || _form$getValues$field2 === void 0 ? void 0 : _form$getValues$field2.label;\n    } else if (typeof form.getValues()[field.name] === 'string') {\n      fieldVal = form.getValues()[field.name];\n    } else {\n      fieldVal = '';\n    } // setCurrentValue(form.getValues()[field.name]);\n\n\n    setInputText(fieldVal); // console.log({field: field.name, fieldVal, currentValue, inputText})\n  }, [field, form, setCurrentValue]);\n\n  const getInputTextValue = props => {\n    var _props$value;\n\n    return ((_props$value = props.value) === null || _props$value === void 0 ? void 0 : _props$value.label) || inputText || '';\n  };\n\n  const getFieldLabel = () => {\n    var _field$rules;\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: field.label + (((_field$rules = field.rules) === null || _field$rules === void 0 ? void 0 : _field$rules.required) === true ? ' *' : '')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this), !!field.tooltip && /*#__PURE__*/_jsxDEV(Tooltip, {\n        title: /*#__PURE__*/_jsxDEV(Typography, {\n          children: field.tooltip\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 20\n        }, this),\n        placement: \"top-start\",\n        arrow: true,\n        children: /*#__PURE__*/_jsxDEV(IconButton, {\n          \"aria-label\": \"Help\",\n          className: classes.tipoHelp,\n          children: /*#__PURE__*/_jsxDEV(Help, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(FormControl, {\n    component: \"fieldset\",\n    error: !!error,\n    fullWidth: true,\n    children: [/*#__PURE__*/_jsxDEV(Controller // label={getFieldLabel()}\n    , {\n      defaultValue: currentValue,\n      render: props => /*#__PURE__*/_jsxDEV(Autocomplete, {\n        freeSolo: true,\n        open: open,\n        onOpen: () => {\n          setOpen(true);\n          updateOptions();\n        },\n        onClose: () => setOpen(false),\n        options: options,\n        disabled: field.disabled,\n        loading: loading,\n        multiple: field.multiple,\n        getOptionDisabled: () => loading,\n        getOptionSelected: (option, value) => option.value === (!value ? '' : typeof value === 'string' ? value : value === null || value === void 0 ? void 0 : value.value),\n        onChange: (event, newValue) => {\n          var _options$find;\n\n          const aux = newValue === null ? '' : newValue;\n          form.setValue(field.name, typeof newValue === 'string' ? aux : aux === null || aux === void 0 ? void 0 : aux.value);\n          setInputText(((_options$find = options.find(o => o.value === (typeof newValue === 'string' ? aux : newValue === null || newValue === void 0 ? void 0 : newValue.value))) === null || _options$find === void 0 ? void 0 : _options$find.label) || '');\n          setCurrentValue(newValue); // setInputText(aux.label ? aux?.label : aux);\n\n          setQuery(aux.label ? aux === null || aux === void 0 ? void 0 : aux.label : aux);\n          field.onChange && field.onChange(aux, form);\n        },\n        getOptionLabel: option => {\n          var _options$find2;\n\n          return ((_options$find2 = options.find(o => o.value === (typeof option === 'string' ? option : option.value))) === null || _options$find2 === void 0 ? void 0 : _options$find2.label) || '';\n        },\n        value: props.value,\n        inputValue: getInputTextValue(props),\n        renderInput: params => /*#__PURE__*/_jsxDEV(TextField, _objectSpread(_objectSpread({}, params), {}, {\n          // value={props.value}\n          error: !!error,\n          label: getFieldLabel(),\n          className: classes.selectInput,\n          fullWidth: true,\n          placeholder: field.placeholder,\n          onChange: event => {\n            setInputText(event.target.value);\n\n            if (field.onUpdate) {\n              field.onUpdate(event.target.value, form);\n            }\n\n            setQuery(event.target.value);\n            updateOptions();\n          },\n          InputProps: _objectSpread(_objectSpread({}, params.InputProps), {}, {\n            endAdornment: /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [loading ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n                color: \"inherit\",\n                size: 20\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 230,\n                columnNumber: 34\n              }, this) : null, params.InputProps.endAdornment]\n            }, void 0, true)\n          }),\n          helperText: field.help || ''\n        }), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 11\n      }, this),\n      id: field.name,\n      name: field.name,\n      rules: field.rules,\n      noOptionsText: field.noOptionsText ? field.noOptionsText : 'No hay opciones',\n      control: form.control,\n      onChange: args => {\n        var _field$onChange;\n\n        const value = !args[1] ? null : field.multiple ? args[1].map(v => v.value || v) : args[1].value;\n        (_field$onChange = field.onChange) === null || _field$onChange === void 0 ? void 0 : _field$onChange.call(field, value, form);\n        return value;\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(FormHelperText, {\n      className: 'Mui-error',\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 164,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/reintegros/reintegros-frontend/components/builder/FieldAutocomplete.tsx"],"names":["React","useState","useCallback","FormControl","FormHelperText","TextField","CircularProgress","makeStyles","Tooltip","Typography","Controller","Autocomplete","IconButton","Help","useStyles","theme","selectInput","position","border","borderRadius","paddingLeft","marginTop","top","width","tipoHelp","right","padding","height","fontSize","FormBuilderAutocomplete","field","error","form","query","setQuery","open","setOpen","loading","setLoading","classes","options","setOptions","Array","isArray","optionsFunction","inputText","setInputText","getValues","name","label","currentValue","setCurrentValue","updateOptions","then","newOptions","multiple","setValue","finally","shouldLoad","length","filter","o","indexOf","value","find","mounted","setMounted","useEffect","fieldVal","getInputTextValue","props","getFieldLabel","rules","required","tooltip","disabled","option","event","newValue","aux","onChange","params","placeholder","target","onUpdate","InputProps","endAdornment","help","noOptionsText","control","args","map","v"],"mappings":"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","sourcesContent":["// Third-party imports\nimport React, { useState, useCallback } from 'react';\nimport {\n  FormControl,\n  FormHelperText,\n  TextField,\n  CircularProgress,\n  makeStyles,\n  Tooltip,\n  Typography,\n} from '@material-ui/core';\nimport { Controller, FieldName, UseFormMethods } from 'react-hook-form';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { IconButton } from '@material-ui/core';\n\n// App imports\nimport { FormField, OptionsField } from '.';\nimport { Help } from '@material-ui/icons';\n\n// Props & other types\ntype Props<T> = {\n  field: FormField<T>;\n  error: string;\n  rules: any;\n  form: UseFormMethods<Partial<T>>;\n};\n\nconst useStyles = makeStyles((theme) => ({\n  selectInput: {\n    position: 'relative',\n    '& .MuiInputBase-root': {\n      border: '1px solid #565656',\n      borderRadius: '6px',\n      paddingLeft: '10px',\n      marginTop: '15px',\n      '& .MuiInputBase-input': {\n        border: 'none',\n      },\n    },\n    '& >.MuiInput-underline:after': {\n      border: 'none',\n    },\n    '& .MuiAutocomplete-endAdornment': {\n      top: '0',\n    },\n    '& .MuiInputLabel-formControl': {\n      width: '100%',\n    },\n  },\n  tipoHelp: {\n    position: 'absolute',\n    top: '0',\n    right: '0',\n    padding: '5px',\n    '& .MuiSvgIcon-root': {\n      width: '.6em',\n      height: '.6em',\n      fontSize: '1.2em',\n    },\n  },\n}));\n// Component\nexport default function FormBuilderAutocomplete<T>({ field, error, form }: Props<T>) {\n  const [query, setQuery] = useState('');\n  const [open, setOpen] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const classes = useStyles();\n  const [options, setOptions] = useState<OptionsField>(\n    Array.isArray(field.options) ? field.options : [],\n  );\n  const optionsFunction: (\n    form: UseFormMethods<Partial<T>>,\n    query: string,\n  ) => Promise<OptionsField> = Array.isArray(field.options) ? null : field.options;\n  const [inputText, setInputText] = useState(form.getValues()[field.name]?.label || '');\n  const [currentValue, setCurrentValue] = useState(form.getValues()[field.name]);\n\n  const updateOptions = useCallback(() => {\n    if (optionsFunction) {\n      setLoading(true);\n      optionsFunction(form, query)\n        .then((newOptions) => {\n          setOptions(newOptions || []);\n          // This fixes the bug in Autocomplete, that does not refresh the label\n          // const currentValue = form.getValues()[field.name];\n\n          if (currentValue) {\n            if (field.multiple) {\n              form.setValue(field.name as any, (field.multiple ? [] : null) as any);\n            } else {\n              form.setValue(field.name as any, currentValue);\n            }\n          }\n        })\n        .finally(() => setLoading(false));\n    }\n  }, [optionsFunction, form, query, field.multiple, field.name]);\n\n  // If it has a value, an the option in not loaded, then load options\n  let shouldLoad: boolean;\n  // const currentValue = form.getValues()[field.name];\n  if (field.multiple) {\n    shouldLoad =\n      optionsFunction &&\n      currentValue &&\n      currentValue.length &&\n      !options.filter((o) => currentValue.indexOf(o.value) >= 0).length;\n  } else {\n    shouldLoad = optionsFunction && currentValue && !options.find((o) => o.value === currentValue);\n  }\n\n  const [mounted, setMounted] = useState(false);\n  // Load option it is has data\n  React.useEffect(() => {\n    // let mounted = true;\n    if (!mounted && shouldLoad) {\n      updateOptions();\n      setMounted(true);\n      setCurrentValue(form.getValues()[field.name]);\n    }\n  }, [shouldLoad, updateOptions]);\n\n  // Load option it is has data\n  React.useEffect(() => {\n    let fieldVal = '';\n\n    if (typeof form.getValues()[field.name] === 'object') {\n      fieldVal = form.getValues()[field.name]?.label;\n    } else if (typeof form.getValues()[field.name] === 'string') {\n      fieldVal = form.getValues()[field.name];\n    } else {\n      fieldVal = '';\n    }\n\n    // setCurrentValue(form.getValues()[field.name]);\n    setInputText(fieldVal);\n    // console.log({field: field.name, fieldVal, currentValue, inputText})\n  }, [field, form, setCurrentValue]);\n\n  const getInputTextValue = (props) => {\n    return props.value?.label || inputText || '';\n  };\n\n  const getFieldLabel = () => {\n    return (\n      <>\n        <span>{field.label + (field.rules?.required === true ? ' *' : '')}</span>\n        {!!field.tooltip && (\n          <Tooltip\n            title={<Typography>{field.tooltip}</Typography>}\n            placement=\"top-start\"\n            arrow={true}\n          >\n            <IconButton aria-label=\"Help\" className={classes.tipoHelp}>\n              <Help />\n            </IconButton>\n          </Tooltip>\n        )}\n      </>\n    );\n  };\n\n  return (\n    <FormControl component=\"fieldset\" error={!!error} fullWidth>\n      <Controller\n        // label={getFieldLabel()}\n        defaultValue={currentValue}\n        render={(props) => (\n          <Autocomplete\n            freeSolo={true}\n            open={open}\n            onOpen={() => {\n              setOpen(true);\n              updateOptions();\n            }}\n            onClose={() => setOpen(false)}\n            options={options}\n            disabled={field.disabled}\n            loading={loading}\n            multiple={field.multiple}\n            getOptionDisabled={() => loading}\n            getOptionSelected={(option, value) =>\n              option.value ===\n              (!value ? '' : typeof value === 'string' ? (value as any) : value?.value)\n            }\n            onChange={(event, newValue) => {\n              const aux = newValue === null ? '' : (newValue as any);\n              form.setValue(\n                field.name as any,\n                typeof newValue === 'string' ? aux : (aux?.value as string),\n              );\n              setInputText(\n                options.find(\n                  (o) => o.value === (typeof newValue === 'string' ? aux : newValue?.value),\n                )?.label || '',\n              );\n              setCurrentValue(newValue);\n              // setInputText(aux.label ? aux?.label : aux);\n              setQuery(aux.label ? aux?.label : aux);\n              field.onChange && field.onChange(aux, form);\n            }}\n            getOptionLabel={(option) =>\n              options.find(\n                (o) => o.value === (typeof option === 'string' ? (option as string) : option.value),\n              )?.label || ''\n            }\n            value={props.value}\n            inputValue={getInputTextValue(props)}\n            renderInput={(params) => (\n              <TextField\n                {...params}\n                // value={props.value}\n                error={!!error}\n                label={getFieldLabel()}\n                className={classes.selectInput}\n                fullWidth\n                placeholder={field.placeholder}\n                onChange={(event) => {\n                  setInputText(event.target.value);\n                  if (field.onUpdate) {\n                    field.onUpdate(event.target.value, form);\n                  }\n                  setQuery(event.target.value);\n                  updateOptions();\n                }}\n                InputProps={{\n                  ...params.InputProps,\n                  endAdornment: (\n                    <>\n                      {loading ? <CircularProgress color=\"inherit\" size={20} /> : null}\n                      {params.InputProps.endAdornment}\n                    </>\n                  ),\n                }}\n                helperText={field.help || ''}\n              />\n            )}\n          />\n        )}\n        id={field.name}\n        name={field.name}\n        rules={field.rules}\n        noOptionsText={field.noOptionsText ? field.noOptionsText : 'No hay opciones'}\n        control={form.control}\n        onChange={(args) => {\n          const value = !args[1]\n            ? null\n            : field.multiple\n            ? args[1].map((v) => v.value || v)\n            : args[1].value;\n          field.onChange?.(value, form);\n          return value;\n        }}\n      />\n      {error && <FormHelperText className={'Mui-error'}>{error}</FormHelperText>}\n    </FormControl>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}