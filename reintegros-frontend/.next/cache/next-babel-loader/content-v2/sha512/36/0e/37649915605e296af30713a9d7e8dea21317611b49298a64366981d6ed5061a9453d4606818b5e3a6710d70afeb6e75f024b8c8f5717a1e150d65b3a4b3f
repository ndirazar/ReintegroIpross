{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/reintegros/reintegros-frontend/pages/login.tsx\";\nimport Login from '../components/login/login';\nimport { post } from '../components/api-call/service';\nimport Cookies from 'universal-cookie';\nimport { useState } from 'react';\nimport { useRouter } from 'next/router';\nexport default function LoginPage() {\n  const {\n    0: error,\n    1: seterror\n  } = useState(null);\n  const router = useRouter();\n\n  const handleSubmit = async (username, password) => {\n    let res;\n\n    try {\n      res = await post('api/usuarios/login', {\n        username,\n        password\n      });\n      const {\n        access,\n        refresh\n      } = res.data;\n\n      if (access) {\n        const cookies = new Cookies();\n        cookies.set('access', access, {\n          path: '/'\n        });\n        cookies.set('refresh', refresh, {\n          path: '/'\n        });\n        cookies.set('username', username, {\n          path: '/'\n        });\n        router.push('usuarios');\n      } else {\n        var _res$data;\n\n        seterror((_res$data = res.data) === null || _res$data === void 0 ? void 0 : _res$data.code);\n      }\n    } catch (error) {\n      var _error$response, _error$response$data;\n\n      seterror((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.code);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Login, {\n    onSubmit: handleSubmit,\n    error: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 10\n  }, this);\n}","map":{"version":3,"sources":["/reintegros/reintegros-frontend/pages/login.tsx"],"names":["Login","post","Cookies","useState","useRouter","LoginPage","error","seterror","router","handleSubmit","username","password","res","access","refresh","data","cookies","set","path","push","code","response"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,2BAAlB;AACA,SAASC,IAAT,QAAqB,gCAArB;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,SAAT,QAA0B,aAA1B;AAEA,eAAe,SAASC,SAAT,GAAqB;AAClC,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBJ,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAMK,MAAM,GAAGJ,SAAS,EAAxB;;AACA,QAAMK,YAAY,GAAG,OAAOC,QAAP,EAAyBC,QAAzB,KAA8C;AACjE,QAAIC,GAAJ;;AACA,QAAI;AACFA,MAAAA,GAAG,GAAG,MAAMX,IAAI,CAAC,oBAAD,EAAuB;AAAES,QAAAA,QAAF;AAAYC,QAAAA;AAAZ,OAAvB,CAAhB;AACA,YAAM;AAAEE,QAAAA,MAAF;AAAUC,QAAAA;AAAV,UAAsBF,GAAG,CAACG,IAAhC;;AACA,UAAIF,MAAJ,EAAY;AACV,cAAMG,OAAO,GAAG,IAAId,OAAJ,EAAhB;AACAc,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBJ,MAAtB,EAA8B;AAAEK,UAAAA,IAAI,EAAE;AAAR,SAA9B;AACAF,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBH,OAAvB,EAAgC;AAAEI,UAAAA,IAAI,EAAE;AAAR,SAAhC;AACAF,QAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBP,QAAxB,EAAkC;AAAEQ,UAAAA,IAAI,EAAE;AAAR,SAAlC;AACAV,QAAAA,MAAM,CAACW,IAAP,CAAY,UAAZ;AACD,OAND,MAMO;AAAA;;AACLZ,QAAAA,QAAQ,cAACK,GAAG,CAACG,IAAL,8CAAC,UAAUK,IAAX,CAAR;AACD;AACF,KAZD,CAYE,OAAOd,KAAP,EAAc;AAAA;;AACdC,MAAAA,QAAQ,oBAACD,KAAK,CAACe,QAAP,4EAAC,gBAAgBN,IAAjB,yDAAC,qBAAsBK,IAAvB,CAAR;AACD;AACF,GAjBD;;AAkBA,sBAAO,QAAC,KAAD;AAAO,IAAA,QAAQ,EAAEX,YAAjB;AAA+B,IAAA,KAAK,EAAEH;AAAtC;AAAA;AAAA;AAAA;AAAA,UAAP;AACD","sourcesContent":["import Login from '../components/login/login';\nimport { post } from '../components/api-call/service';\nimport Cookies from 'universal-cookie';\nimport { useState } from 'react';\nimport { useRouter } from 'next/router';\n\nexport default function LoginPage() {\n  const [error, seterror] = useState(null);\n  const router = useRouter();\n  const handleSubmit = async (username: String, password: string) => {\n    let res;\n    try {\n      res = await post('api/usuarios/login', { username, password });\n      const { access, refresh } = res.data;\n      if (access) {\n        const cookies = new Cookies();\n        cookies.set('access', access, { path: '/' });\n        cookies.set('refresh', refresh, { path: '/' });\n        cookies.set('username', username, { path: '/' });\n        router.push('usuarios');\n      } else {\n        seterror(res.data?.code);\n      }\n    } catch (error) {\n      seterror(error.response?.data?.code);\n    }\n  };\n  return <Login onSubmit={handleSubmit} error={error} />;\n}\n"]},"metadata":{},"sourceType":"module"}