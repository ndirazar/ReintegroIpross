{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Box } from '@material-ui/core';\nimport React, { useEffect, useState } from 'react';\nimport PrestadoresList from './PrestadoresList';\nimport useSWR from 'swr';\nimport { ERRORS, LOADING, PRESTADORES } from '../../labels';\nimport { objToQueryString, formatDate, strToDate } from '../common/helpers';\nimport { post, put, remove } from '../api-call/service';\nimport Loading from '../common/Loading';\nimport Alert from '../common/Alert';\nimport PrestadorForm from './PrestadorForm';\nimport PrestadoresImportForm from './PrestadoresImportForm';\nimport TableFilters from '../common/TableFilters';\nimport filterConfig from './FiltersConfig';\nimport ConfirmDialog from '../common/ConfirmDialog';\nexport default function Prestadores() {\n  const INITIAL_FILTER = {\n    page: 1,\n    size: 20,\n    localidadDes: '',\n    profEstado: ''\n  };\n  const {\n    0: filters,\n    1: setFilters\n  } = useState(_objectSpread({}, INITIAL_FILTER));\n  const {\n    0: filterQueryStr,\n    1: setFilterQueryStr\n  } = useState(objToQueryString(filters));\n  const {\n    data,\n    error: errorOnGet,\n    mutate\n  } = useSWR(`${PRESTADORES.route}?` + filterQueryStr);\n  const {\n    0: openForm,\n    1: setOpenForm\n  } = useState(false);\n  const {\n    0: error,\n    1: setError\n  } = useState(null);\n  const {\n    0: currentData,\n    1: setCurrentData\n  } = useState(null);\n  const {\n    0: info,\n    1: setInfo\n  } = useState(null);\n  const {\n    0: showFilters,\n    1: setShowFilters\n  } = useState(false);\n  const {\n    0: openImport,\n    1: setOpenImport\n  } = useState(false);\n  const {\n    0: showConfirmDialog,\n    1: setShowConfirmDialog\n  } = useState(false);\n  const {\n    0: idToDelete,\n    1: setIdToDelete\n  } = useState(null);\n\n  const openCreateModal = () => {\n    setOpenForm(!openForm);\n    window.scrollTo(0, 0);\n  };\n\n  const handleSubmit = async data => {\n    let payload = _objectSpread(_objectSpread({}, data), {}, {\n      matFechaExpededTitulo: formatDate(data.matFechaExpededTitulo),\n      matFechaRegistro: formatDate(data.matFechaRegistro),\n      fechaNacimiento: formatDate(data.fechaNacimiento),\n      matricula: data.nroMatricula + '' + data.libro + '' + data.folio\n    });\n\n    try {\n      if (currentData !== null && currentData !== void 0 && currentData.id) {\n        await put(`${PRESTADORES.route}`, payload, currentData === null || currentData === void 0 ? void 0 : currentData.id);\n      } else {\n        await post(`${PRESTADORES.route}`, payload);\n      }\n\n      setError(null);\n      handleCancel();\n      mutate();\n    } catch (error) {\n      if (currentData !== null && currentData !== void 0 && currentData.id) {\n        setError('onUpdate');\n      } else {\n        setError('onCreate');\n      }\n    }\n  };\n\n  const handleCancel = async () => {\n    setCurrentData(null);\n    setOpenForm(false);\n  };\n\n  const handleDelete = async id => {\n    setShowConfirmDialog(true);\n    setIdToDelete(id);\n  };\n\n  const handleConfirmDelete = async () => {\n    try {\n      await remove(`${PRESTADORES.route}`, idToDelete);\n      setError(null);\n      mutate();\n    } catch (error) {\n      setError('onDelete');\n    }\n\n    setShowConfirmDialog(false);\n    setIdToDelete(null);\n  };\n\n  const onEdit = async data => {\n    setCurrentData(null);\n    setOpenForm(false);\n    setTimeout(() => {\n      const payload = _objectSpread(_objectSpread({}, data), {}, {\n        matFechaExpededTitulo: strToDate(data.matFechaExpededTitulo).toISOString(),\n        matFechaRegistro: strToDate(data.matFechaRegistro).toISOString(),\n        fechaNacimiento: strToDate(data.fechaNacimiento).toISOString()\n      });\n\n      setCurrentData(payload);\n      setOpenForm(true);\n      window.scrollTo(0, 0);\n    });\n  };\n\n  const handleChangePagination = pagination => {\n    setFilters(_objectSpread(_objectSpread({}, filters), {}, {\n      page: pagination.page,\n      size: pagination.pageSize\n    }));\n  };\n\n  const handleFilter = newFilters => {\n    setFilters(_objectSpread(_objectSpread({}, INITIAL_FILTER), newFilters));\n    setShowFilters(false);\n  };\n\n  useEffect(() => {\n    setFilterQueryStr(objToQueryString(filters));\n  }, [filters]);\n\n  const handleCancelFilter = () => {\n    setFilters(_objectSpread({}, INITIAL_FILTER));\n    setShowFilters(false);\n  };\n\n  const handleShowImport = () => {\n    setOpenImport(true);\n  };\n\n  const handleSubmitImport = () => {\n    mutate();\n  };\n\n  const handleCancelImport = () => {\n    setOpenImport(false);\n  };\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsxs(Box, {\n      p: 2,\n      m: 1,\n      style: {\n        position: 'relative'\n      },\n      children: [openForm && /*#__PURE__*/_jsx(PrestadorForm, {\n        data: currentData,\n        handleSubmit: handleSubmit,\n        handleCancel: handleCancel\n      }), openImport && /*#__PURE__*/_jsx(PrestadoresImportForm, {\n        data: {},\n        handleSubmit: handleSubmitImport,\n        handleCancel: handleCancelImport\n      }), /*#__PURE__*/_jsx(PrestadoresList, {\n        data: data,\n        handleDelete: handleDelete,\n        onEdit: onEdit,\n        onCreate: openCreateModal,\n        onPaginationChange: handleChangePagination,\n        onImport: handleShowImport,\n        onFilter: () => {\n          setShowFilters(!showFilters);\n        }\n      }), /*#__PURE__*/_jsx(TableFilters, {\n        config: filterConfig,\n        data: filters,\n        onSubmit: handleFilter,\n        onCancel: handleCancelFilter,\n        show: showFilters\n      })]\n    }), /*#__PURE__*/_jsx(ConfirmDialog, {\n      open: showConfirmDialog,\n      onConfirm: handleConfirmDelete,\n      onClose: () => {\n        setIdToDelete(null);\n        setShowConfirmDialog(false);\n      },\n      message: PRESTADORES.deleteMessage\n    }), /*#__PURE__*/_jsx(Loading, {\n      loading: !data,\n      message: LOADING(PRESTADORES.name)\n    }), /*#__PURE__*/_jsx(Alert, {\n      open: errorOnGet || error || info,\n      severity: info ? 'success' : 'error',\n      message: info ? info : error ? ERRORS[error](PRESTADORES.name) : ERRORS.onGet(PRESTADORES.name),\n      autoHideAfter: 5500,\n      onClose: () => {\n        setError(null);\n        setInfo(null);\n      }\n    })]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}