{"ast":null,"code":"import { format, parseISO } from 'date-fns';\nimport { DELEGACIONES } from '../../labels';\nimport { CsvBuilder } from 'filefy';\n\nconst objToQueryString = obj => {\n  var str = '';\n\n  for (var key in obj) {\n    if (obj === '' || obj === null || typeof obj[key] === 'undefined') {\n      continue;\n    }\n\n    if (str !== '') {\n      str += '&';\n    }\n\n    str += key + '=' + encodeURIComponent(obj[key]);\n  }\n\n  return str;\n};\n\nconst formatDate = date => {\n  let d = date;\n\n  if (typeof date === 'string') {\n    if (date.search('Z') < 0) {\n      d += 'T00:00:00.000Z';\n    }\n\n    d = parseISO(d);\n  }\n\n  return format(d, 'yyyy-MM-dd');\n};\n\nconst formatDateNotification = date => {\n  let dateISO = parseISO(date);\n  return format(dateISO, 'dd MMM');\n};\n\nconst strToDate = str => {\n  if (!str || str === '') {\n    return new Date();\n  }\n\n  const dateArr = str.split('-');\n  const month = Number(dateArr[1]) - 1;\n  return new Date(dateArr[0], month, dateArr[2]);\n};\n\nconst getUserDelegaciones = () => {\n  var _user$delegaciones;\n\n  const user = getUser();\n\n  if (!(user !== null && user !== void 0 && user.delegaciones) || (user === null || user === void 0 ? void 0 : user.delegaciones.length) < 1) {\n    return [{\n      value: '',\n      label: DELEGACIONES.userWithoutDelegacionesOption\n    }];\n  }\n\n  let del = user === null || user === void 0 ? void 0 : (_user$delegaciones = user.delegaciones) === null || _user$delegaciones === void 0 ? void 0 : _user$delegaciones.map(d => {\n    return {\n      value: d.id,\n      label: d.nombre\n    };\n  });\n\n  if (isUserAdmin() || user !== null && user !== void 0 && user.casaCentral) {\n    del = addAllToOpts(del, 'Todas');\n  }\n\n  return del;\n};\n\nconst getUser = () => {\n  if (false) {\n    return localStorage.getItem('user') && JSON.parse(localStorage.getItem('user'));\n  }\n\n  return false;\n};\n\nconst isUserAdmin = () => {\n  var _user$groups, _user$groups$find;\n\n  const user = getUser();\n  return user === null || user === void 0 ? void 0 : (_user$groups = user.groups) === null || _user$groups === void 0 ? void 0 : (_user$groups$find = _user$groups.find(g => g.name === 'Administrador')) === null || _user$groups$find === void 0 ? void 0 : _user$groups$find.id;\n};\n\nconst isUserCasaCentral = () => {\n  const user = getUser();\n  return !!(user !== null && user !== void 0 && user.casaCentral);\n};\n\nconst isUserReintegro = () => {\n  var _user$groups2, _user$groups2$find;\n\n  const user = getUser();\n  return user === null || user === void 0 ? void 0 : (_user$groups2 = user.groups) === null || _user$groups2 === void 0 ? void 0 : (_user$groups2$find = _user$groups2.find(g => g.name === 'Reintegro')) === null || _user$groups2$find === void 0 ? void 0 : _user$groups2$find.id;\n};\n\nconst isUserDelegado = () => {\n  var _user$groups3, _user$groups3$find;\n\n  const user = getUser();\n  return user === null || user === void 0 ? void 0 : (_user$groups3 = user.groups) === null || _user$groups3 === void 0 ? void 0 : (_user$groups3$find = _user$groups3.find(g => g.name === 'Delegado')) === null || _user$groups3$find === void 0 ? void 0 : _user$groups3$find.id;\n};\n\nconst isUserAuditoriaAdministrativa = () => {\n  var _user$groups4, _user$groups4$find;\n\n  const user = getUser();\n  return user === null || user === void 0 ? void 0 : (_user$groups4 = user.groups) === null || _user$groups4 === void 0 ? void 0 : (_user$groups4$find = _user$groups4.find(g => g.name === 'AuditoriaAdministrativa')) === null || _user$groups4$find === void 0 ? void 0 : _user$groups4$find.id;\n};\n\nconst isUserAuditoriaCentral = () => {\n  var _user$groups5, _user$groups5$find;\n\n  const user = getUser();\n  return user === null || user === void 0 ? void 0 : (_user$groups5 = user.groups) === null || _user$groups5 === void 0 ? void 0 : (_user$groups5$find = _user$groups5.find(g => g.name === 'AuditoriaCentral')) === null || _user$groups5$find === void 0 ? void 0 : _user$groups5$find.id;\n};\n\nconst isUserAuditoriaMedica = () => {\n  var _user$groups6, _user$groups6$find;\n\n  const user = getUser();\n  return user === null || user === void 0 ? void 0 : (_user$groups6 = user.groups) === null || _user$groups6 === void 0 ? void 0 : (_user$groups6$find = _user$groups6.find(g => g.name === 'AuditoriaMedica')) === null || _user$groups6$find === void 0 ? void 0 : _user$groups6$find.id;\n};\n\nconst isUserContaduria = () => {\n  var _user$groups7, _user$groups7$find;\n\n  const user = getUser();\n  return user === null || user === void 0 ? void 0 : (_user$groups7 = user.groups) === null || _user$groups7 === void 0 ? void 0 : (_user$groups7$find = _user$groups7.find(g => g.name === 'Contaduria')) === null || _user$groups7$find === void 0 ? void 0 : _user$groups7$find.id;\n};\n\nconst isUserTesoreria = () => {\n  var _user$groups8, _user$groups8$find;\n\n  const user = getUser();\n  return user === null || user === void 0 ? void 0 : (_user$groups8 = user.groups) === null || _user$groups8 === void 0 ? void 0 : (_user$groups8$find = _user$groups8.find(g => g.name === 'Tesoreria')) === null || _user$groups8$find === void 0 ? void 0 : _user$groups8$find.id;\n};\n\nconst isUserPresidencia = () => {\n  var _user$groups9, _user$groups9$find;\n\n  const user = getUser();\n  return user === null || user === void 0 ? void 0 : (_user$groups9 = user.groups) === null || _user$groups9 === void 0 ? void 0 : (_user$groups9$find = _user$groups9.find(g => g.name === 'Presidencia')) === null || _user$groups9$find === void 0 ? void 0 : _user$groups9$find.id;\n};\n\nconst checkUserRole = role => {\n  var _user$groups10;\n\n  const user = getUser();\n  return user === null || user === void 0 ? void 0 : (_user$groups10 = user.groups) === null || _user$groups10 === void 0 ? void 0 : _user$groups10.find(g => g.name === role);\n};\n\nconst userHasRole = (user, role) => {\n  var _user$groups11;\n\n  return user === null || user === void 0 ? void 0 : (_user$groups11 = user.groups) === null || _user$groups11 === void 0 ? void 0 : _user$groups11.find(g => g.name === role);\n};\n\nconst addAllToOpts = (data, allLabel = '') => {\n  let d = [{\n    label: allLabel || 'Todos',\n    value: ''\n  }];\n  return d.concat(data);\n};\n\nconst getFileName = relPath => {\n  if (!relPath) return '';\n\n  if (typeof relPath.name === 'string') {\n    return relPath.name;\n  }\n\n  const splitPath = relPath.split('/');\n  return splitPath[splitPath.length - 1];\n};\n\nconst exportTableData = (name, allColumns, allData) => {\n  const columns = allColumns.filter(columnDef => columnDef['export'] !== false);\n  const exportedData = allData.map(rowData => columns.map(columnDef => rowData[columnDef.field]));\n  return new CsvBuilder(name + '_' + formatDate(new Date())).setDelimeter(',').setColumns(columns.map(columnDef => columnDef.title)).addRows(exportedData).exportFile();\n};\n\nexport { objToQueryString, formatDate, strToDate, getUserDelegaciones, getUser, isUserAdmin, isUserDelegado, isUserReintegro, isUserAuditoriaAdministrativa, isUserAuditoriaMedica, isUserAuditoriaCentral, isUserContaduria, isUserTesoreria, isUserPresidencia, addAllToOpts, checkUserRole, userHasRole, getFileName, formatDateNotification, isUserCasaCentral, exportTableData };","map":{"version":3,"sources":["/reintegros/reintegros-frontend/components/common/helpers.tsx"],"names":["format","parseISO","DELEGACIONES","CsvBuilder","objToQueryString","obj","str","key","encodeURIComponent","formatDate","date","d","search","formatDateNotification","dateISO","strToDate","Date","dateArr","split","month","Number","getUserDelegaciones","user","getUser","delegaciones","length","value","label","userWithoutDelegacionesOption","del","map","id","nombre","isUserAdmin","casaCentral","addAllToOpts","localStorage","getItem","JSON","parse","groups","find","g","name","isUserCasaCentral","isUserReintegro","isUserDelegado","isUserAuditoriaAdministrativa","isUserAuditoriaCentral","isUserAuditoriaMedica","isUserContaduria","isUserTesoreria","isUserPresidencia","checkUserRole","role","userHasRole","data","allLabel","concat","getFileName","relPath","splitPath","exportTableData","allColumns","allData","columns","filter","columnDef","exportedData","rowData","field","setDelimeter","setColumns","title","addRows","exportFile"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,QAAjB,QAAiC,UAAjC;AACA,SAASC,YAAT,QAA6B,cAA7B;AACA,SAASC,UAAT,QAA2B,QAA3B;;AAEA,MAAMC,gBAAgB,GAAIC,GAAD,IAAS;AAChC,MAAIC,GAAG,GAAG,EAAV;;AACA,OAAK,IAAIC,GAAT,IAAgBF,GAAhB,EAAqB;AACnB,QAAIA,GAAG,KAAK,EAAR,IAAcA,GAAG,KAAK,IAAtB,IAA8B,OAAOA,GAAG,CAACE,GAAD,CAAV,KAAoB,WAAtD,EAAmE;AACjE;AACD;;AACD,QAAID,GAAG,KAAK,EAAZ,EAAgB;AACdA,MAAAA,GAAG,IAAI,GAAP;AACD;;AACDA,IAAAA,GAAG,IAAIC,GAAG,GAAG,GAAN,GAAYC,kBAAkB,CAACH,GAAG,CAACE,GAAD,CAAJ,CAArC;AACD;;AACD,SAAOD,GAAP;AACD,CAZD;;AAcA,MAAMG,UAAU,GAAIC,IAAD,IAAU;AAC3B,MAAIC,CAAC,GAAGD,IAAR;;AACA,MAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AAC5B,QAAIA,IAAI,CAACE,MAAL,CAAY,GAAZ,IAAmB,CAAvB,EAA0B;AACxBD,MAAAA,CAAC,IAAI,gBAAL;AACD;;AACDA,IAAAA,CAAC,GAAGV,QAAQ,CAACU,CAAD,CAAZ;AACD;;AACD,SAAOX,MAAM,CAACW,CAAD,EAAI,YAAJ,CAAb;AACD,CATD;;AAWA,MAAME,sBAAsB,GAAIH,IAAD,IAAU;AACvC,MAAII,OAAO,GAAGb,QAAQ,CAACS,IAAD,CAAtB;AACA,SAAOV,MAAM,CAACc,OAAD,EAAU,QAAV,CAAb;AACD,CAHD;;AAKA,MAAMC,SAAS,GAAIT,GAAD,IAAS;AACzB,MAAI,CAACA,GAAD,IAAQA,GAAG,KAAK,EAApB,EAAwB;AACtB,WAAO,IAAIU,IAAJ,EAAP;AACD;;AACD,QAAMC,OAAO,GAAGX,GAAG,CAACY,KAAJ,CAAU,GAAV,CAAhB;AACA,QAAMC,KAAK,GAAGC,MAAM,CAACH,OAAO,CAAC,CAAD,CAAR,CAAN,GAAqB,CAAnC;AACA,SAAO,IAAID,IAAJ,CAASC,OAAO,CAAC,CAAD,CAAhB,EAAqBE,KAArB,EAA4BF,OAAO,CAAC,CAAD,CAAnC,CAAP;AACD,CAPD;;AASA,MAAMI,mBAAmB,GAAG,MAAM;AAAA;;AAChC,QAAMC,IAAI,GAAGC,OAAO,EAApB;;AACA,MAAI,EAACD,IAAD,aAACA,IAAD,eAACA,IAAI,CAAEE,YAAP,KAAuB,CAAAF,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEE,YAAN,CAAmBC,MAAnB,IAA4B,CAAvD,EAA0D;AACxD,WAAO,CACL;AACEC,MAAAA,KAAK,EAAE,EADT;AAEEC,MAAAA,KAAK,EAAEzB,YAAY,CAAC0B;AAFtB,KADK,CAAP;AAMD;;AACD,MAAIC,GAAG,GAAGP,IAAH,aAAGA,IAAH,6CAAGA,IAAI,CAAEE,YAAT,uDAAG,mBAAoBM,GAApB,CAAyBnB,CAAD,IAAO;AACvC,WAAO;AACLe,MAAAA,KAAK,EAAEf,CAAC,CAACoB,EADJ;AAELJ,MAAAA,KAAK,EAAEhB,CAAC,CAACqB;AAFJ,KAAP;AAID,GALS,CAAV;;AAMA,MAAIC,WAAW,MAAMX,IAAN,aAAMA,IAAN,eAAMA,IAAI,CAAEY,WAA3B,EAAwC;AACtCL,IAAAA,GAAG,GAAGM,YAAY,CAACN,GAAD,EAAM,OAAN,CAAlB;AACD;;AACD,SAAOA,GAAP;AACD,CApBD;;AAsBA,MAAMN,OAAO,GAAG,MAAM;AACpB,aAAmC;AACjC,WAAOa,YAAY,CAACC,OAAb,CAAqB,MAArB,KAAgCC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,CAAvC;AACD;;AACD,SAAO,KAAP;AACD,CALD;;AAOA,MAAMJ,WAAW,GAAG,MAAM;AAAA;;AACxB,QAAMX,IAAI,GAAGC,OAAO,EAApB;AACA,SAAOD,IAAP,aAAOA,IAAP,uCAAOA,IAAI,CAAEkB,MAAb,sEAAO,aAAcC,IAAd,CAAoBC,CAAD,IAAOA,CAAC,CAACC,IAAF,KAAW,eAArC,CAAP,sDAAO,kBAAuDZ,EAA9D;AACD,CAHD;;AAKA,MAAMa,iBAAiB,GAAG,MAAM;AAC9B,QAAMtB,IAAI,GAAGC,OAAO,EAApB;AACA,SAAO,CAAC,EAACD,IAAD,aAACA,IAAD,eAACA,IAAI,CAAEY,WAAP,CAAR;AACD,CAHD;;AAKA,MAAMW,eAAe,GAAG,MAAM;AAAA;;AAC5B,QAAMvB,IAAI,GAAGC,OAAO,EAApB;AACA,SAAOD,IAAP,aAAOA,IAAP,wCAAOA,IAAI,CAAEkB,MAAb,wEAAO,cAAcC,IAAd,CAAoBC,CAAD,IAAOA,CAAC,CAACC,IAAF,KAAW,WAArC,CAAP,uDAAO,mBAAmDZ,EAA1D;AACD,CAHD;;AAKA,MAAMe,cAAc,GAAG,MAAM;AAAA;;AAC3B,QAAMxB,IAAI,GAAGC,OAAO,EAApB;AACA,SAAOD,IAAP,aAAOA,IAAP,wCAAOA,IAAI,CAAEkB,MAAb,wEAAO,cAAcC,IAAd,CAAoBC,CAAD,IAAOA,CAAC,CAACC,IAAF,KAAW,UAArC,CAAP,uDAAO,mBAAkDZ,EAAzD;AACD,CAHD;;AAKA,MAAMgB,6BAA6B,GAAG,MAAM;AAAA;;AAC1C,QAAMzB,IAAI,GAAGC,OAAO,EAApB;AACA,SAAOD,IAAP,aAAOA,IAAP,wCAAOA,IAAI,CAAEkB,MAAb,wEAAO,cAAcC,IAAd,CAAoBC,CAAD,IAAOA,CAAC,CAACC,IAAF,KAAW,yBAArC,CAAP,uDAAO,mBAAiEZ,EAAxE;AACD,CAHD;;AAKA,MAAMiB,sBAAsB,GAAG,MAAM;AAAA;;AACnC,QAAM1B,IAAI,GAAGC,OAAO,EAApB;AACA,SAAOD,IAAP,aAAOA,IAAP,wCAAOA,IAAI,CAAEkB,MAAb,wEAAO,cAAcC,IAAd,CAAoBC,CAAD,IAAOA,CAAC,CAACC,IAAF,KAAW,kBAArC,CAAP,uDAAO,mBAA0DZ,EAAjE;AACD,CAHD;;AAKA,MAAMkB,qBAAqB,GAAG,MAAM;AAAA;;AAClC,QAAM3B,IAAI,GAAGC,OAAO,EAApB;AACA,SAAOD,IAAP,aAAOA,IAAP,wCAAOA,IAAI,CAAEkB,MAAb,wEAAO,cAAcC,IAAd,CAAoBC,CAAD,IAAOA,CAAC,CAACC,IAAF,KAAW,iBAArC,CAAP,uDAAO,mBAAyDZ,EAAhE;AACD,CAHD;;AAKA,MAAMmB,gBAAgB,GAAG,MAAM;AAAA;;AAC7B,QAAM5B,IAAI,GAAGC,OAAO,EAApB;AACA,SAAOD,IAAP,aAAOA,IAAP,wCAAOA,IAAI,CAAEkB,MAAb,wEAAO,cAAcC,IAAd,CAAoBC,CAAD,IAAOA,CAAC,CAACC,IAAF,KAAW,YAArC,CAAP,uDAAO,mBAAoDZ,EAA3D;AACD,CAHD;;AAKA,MAAMoB,eAAe,GAAG,MAAM;AAAA;;AAC5B,QAAM7B,IAAI,GAAGC,OAAO,EAApB;AACA,SAAOD,IAAP,aAAOA,IAAP,wCAAOA,IAAI,CAAEkB,MAAb,wEAAO,cAAcC,IAAd,CAAoBC,CAAD,IAAOA,CAAC,CAACC,IAAF,KAAW,WAArC,CAAP,uDAAO,mBAAmDZ,EAA1D;AACD,CAHD;;AAKA,MAAMqB,iBAAiB,GAAG,MAAM;AAAA;;AAC9B,QAAM9B,IAAI,GAAGC,OAAO,EAApB;AACA,SAAOD,IAAP,aAAOA,IAAP,wCAAOA,IAAI,CAAEkB,MAAb,wEAAO,cAAcC,IAAd,CAAoBC,CAAD,IAAOA,CAAC,CAACC,IAAF,KAAW,aAArC,CAAP,uDAAO,mBAAqDZ,EAA5D;AACD,CAHD;;AAKA,MAAMsB,aAAa,GAAIC,IAAD,IAAU;AAAA;;AAC9B,QAAMhC,IAAI,GAAGC,OAAO,EAApB;AACA,SAAOD,IAAP,aAAOA,IAAP,yCAAOA,IAAI,CAAEkB,MAAb,mDAAO,eAAcC,IAAd,CAAoBC,CAAD,IAAOA,CAAC,CAACC,IAAF,KAAWW,IAArC,CAAP;AACD,CAHD;;AAKA,MAAMC,WAAW,GAAG,CAACjC,IAAD,EAAOgC,IAAP,KAAgB;AAAA;;AAClC,SAAOhC,IAAP,aAAOA,IAAP,yCAAOA,IAAI,CAAEkB,MAAb,mDAAO,eAAcC,IAAd,CAAoBC,CAAD,IAAOA,CAAC,CAACC,IAAF,KAAWW,IAArC,CAAP;AACD,CAFD;;AAIA,MAAMnB,YAAY,GAAG,CAACqB,IAAD,EAA6CC,QAAgB,GAAG,EAAhE,KAAuE;AAC1F,MAAI9C,CAAC,GAAG,CACN;AACEgB,IAAAA,KAAK,EAAE8B,QAAQ,IAAI,OADrB;AAEE/B,IAAAA,KAAK,EAAE;AAFT,GADM,CAAR;AAMA,SAAOf,CAAC,CAAC+C,MAAF,CAASF,IAAT,CAAP;AACD,CARD;;AAUA,MAAMG,WAAW,GAAIC,OAAD,IAAkB;AACpC,MAAI,CAACA,OAAL,EAAc,OAAO,EAAP;;AACd,MAAI,OAAOA,OAAO,CAACjB,IAAf,KAAwB,QAA5B,EAAsC;AACpC,WAAOiB,OAAO,CAACjB,IAAf;AACD;;AACD,QAAMkB,SAAS,GAAGD,OAAO,CAAC1C,KAAR,CAAc,GAAd,CAAlB;AAEA,SAAO2C,SAAS,CAACA,SAAS,CAACpC,MAAV,GAAmB,CAApB,CAAhB;AACD,CARD;;AAUA,MAAMqC,eAAe,GAAG,CAACnB,IAAD,EAAOoB,UAAP,EAAmBC,OAAnB,KAA+B;AACrD,QAAMC,OAAO,GAAGF,UAAU,CAACG,MAAX,CAAmBC,SAAD,IAAeA,SAAS,CAAC,QAAD,CAAT,KAAwB,KAAzD,CAAhB;AACA,QAAMC,YAAY,GAAGJ,OAAO,CAAClC,GAAR,CAAauC,OAAD,IAC/BJ,OAAO,CAACnC,GAAR,CAAaqC,SAAD,IAAeE,OAAO,CAACF,SAAS,CAACG,KAAX,CAAlC,CADmB,CAArB;AAGA,SAAO,IAAInE,UAAJ,CAAewC,IAAI,GAAG,GAAP,GAAalC,UAAU,CAAC,IAAIO,IAAJ,EAAD,CAAtC,EACJuD,YADI,CACS,GADT,EAEJC,UAFI,CAEOP,OAAO,CAACnC,GAAR,CAAaqC,SAAD,IAAeA,SAAS,CAACM,KAArC,CAFP,EAGJC,OAHI,CAGIN,YAHJ,EAIJO,UAJI,EAAP;AAKD,CAVD;;AAYA,SACEvE,gBADF,EAEEK,UAFF,EAGEM,SAHF,EAIEM,mBAJF,EAKEE,OALF,EAMEU,WANF,EAOEa,cAPF,EAQED,eARF,EASEE,6BATF,EAUEE,qBAVF,EAWED,sBAXF,EAYEE,gBAZF,EAaEC,eAbF,EAcEC,iBAdF,EAeEjB,YAfF,EAgBEkB,aAhBF,EAiBEE,WAjBF,EAkBEI,WAlBF,EAmBE9C,sBAnBF,EAoBE+B,iBApBF,EAqBEkB,eArBF","sourcesContent":["import { format, parseISO } from 'date-fns';\nimport { DELEGACIONES } from '../../labels';\nimport { CsvBuilder } from 'filefy';\n\nconst objToQueryString = (obj) => {\n  var str = '';\n  for (var key in obj) {\n    if (obj === '' || obj === null || typeof obj[key] === 'undefined') {\n      continue;\n    }\n    if (str !== '') {\n      str += '&';\n    }\n    str += key + '=' + encodeURIComponent(obj[key]);\n  }\n  return str;\n};\n\nconst formatDate = (date) => {\n  let d = date;\n  if (typeof date === 'string') {\n    if (date.search('Z') < 0) {\n      d += 'T00:00:00.000Z';\n    }\n    d = parseISO(d);\n  }\n  return format(d, 'yyyy-MM-dd');\n};\n\nconst formatDateNotification = (date) => {\n  let dateISO = parseISO(date);\n  return format(dateISO, 'dd MMM');\n};\n\nconst strToDate = (str) => {\n  if (!str || str === '') {\n    return new Date();\n  }\n  const dateArr = str.split('-');\n  const month = Number(dateArr[1]) - 1;\n  return new Date(dateArr[0], month, dateArr[2]);\n};\n\nconst getUserDelegaciones = () => {\n  const user = getUser();\n  if (!user?.delegaciones || user?.delegaciones.length < 1) {\n    return [\n      {\n        value: '',\n        label: DELEGACIONES.userWithoutDelegacionesOption,\n      },\n    ];\n  }\n  let del = user?.delegaciones?.map((d) => {\n    return {\n      value: d.id,\n      label: d.nombre,\n    };\n  });\n  if (isUserAdmin() || user?.casaCentral) {\n    del = addAllToOpts(del, 'Todas');\n  }\n  return del;\n};\n\nconst getUser = () => {\n  if (typeof window !== 'undefined') {\n    return localStorage.getItem('user') && JSON.parse(localStorage.getItem('user'));\n  }\n  return false;\n};\n\nconst isUserAdmin = () => {\n  const user = getUser();\n  return user?.groups?.find((g) => g.name === 'Administrador')?.id;\n};\n\nconst isUserCasaCentral = () => {\n  const user = getUser();\n  return !!user?.casaCentral;\n};\n\nconst isUserReintegro = () => {\n  const user = getUser();\n  return user?.groups?.find((g) => g.name === 'Reintegro')?.id;\n};\n\nconst isUserDelegado = () => {\n  const user = getUser();\n  return user?.groups?.find((g) => g.name === 'Delegado')?.id;\n};\n\nconst isUserAuditoriaAdministrativa = () => {\n  const user = getUser();\n  return user?.groups?.find((g) => g.name === 'AuditoriaAdministrativa')?.id;\n};\n\nconst isUserAuditoriaCentral = () => {\n  const user = getUser();\n  return user?.groups?.find((g) => g.name === 'AuditoriaCentral')?.id;\n};\n\nconst isUserAuditoriaMedica = () => {\n  const user = getUser();\n  return user?.groups?.find((g) => g.name === 'AuditoriaMedica')?.id;\n};\n\nconst isUserContaduria = () => {\n  const user = getUser();\n  return user?.groups?.find((g) => g.name === 'Contaduria')?.id;\n};\n\nconst isUserTesoreria = () => {\n  const user = getUser();\n  return user?.groups?.find((g) => g.name === 'Tesoreria')?.id;\n};\n\nconst isUserPresidencia = () => {\n  const user = getUser();\n  return user?.groups?.find((g) => g.name === 'Presidencia')?.id;\n};\n\nconst checkUserRole = (role) => {\n  const user = getUser();\n  return user?.groups?.find((g) => g.name === role);\n};\n\nconst userHasRole = (user, role) => {\n  return user?.groups?.find((g) => g.name === role);\n};\n\nconst addAllToOpts = (data: Array<{ label: string; value: any }>, allLabel: string = '') => {\n  let d = [\n    {\n      label: allLabel || 'Todos',\n      value: '',\n    },\n  ];\n  return d.concat(data);\n};\n\nconst getFileName = (relPath: any) => {\n  if (!relPath) return '';\n  if (typeof relPath.name === 'string') {\n    return relPath.name;\n  }\n  const splitPath = relPath.split('/');\n\n  return splitPath[splitPath.length - 1];\n};\n\nconst exportTableData = (name, allColumns, allData) => {\n  const columns = allColumns.filter((columnDef) => columnDef['export'] !== false);\n  const exportedData = allData.map((rowData) =>\n    columns.map((columnDef) => rowData[columnDef.field]),\n  );\n  return new CsvBuilder(name + '_' + formatDate(new Date()))\n    .setDelimeter(',')\n    .setColumns(columns.map((columnDef) => columnDef.title))\n    .addRows(exportedData)\n    .exportFile();\n};\n\nexport {\n  objToQueryString,\n  formatDate,\n  strToDate,\n  getUserDelegaciones,\n  getUser,\n  isUserAdmin,\n  isUserDelegado,\n  isUserReintegro,\n  isUserAuditoriaAdministrativa,\n  isUserAuditoriaMedica,\n  isUserAuditoriaCentral,\n  isUserContaduria,\n  isUserTesoreria,\n  isUserPresidencia,\n  addAllToOpts,\n  checkUserRole,\n  userHasRole,\n  getFileName,\n  formatDateNotification,\n  isUserCasaCentral,\n  exportTableData,\n};\n"]},"metadata":{},"sourceType":"module"}