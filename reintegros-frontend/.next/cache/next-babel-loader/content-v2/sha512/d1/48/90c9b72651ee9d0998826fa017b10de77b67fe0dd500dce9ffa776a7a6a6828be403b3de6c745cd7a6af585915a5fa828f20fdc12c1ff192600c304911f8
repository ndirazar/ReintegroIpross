{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Box, Grid, Button, Typography } from '@material-ui/core';\nimport React, { useEffect, useState } from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport { NOMENCLADOR, PRESTACIONES, STEPPER_SOLICITUDES } from '../../../labels';\nimport FieldRender from '../../builder/FieldRender'; // import configPrestaciones from './FormConfig';\n\nimport AttachMoneyOutlinedIcon from '@material-ui/icons/AttachMoneyOutlined';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport useStyles from '../Stepper.styles';\nimport { ListaPrestacion } from './ListaPrestaciones';\nimport { FieldType } from '../../builder';\nimport { subDays } from 'date-fns';\nimport { get } from '../../api-call/service';\nexport const FormPrestaciones = ({\n  formContent,\n  step,\n  addPrestacion,\n  prestaciones,\n  removePrestacion\n}) => {\n  const {\n    0: continuar,\n    1: setContinuar\n  } = useState(true);\n  const methods = useFormContext();\n  const {\n    reset,\n    register,\n    watch,\n    setError,\n    setValue,\n    clearErrors\n  } = methods;\n  const form = watch();\n  const {\n    0: defaultValues,\n    1: setDefaultValues\n  } = useState(methods.getValues());\n  const classes = useStyles();\n  const {\n    0: fechaDesde,\n    1: setFechaDesde\n  } = useState(new Date());\n  let nomenclador = [];\n  let prestadores = [];\n  const configPrestaciones = [{\n    name: 'capitulo',\n    type: FieldType.options,\n    label: PRESTACIONES.fields.capitulo,\n    options: async () => {\n      return (await get('api/capitulos/')).data.results.map(c => ({\n        value: c.capitulo,\n        label: `${c.capitulo} - ${c.descripcion}`\n      }));\n    },\n    styling: {\n      columns: 6\n    },\n    rules: {\n      required: true\n    },\n    onChange: (val, form) => {\n      form.setValue('nomenclador', '');\n      form.setValue('modalidad', '');\n      form.setValue('cobertura', '');\n      form.setValue('estadoActual', '');\n      form.setValue('prestador', '');\n      form.setValue('valorIprossNomenclador', '');\n      form.setValue('montoTotal', '');\n      form.setValue('valorPrestacion', '');\n      form.setValue('montoReintegrar', '');\n      form.setValue('cantidad', '');\n      form.setValue('unidad', '');\n      form.setValue('periodo', '');\n      form.setValue('fechaPractica', '');\n      form.setValue('fechaPracticaHasta', '');\n    }\n  }, {\n    name: 'nomenclador',\n    type: FieldType.options,\n    label: PRESTACIONES.fields.nomenclador,\n    options: async (form, query) => {\n      const cap = form.getValues()['capitulo'] || '';\n\n      if (!cap) {\n        return [];\n      }\n\n      nomenclador = (await get('/api/nomenclador/?estado=activo&capitulo=' + cap)).data.results;\n      return nomenclador.map(n => {\n        var _n$capitulo, _n$capitulo2;\n\n        return {\n          value: n.id,\n          label: `${n.codigo}-${n.descripcion} (${(_n$capitulo = n.capitulo) === null || _n$capitulo === void 0 ? void 0 : _n$capitulo.capitulo}-${(_n$capitulo2 = n.capitulo) === null || _n$capitulo2 === void 0 ? void 0 : _n$capitulo2.descripcion})`\n        };\n      });\n    },\n    onChange: (value, form) => {\n      const item = nomenclador.find(elem => elem.id === parseInt(value === null || value === void 0 ? void 0 : value.value));\n\n      if (nomenclador.length && item) {\n        form.setValue('valorIprossNomenclador', item === null || item === void 0 ? void 0 : item.valorIpross);\n        const capitulo = form.getValues()['capitulo'];\n        let cobertura = 0;\n\n        if (capitulo === 40 || capitulo === 41 || capitulo === 43) {\n          cobertura = 90;\n        } else {\n          const isFullCobertura = prestaciones.find(p => p.capitulo === 40 || p.capitulo === 41 || p.capitulo === 43);\n\n          if (isFullCobertura) {\n            cobertura = 100;\n          } else {\n            cobertura = item.modalidadPrestacion === 'ambulatoria' ? 80 : 90;\n          }\n        }\n\n        const montoTotal = parseFloat(item === null || item === void 0 ? void 0 : item.valorIpross);\n        const montoReintegrar = (montoTotal - cobertura * montoTotal / 100).toFixed(2);\n        form.setValue('montoReintegrar', montoReintegrar, {\n          shouldValidate: true,\n          shouldDirty: true\n        });\n        form.setValue('modalidad', item.modalidadPrestacion, {\n          shouldValidate: true,\n          shouldDirty: true\n        });\n        form.setValue('cobertura', cobertura, {\n          shouldValidate: true,\n          shouldDirty: true\n        });\n        form.setValue('estadoActual', 'enCurso');\n        form.setValue('cantidad', 1);\n        form.setValue('unidad', (item === null || item === void 0 ? void 0 : item.unidad) || 'unidades');\n        form.setValue('montoTotal', montoTotal.toFixed(2));\n      }\n    },\n    styling: {\n      columns: 12\n    },\n    rules: {\n      required: true\n    }\n  }, {\n    name: 'modalidad',\n    type: FieldType.options,\n    label: PRESTACIONES.fields.modalidad,\n    options: NOMENCLADOR.optionsModalidadPresentacion,\n    styling: {\n      columns: 6\n    },\n    rules: {\n      required: true\n    },\n    disabled: true\n  }, {\n    name: 'cobertura',\n    type: FieldType.string,\n    label: PRESTACIONES.fields.cobertura,\n    styling: {\n      columns: 6\n    },\n    rules: {\n      required: true\n    },\n    disabled: true,\n    prefix: /*#__PURE__*/_jsx(_Fragment, {\n      children: \"%\"\n    })\n  }, {\n    name: 'estadoActual',\n    type: FieldType.options,\n    label: PRESTACIONES.fields['estadoActual'],\n    options: PRESTACIONES.optionsEstadoActual,\n    styling: {\n      columns: 6\n    },\n    rules: {\n      required: true\n    },\n    disabled: true\n  }, {\n    name: 'prestador',\n    type: FieldType.options,\n    label: PRESTACIONES.fields.prestador,\n    options: async () => {\n      return prestadores;\n    },\n    onUpdate: async (val, form) => {\n      if (val === '') {\n        prestadores = [];\n        return;\n      }\n\n      prestadores = (await get(`api/prestadores/?profEstado=alta&matricula=${val}`)).data.results.map(p => ({\n        value: p.id,\n        label: `${p.matricula} - ${p.nombre} ${p.apellido}`\n      }));\n    },\n    styling: {\n      columns: 6\n    },\n    rules: {\n      required: true\n    }\n  }, {\n    name: 'br',\n    type: FieldType.br,\n    label: ''\n  }, {\n    name: 'valorIprossNomenclador',\n    type: FieldType.string,\n    label: PRESTACIONES.fields.valorIprossNomenclador,\n    styling: {\n      columns: 3\n    },\n    rules: {\n      required: true\n    },\n    disabled: true,\n    prefix: /*#__PURE__*/_jsx(AttachMoneyOutlinedIcon, {})\n  }, {\n    name: 'montoTotal',\n    type: FieldType.string,\n    label: PRESTACIONES.fields.montoTotal,\n    styling: {\n      columns: 3\n    },\n    rules: {\n      min: 1,\n      required: true\n    },\n    disabled: true\n  }, {\n    name: 'valorPrestacion',\n    type: FieldType.int,\n    label: PRESTACIONES.fields.valorPrestacion,\n    styling: {\n      columns: 3\n    },\n    rules: {\n      required: true\n    },\n    prefix: /*#__PURE__*/_jsx(AttachMoneyOutlinedIcon, {})\n  }, {\n    name: 'montoReintegrar',\n    type: FieldType.string,\n    label: PRESTACIONES.fields.montoReintegrar,\n    styling: {\n      columns: 3\n    },\n    rules: {\n      required: true\n    },\n    disabled: true,\n    prefix: /*#__PURE__*/_jsx(AttachMoneyOutlinedIcon, {})\n  }, {\n    name: 'cantidad',\n    type: FieldType.int,\n    label: PRESTACIONES.fields.cantidad,\n    styling: {\n      columns: 6\n    },\n    rules: {\n      min: 1,\n      required: true\n    },\n    onChange: (val, form) => {\n      const valorIpross = form.getValues()['valorIprossNomenclador'];\n      const montoTotal = valorIpross * val;\n      form.setValue('montoTotal', montoTotal.toFixed(2));\n      const cobertura = form.getValues()['cobertura'];\n      const montoReintegrar = (montoTotal * parseFloat(cobertura) / 100).toFixed(2);\n      form.setValue('montoReintegrar', montoReintegrar);\n    }\n  }, {\n    name: 'unidad',\n    type: FieldType.string,\n    label: PRESTACIONES.fields.unidad,\n    styling: {\n      columns: 6\n    },\n    disabled: true\n  }, {\n    name: 'periodo',\n    type: FieldType.options,\n    options: NOMENCLADOR.optionsPeriodoTope,\n    label: PRESTACIONES.fields.periodo,\n    styling: {\n      columns: 6\n    },\n    rules: {\n      required: true\n    }\n  }];\n  const {\n    0: formConfig,\n    1: setFormConfig\n  } = useState(configPrestaciones);\n  useEffect(() => {\n    console.log('ACA', _objectSpread({}, formContent.two));\n    reset(_objectSpread({}, formContent.two), {\n      errors: true\n    });\n  }, []);\n  const fechaField = {\n    name: 'fechaPractica',\n    type: FieldType.date,\n    label: PRESTACIONES.fields.fechaPractica,\n    styling: {\n      columns: 6\n    },\n    rules: {\n      required: true,\n      min: subDays(new Date(), 60).toString(),\n      max: new Date().toString()\n    },\n    onChange: (val, form) => {\n      setFechaDesde(val);\n    }\n  };\n  const fechaHastaField = {\n    name: 'fechaPracticaHasta',\n    type: FieldType.date,\n    label: PRESTACIONES.fields.fechaPracticaHasta,\n    styling: {\n      columns: 6\n    },\n    rules: {\n      required: true,\n      min: fechaDesde.toString() // max: addDays(fechaDesde, 60).toString(),\n\n    }\n  };\n  const dateSelect = {\n    name: 'isDateRange',\n    type: FieldType.options,\n    label: 'Fecha / Rango',\n    options: PRESTACIONES.optionsDate,\n    styling: {\n      columns: 6\n    },\n    onChange: (val, form) => {\n      let c = [...configPrestaciones, dateSelect, fechaField];\n\n      if (val === 'range') {\n        c.push(fechaHastaField);\n      }\n\n      setFormConfig(c);\n    }\n  };\n  useEffect(() => {\n    const conf = [...formConfig, dateSelect];\n    setFormConfig(conf);\n  }, [formContent, setFormConfig]);\n  useEffect(() => {\n    let c = [...configPrestaciones, dateSelect, fechaField];\n\n    if (methods.getValues()['isDateRange'] === 'range') {\n      c.push(fechaHastaField);\n    }\n\n    setFormConfig(c);\n  }, [fechaDesde]);\n\n  const validatePrestacion = () => {\n    let isValid = true;\n    let errors = [];\n    clearErrors();\n    formConfig.map(field => {\n      var _field$rules;\n\n      if (field !== null && field !== void 0 && (_field$rules = field.rules) !== null && _field$rules !== void 0 && _field$rules.required && !methods.getValues()[field.name]) {\n        errors.push(field.name);\n        setError(field.name, {\n          type: 'required'\n        });\n        isValid = false;\n      }\n    });\n    return isValid;\n  };\n\n  const handleAddPrestacion = (continuar = true) => {\n    const isValid = validatePrestacion();\n\n    if (!isValid) {\n      return false;\n    }\n\n    addPrestacion();\n    clearForm();\n    setContinuar(continuar);\n    window.scrollTo(0, 0);\n  };\n\n  const handleCancelPrestacion = () => {\n    clearForm();\n    setContinuar(false);\n  };\n\n  const clearForm = () => {\n    let newData = {};\n    formConfig.forEach(field => {\n      newData[field.name] = '';\n    });\n    setDefaultValues(newData);\n    reset(newData);\n  };\n\n  return /*#__PURE__*/_jsxs(Box, {\n    margin: 3,\n    children: [/*#__PURE__*/_jsx(ListaPrestacion, {\n      prestaciones: prestaciones,\n      buttons: [{\n        action: removePrestacion,\n        icon: /*#__PURE__*/_jsx(DeleteIcon, {})\n      }]\n    }), continuar && /*#__PURE__*/_jsx(_Fragment, {\n      children: /*#__PURE__*/_jsxs(Box, {\n        className: classes.form,\n        children: [/*#__PURE__*/_jsxs(Box, {\n          children: [/*#__PURE__*/_jsx(Typography, {\n            variant: \"h5\",\n            gutterBottom: true,\n            children: step.title\n          }), /*#__PURE__*/_jsx(Typography, {\n            variant: \"subtitle1\",\n            gutterBottom: true,\n            children: step.description\n          })]\n        }), /*#__PURE__*/_jsx(\"form\", {\n          children: /*#__PURE__*/_jsx(\"fieldset\", {\n            children: /*#__PURE__*/_jsxs(Grid, {\n              container: true,\n              spacing: 2,\n              children: [formConfig.map((field, index) => {\n                var _field$styling;\n\n                return /*#__PURE__*/_jsx(Grid, {\n                  item: true,\n                  md: ((_field$styling = field.styling) === null || _field$styling === void 0 ? void 0 : _field$styling.columns) || 12,\n                  children: /*#__PURE__*/_jsx(FieldRender, {\n                    field: field,\n                    form: methods,\n                    data: defaultValues\n                  })\n                }, index);\n              }), /*#__PURE__*/_jsxs(Grid, {\n                item: true,\n                md: 12,\n                children: [/*#__PURE__*/_jsx(Button, {\n                  variant: \"contained\",\n                  color: \"primary\",\n                  onClick: () => {\n                    handleAddPrestacion(true);\n                  },\n                  className: classes.button,\n                  children: STEPPER_SOLICITUDES.saveAndContinue\n                }), /*#__PURE__*/_jsx(Button, {\n                  variant: \"contained\",\n                  color: \"primary\",\n                  onClick: () => {\n                    handleAddPrestacion(false);\n                  },\n                  className: classes.button,\n                  children: STEPPER_SOLICITUDES.save\n                }), /*#__PURE__*/_jsx(Button, {\n                  variant: \"contained\",\n                  color: \"default\",\n                  onClick: () => {\n                    handleCancelPrestacion();\n                  },\n                  className: classes.button,\n                  children: STEPPER_SOLICITUDES.cancel\n                })]\n              })]\n            })\n          })\n        })]\n      })\n    }), !continuar && /*#__PURE__*/_jsx(Box, {\n      children: /*#__PURE__*/_jsx(Grid, {\n        container: true,\n        spacing: 2,\n        children: /*#__PURE__*/_jsx(Grid, {\n          item: true,\n          md: 12,\n          children: /*#__PURE__*/_jsx(Button, {\n            variant: \"contained\",\n            color: \"primary\",\n            onClick: () => {\n              clearForm();\n              setContinuar(true);\n            },\n            className: classes.button,\n            children: STEPPER_SOLICITUDES.addPrestacion\n          })\n        })\n      })\n    })]\n  });\n};","map":null,"metadata":{},"sourceType":"module"}